# CMake 最低版本号要求
cmake_minimum_required(VERSION 2.6)
# 项目信息
project(gameserver)

SET(CMAKE_C_COMPILER g++)
SET(CMAK_CXX_COMPILER g++)

# 添加c++11编译选项
add_compile_options(-std=c++11)

# 显示或关闭编译的详细信息
set(CMAKE_VERBOSE_MAKEFILE ON)
#set(CMAKE_VERBOSE_MAKEFILE OFF)

# DEBUG OR RELEASE
#set(CMAKE_BUILD_TYPE DEBUG)
#set(CMAKE_BUILD_TYPE RELEASE)

# 导出编译符号，供vim  YouCompleteMe 使用
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# 显示变量
message(STATUS "CMAKE_BUILD_TYPE:" ${CMAKE_BUILD_TYPE})
message(STATUS "CMAKE_C_COMPILER:" ${CMAKE_C_COMPILER})
message(STATUS "CMAKE_CXX_COMPILER:" ${CMAKE_CXX_COMPILER})


# 设置debug和release的编译选项
set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
set(CMAKE_BUILD_TYPE "DEBUG")

IF (CMAKE_BUILD_TYPE MATCHES "DEBUG")
    message(STATUS "CMAKE_CXX_FLAGS_DEBUG:" ${CMAKE_CXX_FLAGS_DEBUG})
ELSE(CMAKE_BUILD_TYPE MATCHES "DEBUG")
    message(STATUS "CMAKE_CXX_FLAGS_RELEASE:" ${CMAKE_CXX_FLAGS_RELEASE})
ENDIF (CMAKE_BUILD_TYPE MATCHES "DEBUG")

# 头文件目录
include_directories("Base")
include_directories("Common")
#add by huyf 2018.04.03:多线程架构和消息队列
#include_directories("Comm")
#include_directories("Share")
#include_directories("Thread/ThreadBase")
#include_directories("Thread/SocketThread")
#include_directories("KernelModule/KernelBase")
#include_directories("KernelModule/SocketKernel")
#include_directories("KernelModule/WorldKernel")
#include_directories("NetBase/MulitThreadNetBase")
#add end:多线程架构和消息队列
include_directories("Main")
include_directories("Main/BaseObj")
include_directories("Main/Battle")
include_directories("Main/Friend")
include_directories("Main/Item")
include_directories("Main/LimitAward")
include_directories("Main/OnLineAward")
include_directories("Main/SignUp")
include_directories("Main/TaskDetail")
include_directories("Main/TopList")
include_directories("NetBase")
include_directories("Protocol")
include_directories("WorldData")
include_directories("MsgHandler")
include_directories("DataBase")
include_directories("WebSocket")



# lib库目录
#link_directories("/home/acc/app/boost_1_64_0/stage/lib")

# 查找目录下的所有源文件
# 并将名称保存到 SRCLIST 变量
aux_source_directory(Base SRCLIST)
aux_source_directory(Common SRCLIST)
#add by huyf 2018.04.03:多线程架构和消息队列
#aux_source_directory(Comm SRCLIST)
#aux_source_directory(Share SRCLIST)
#aux_source_directory(Thread/ThreadBase SRCLIST)
#aux_source_directory(Thread/SocketThread SRCLIST)
#aux_source_directory(KernelModule/KernelBase SRCLIST)
#aux_source_directory(KernelModule/SocketKernel SRCLIST)
#aux_source_directory(KernelModule/WorldKernel SRCLIST)
#aux_source_directory(NetBase/MulitThreadNetBase SRCLIST)
#add end:多线程架构和消息队列
aux_source_directory(Main SRCLIST)
aux_source_directory(Main/BaseObj SRCLIST)
aux_source_directory(Main/Battle SRCLIST)
aux_source_directory(Main/Friend SRCLIST)
aux_source_directory(Main/Item SRCLIST)
aux_source_directory(Main/LimitAward SRCLIST)
aux_source_directory(Main/OnLineAward SRCLIST)
aux_source_directory(Main/SignUp SRCLIST)
aux_source_directory(Main/TaskDetail SRCLIST)
aux_source_directory(Main/TopList SRCLIST)
aux_source_directory(NetBase SRCLIST)
aux_source_directory(Protocol SRCLIST)
aux_source_directory(WorldData SRCLIST)
aux_source_directory(MsgHandler SRCLIST)
aux_source_directory(DataBase SRCLIST)
aux_source_directory(WebSocket SRCLIST)

# 指定生成目标
add_executable(gameserver ${SRCLIST})

# 添加链接库
target_link_libraries(gameserver pthread)
target_link_libraries(gameserver mysqlclient)
