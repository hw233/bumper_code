!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	./Common/GameDefine.h	179;"	d
ACCEPT_ONESTEP	./Main/ClientManager.cpp	36;"	d	file:
ACCEPT_ONESTEP	./Main/ServerManager.cpp	37;"	d	file:
ACC_ADDUSER_REQ	./Protocol/Command.h	/^    ACC_ADDUSER_REQ			=	0,$/;"	e	enum:Command
ACC_ADDUSER_RESP	./Protocol/Command.h	/^    ACC_ADDUSER_RESP		=	100,$/;"	e	enum:Command
ACC_CHECKTOKEN_REQ	./Protocol/Command.h	/^	ACC_CHECKTOKEN_REQ		=	6,$/;"	e	enum:Command
ACC_CHECKTOKEN_RESP	./Protocol/Command.h	/^	ACC_CHECKTOKEN_RESP		= 	106,$/;"	e	enum:Command
ACC_CHECKUNAME_REQ	./Protocol/Command.h	/^	ACC_CHECKUNAME_REQ		=	3,$/;"	e	enum:Command
ACC_CHECKUNAME_RESP	./Protocol/Command.h	/^	ACC_CHECKUNAME_RESP		= 	103,$/;"	e	enum:Command
ACC_CHECKUSER_REQ	./Protocol/Command.h	/^    ACC_CHECKUSER_REQ		=	1,$/;"	e	enum:Command
ACC_CHECKUSER_RESP	./Protocol/Command.h	/^    ACC_CHECKUSER_RESP		=	101,$/;"	e	enum:Command
ACC_CONNECT_OPEN	./Common/Config.h	/^	INT 	ACC_CONNECT_OPEN;$/;"	m	struct:ST_CONFIG
ACC_IP	./Common/Config.h	/^	CHAR	ACC_IP[IPSTR_SIZE];$/;"	m	struct:ST_CONFIG
ACC_KICKOFF_REQ	./Protocol/Command.h	/^	ACC_KICKOFF_REQ			=	5,$/;"	e	enum:Command
ACC_KICKOFF_RESP	./Protocol/Command.h	/^	ACC_KICKOFF_RESP		= 	105,$/;"	e	enum:Command
ACC_LOGIN_REQ	./Protocol/Command.h	/^	ACC_LOGIN_REQ			=	2,$/;"	e	enum:Command
ACC_LOGIN_RESP	./Protocol/Command.h	/^	ACC_LOGIN_RESP 			= 	102,$/;"	e	enum:Command
ACC_LOGOUT_REQ	./Protocol/Command.h	/^	ACC_LOGOUT_REQ			=	4,$/;"	e	enum:Command
ACC_LOGOUT_RESP	./Protocol/Command.h	/^	ACC_LOGOUT_RESP			= 	104,$/;"	e	enum:Command
ACC_LOG_OPEN	./Common/Config.h	/^	INT 	ACC_LOG_OPEN;$/;"	m	struct:ST_CONFIG
ACC_PORT	./Common/Config.h	/^	INT		ACC_PORT;$/;"	m	struct:ST_CONFIG
ACC_RCV_SIZE	./Common/Config.h	/^	INT 	ACC_RCV_SIZE;$/;"	m	struct:ST_CONFIG
ACC_SERVER	./Main/Player.h	/^	ACC_SERVER = 3,$/;"	e	enum:SendToServer
ACC_SERVER_NUM	./Main/Player.h	49;"	d
ACC_SND_SIZE	./Common/Config.h	/^	INT 	ACC_SND_SIZE;$/;"	m	struct:ST_CONFIG
ALLUSERS_NAME	./Common/BaseType.h	303;"	d
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	406;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	417;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	420;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	428;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	431;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	435;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	405;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	412;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	420;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	423;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	426;"	d	file:
ARCHITECTURE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	430;"	d	file:
AS2MTS_CLIENT_LOGIN	./Protocol/Command.h	/^    AS2MTS_CLIENT_LOGIN		=   802,  \/\/ AIserver发送的客户端登录,主要是broker用于路由.通过robotID和套接字建立关系,用于MTS主动发送消息给客户端$/;"	e	enum:Command
ASSERT	./Base/logger.h	/^    ASSERT,$/;"	e	enum:LOG_LEVEL
ASSERT	./Common/Common.h	124;"	d
ASSERT	./Common/Common.h	125;"	d
ASSERT	./Common/Common.h	137;"	d
ASSERT	./Common/Common.h	138;"	d
ASSERT_LOGFILE	./Base/Log.h	48;"	d
ASYNC_PACKET	./Main/Player.h	/^	ASYNC_PACKET( )$/;"	f	struct:ASYNC_PACKET
ASYNC_PACKET	./Main/Player.h	/^struct ASYNC_PACKET$/;"	s
AbilityID_t	./Common/Type.h	/^typedef ID_t			AbilityID_t;		\/\/ $/;"	t
Accept	./NetBase/MulitThreadNetBase/MTListenSocket.cpp	/^SOCKET CMTListenSocket::Accept()$/;"	f	class:CMTListenSocket
Accept	./NetBase/ServerSocket.cpp	/^INT ServerSocket::Accept(Socket* socket)$/;"	f	class:ServerSocket
AcceptNewConnection	./Main/ServerManager.cpp	/^BOOL ServerManager::AcceptNewConnection()$/;"	f	class:ServerManager
AddBcs	./Main/Battle.cpp	/^BOOL CBattle::AddBcs(Player* pPlayer)$/;"	f	class:CBattle
AddFactory	./Common/PacketFactoryManager.cpp	/^VOID PacketFactoryManager::AddFactory(PacketFactory* pFactory) $/;"	f	class:PacketFactoryManager
AddMember	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::AddMember(Player* pPlayer)$/;"	f	class:CBattleTeam
AddObj	./Common/SingleMap.h	/^bool	CSingleMap<T>::AddObj(T* pObj)$/;"	f	class:CSingleMap
AddPlayer	./Main/PlayerManager.cpp	/^BOOL PlayerManager::AddPlayer(Player* pPlayer)$/;"	f	class:PlayerManager
AddPlayer	./Main/ServerManager.cpp	/^BOOL ServerManager::AddPlayer(Player* pPlayer)$/;"	f	class:ServerManager
AddTeamToBct	./Main/Battle.cpp	/^BOOL CBattle::AddTeamToBct(Player* pPlayer, INT nTeamid)$/;"	f	class:CBattle
AppendMsg	./MsgHandler/MsgBattle.cpp	/^BOOL CMsgBattle::AppendMsg( UINT nAction\/*=0*\/, UINT nBattleType\/*=0*\/, UINT nTeamId\/*=0*\/, UINT nTargetId\/*=0*\/, INT nPower\/*=0*\/, $/;"	f	class:CMsgBattle
AutoLock_T	./Base/GameUtil.h	/^	AutoLock_T(MyLock& rLock)$/;"	f	class:AutoLock_T
AutoLock_T	./Base/GameUtil.h	/^class AutoLock_T$/;"	c
AutoPtr	./Common/AutoPtr.h	/^class AutoPtr$/;"	c
Award	./Main/BattleTeam.cpp	/^VOID CBattleTeam::Award()$/;"	f	class:CBattleTeam
AwardFightTeam	./Main/BattleTeam.cpp	/^VOID CBattleTeam::AwardFightTeam()$/;"	f	class:CBattleTeam
AwardThreeMulti	./Main/BattleTeam.cpp	/^VOID CBattleTeam::AwardThreeMulti()$/;"	f	class:CBattleTeam
BASE_CONTAINER_OFFSET	./Common/GameDefine.h	82;"	d
BATTLE_COLLIDE	./websocket/protocol.h	/^	BATTLE_COLLIDE 		= 5,		\/\/战斗中碰撞$/;"	e	enum:_MSG_BATTLE_TYPE
BATTLE_END	./websocket/protocol.h	/^	BATTLE_END			= 9,		\/\/战斗结束$/;"	e	enum:_MSG_BATTLE_TYPE
BATTLE_KILL	./websocket/protocol.h	/^	BATTLE_KILL 		= 6,		\/\/战斗中击杀$/;"	e	enum:_MSG_BATTLE_TYPE
BATTLE_RELIVE	./websocket/protocol.h	/^	BATTLE_RELIVE		= 8, 		\/\/战斗中复活$/;"	e	enum:_MSG_BATTLE_TYPE
BATTLE_SYN_SCORE	./websocket/protocol.h	/^	BATTLE_SYN_SCORE	= 7,		\/\/战斗中同步积分$/;"	e	enum:_MSG_BATTLE_TYPE
BILLING_LOGFILE	./Base/Log.h	42;"	d
BOOL	./Common/BaseType.h	/^typedef INT BOOL;$/;"	t
BUFFER_SIZE	./MsgHandler/NetMsg.h	21;"	d
BUFSIZE	./Common/Common.cpp	23;"	d	file:
BUY	./Protocol/Command.h	/^	BUY 	= 1,		\/\/购买道具$/;"	e	enum:_MSG_VAS
BUY	./websocket/protocol.h	/^	BUY 	= 1,		\/\/购买道具$/;"	e	enum:_MSG_VAS
BYTE	./Common/BaseType.h	/^typedef UCHAR BYTE;$/;"	t
BYTE	./Common/Type.h	/^	typedef UCHAR  BYTE;$/;"	t
BattleConfusionTeamTopInfo	./Main/BattleTeam.h	/^	BattleConfusionTeamTopInfo()$/;"	f	struct:BattleConfusionTeamTopInfo
BattleConfusionTeamTopInfo	./Main/BattleTeam.h	/^struct BattleConfusionTeamTopInfo$/;"	s
BeatHeart	./Main/PlayerManager.cpp	/^BOOL PlayerManager::BeatHeart(DWORD dwTime \/*=0*\/)$/;"	f	class:PlayerManager
Begin	./Common/SingleMap.h	/^	Iter	Begin() 										{ return m_map.begin(); }$/;"	f	class:CSingleMap
BeginTimer	./Base/GameUtil.h	/^	VOID BeginTimer(UINT uTerm, UINT uNow)$/;"	f	class:CMyTimer
Bind	./NetBase/ServerSocket.cpp	/^BOOL ServerSocket::Bind(INT port, UINT nAddr\/* = 0*\/)$/;"	f	class:ServerSocket
BroadCast	./Main/ServerManager.cpp	/^void ServerManager::BroadCast(CNetMsg* pMsg)$/;"	f	class:ServerManager
BroadCastLogin	./Main/ServerManager.cpp	/^void ServerManager::BroadCastLogin(CNetMsg* pMsg)$/;"	f	class:ServerManager
BroadCastServer	./Main/ServerManager.cpp	/^void ServerManager::BroadCastServer(CNetMsg* pMsg)$/;"	f	class:ServerManager
BroadcastConfusionStartMsgToMember	./Main/BattleTeam.cpp	/^VOID CBattleTeam::BroadcastConfusionStartMsgToMember()$/;"	f	class:CBattleTeam
BroadcastFightTeamEndMsgToMember	./Main/BattleTeam.cpp	/^VOID CBattleTeam::BroadcastFightTeamEndMsgToMember()$/;"	f	class:CBattleTeam
BroadcastFightTeamStartMsgToMember	./Main/BattleTeam.cpp	/^VOID CBattleTeam::BroadcastFightTeamStartMsgToMember(CBattleTeam* pEnemyTeam)$/;"	f	class:CBattleTeam
BroadcastTeamMsg	./Main/BattleTeam.cpp	/^VOID CBattleTeam::BroadcastTeamMsg(CNetMsg* pMsg, Player* pSender\/*=NULL*\/)$/;"	f	class:CBattleTeam
BroadcastTeamMsgToMember	./Main/BattleTeam.cpp	/^VOID CBattleTeam::BroadcastTeamMsgToMember(Player* pSender\/*=NULL*\/)$/;"	f	class:CBattleTeam
BroadcastTopListMsgToMember	./Main/BattleTeam.cpp	/^VOID CBattleTeam::BroadcastTopListMsgToMember()$/;"	f	class:CBattleTeam
C2GS_CREATE_ROBOT	./Protocol/Command.h	/^	C2GS_CREATE_ROBOT		=	203,$/;"	e	enum:Command
C2GS_KICK_OFF	./Protocol/Command.h	/^	C2GS_KICK_OFF 			=	202,$/;"	e	enum:Command
C2GS_LOGIN	./Protocol/Command.h	/^	C2GS_LOGIN				=	200,$/;"	e	enum:Command
C2GS_LOGOUT	./Protocol/Command.h	/^	C2GS_LOGOUT				=	201,$/;"	e	enum:Command
C2GS_ROBOT_ONLINE	./Protocol/Command.h	/^	C2GS_ROBOT_ONLINE		=	204,$/;"	e	enum:Command
C2MTS_AICHAT	./Protocol/Command.h	/^    C2MTS_AICHAT            =   801,  \/\/ 客户端发送的自然语言消息包$/;"	e	enum:Command
C2MTS_STATE	./Protocol/Command.h	/^    C2MTS_STATE             =   803,  \/\/ 客户端上传的机器人状态,在说,没在说等$/;"	e	enum:Command
C2Server_LOG	./Protocol/Command.h	/^	C2Server_LOG			= 	10002, \/\/add by huyf 2018.08.33:从客户端发送日志信息到服务器GameServer$/;"	e	enum:Command
CBattle	./Main/Battle.cpp	/^CBattle::CBattle()$/;"	f	class:CBattle
CBattle	./Main/Battle.h	/^class CBattle$/;"	c
CBattleConfusionSingle	./Main/BattleConfusionSingle.cpp	/^CBattleConfusionSingle::CBattleConfusionSingle(Player*  pPlayer)$/;"	f	class:CBattleConfusionSingle
CBattleConfusionSingle	./Main/BattleConfusionSingle.h	/^class CBattleConfusionSingle$/;"	c
CBattleManager	./Main/BattleManager.cpp	/^CBattleManager::CBattleManager()$/;"	f	class:CBattleManager
CBattleManager	./Main/BattleManager.h	/^class CBattleManager$/;"	c
CBattleTeam	./Main/BattleTeam.cpp	/^CBattleTeam::CBattleTeam()$/;"	f	class:CBattleTeam
CBattleTeam	./Main/BattleTeam.h	/^class CBattleTeam$/;"	c
CEvent	./Common/Event.cpp	/^CEvent::CEvent(bool bIsManualReset, bool bInitialSignaled):m_bIsManualReset(bIsManualReset),m_bEventStatus(bInitialSignaled),m_bMutexInitialized(false),m_bCondInitialized(false)$/;"	f	class:CEvent
CEvent	./Common/Event.h	/^class CEvent $/;"	c
CHAR	./Common/BaseType.h	/^typedef	char	CHAR;									\/\/标准有符号char$/;"	t
CHECK	./Base/logger.h	/^    CHECK,$/;"	e	enum:LOG_LEVEL
CHECK	./Common/Common.h	126;"	d
CHECK	./Common/Common.h	139;"	d
CHECKF	./Base/logger.h	/^    CHECKF,$/;"	e	enum:LOG_LEVEL
CHECKF	./Common/Common.h	127;"	d
CHECKF	./Common/Common.h	140;"	d
CIniFile	./Common/IniFile.cpp	/^CIniFile::CIniFile(const char * pFilename, const char * pSection)$/;"	f	class:CIniFile
CIniFile	./Common/IniFile.h	/^class CIniFile$/;"	c
CLEAR_MAP_DATA	./Common/Common.h	223;"	d
CLIENT_MAX_SIZE	./Common/BaseType.h	246;"	d
CLOSETHREAD_MILLISECS	./Common/BaseType.h	/^const int	CLOSETHREAD_MILLISECS	= 30000;		\/\/ 等待线程关闭的毫秒数$/;"	v
CMAKE_BINARY_DIR	./build/Makefile	/^CMAKE_BINARY_DIR = \/mnt\/hgfs\/vm_shared\/svn_bumper_local_workspace\/bumper\/bumper_code\/server\/trunk\/GameServer\/build$/;"	m
CMAKE_COMMAND	./build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	./build/Makefile	/^CMAKE_SOURCE_DIR = \/mnt\/hgfs\/vm_shared\/svn_bumper_local_workspace\/bumper\/bumper_code\/server\/trunk\/GameServer$/;"	m
CMTClientSocket	./NetBase/MulitThreadNetBase/MTClientSocket.cpp	/^CMTClientSocket::CMTClientSocket()$/;"	f	class:CMTClientSocket
CMTClientSocket	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^class CMTClientSocket : public IMTClientSocket$/;"	c
CMTListenSocket	./NetBase/MulitThreadNetBase/MTListenSocket.cpp	/^CMTListenSocket::CMTListenSocket()$/;"	f	class:CMTListenSocket
CMTListenSocket	./NetBase/MulitThreadNetBase/MTListenSocket.h	/^class CMTListenSocket : public IMTListenSocket$/;"	c
CMTServerSocket	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^CMTServerSocket::CMTServerSocket(SOCKET sock)$/;"	f	class:CMTServerSocket
CMTServerSocket	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^class CMTServerSocket :public IMTServerSocket$/;"	c
CMsgAction	./MsgHandler/MsgAction.cpp	/^CMsgAction::CMsgAction() $/;"	f	class:CMsgAction
CMsgAction	./MsgHandler/MsgAction.h	/^class CMsgAction : public CNetMsg$/;"	c
CMsgActionFactory	./MsgHandler/MsgAction.h	/^class CMsgActionFactory : public PacketFactory$/;"	c
CMsgBattle	./MsgHandler/MsgBattle.cpp	/^CMsgBattle::CMsgBattle() $/;"	f	class:CMsgBattle
CMsgBattle	./MsgHandler/MsgBattle.h	/^class CMsgBattle : public CNetMsg$/;"	c
CMsgBattleFactory	./MsgHandler/MsgBattle.h	/^class CMsgBattleFactory : public PacketFactory$/;"	c
CMsgExchang	./MsgHandler/MsgExchang.cpp	/^CMsgExchang::CMsgExchang() $/;"	f	class:CMsgExchang
CMsgExchang	./MsgHandler/MsgExchang.h	/^class CMsgExchang : public CNetMsg$/;"	c
CMsgExchangFactory	./MsgHandler/MsgExchang.h	/^class CMsgExchangFactory : public PacketFactory$/;"	c
CMsgItem	./MsgHandler/MsgItem.cpp	/^CMsgItem::CMsgItem() $/;"	f	class:CMsgItem
CMsgItem	./MsgHandler/MsgItem.h	/^class CMsgItem : public CNetMsg$/;"	c
CMsgItemFactory	./MsgHandler/MsgItem.h	/^class CMsgItemFactory : public PacketFactory$/;"	c
CMsgLogin	./MsgHandler/MsgLogin.cpp	/^CMsgLogin::CMsgLogin() $/;"	f	class:CMsgLogin
CMsgLogin	./MsgHandler/MsgLogin.h	/^class CMsgLogin : public CNetMsg$/;"	c
CMsgLoginFactory	./MsgHandler/MsgLogin.h	/^class CMsgLoginFactory : public PacketFactory$/;"	c
CMsgSynRoomInfo	./MsgHandler/MsgSynRoomInfo.cpp	/^CMsgSynRoomInfo::CMsgSynRoomInfo() $/;"	f	class:CMsgSynRoomInfo
CMsgSynRoomInfo	./MsgHandler/MsgSynRoomInfo.h	/^class CMsgSynRoomInfo : public CNetMsg$/;"	c
CMsgSynRoomInfoFactory	./MsgHandler/MsgSynRoomInfo.h	/^class CMsgSynRoomInfoFactory : public PacketFactory$/;"	c
CMsgUserInfo	./MsgHandler/MsgUserInfo.cpp	/^CMsgUserInfo::CMsgUserInfo() $/;"	f	class:CMsgUserInfo
CMsgUserInfo	./MsgHandler/MsgUserInfo.h	/^class CMsgUserInfo : public CNetMsg$/;"	c
CMsgUserInfoFactory	./MsgHandler/MsgUserInfo.h	/^class CMsgUserInfoFactory : public PacketFactory$/;"	c
CMsgVas	./MsgHandler/MsgVas.cpp	/^CMsgVas::CMsgVas() $/;"	f	class:CMsgVas
CMsgVas	./MsgHandler/MsgVas.h	/^class CMsgVas : public CNetMsg$/;"	c
CMsgVasFactory	./MsgHandler/MsgVas.h	/^class CMsgVasFactory : public PacketFactory$/;"	c
CMsgWalk	./MsgHandler/MsgWalk.cpp	/^CMsgWalk::CMsgWalk() $/;"	f	class:CMsgWalk
CMsgWalk	./MsgHandler/MsgWalk.h	/^class CMsgWalk : public CNetMsg$/;"	c
CMsgWalkFactory	./MsgHandler/MsgWalk.h	/^class CMsgWalkFactory : public PacketFactory$/;"	c
CMyAutoMutex	./Common/MyAutoMutex.cpp	/^CMyAutoMutex::CMyAutoMutex(pthread_mutex_t* pMutex\/*=NULL*\/, BOOL block\/*=TRUE*\/):m_pMutex(pMutex),lock_var(0),end_time(time(NULL))$/;"	f	class:CMyAutoMutex
CMyAutoMutex	./Common/MyAutoMutex.h	/^class CMyAutoMutex$/;"	c
CMyQueue	./Common/T_MyQueue.h	/^class CMyQueue$/;"	c
CMyTimer	./Base/GameUtil.h	/^	CMyTimer()$/;"	f	class:CMyTimer
CMyTimer	./Base/GameUtil.h	/^class CMyTimer  $/;"	c
CNetMsg	./MsgHandler/NetMsg.cpp	/^CNetMsg::CNetMsg()$/;"	f	class:CNetMsg
CNetMsg	./MsgHandler/NetMsg.h	/^class CNetMsg$/;"	c
CNetMsg	./NetBase/NetMsg.h	/^class CNetMsg$/;"	c
COLOR_A	./Common/GameDefine.h	189;"	d
COLOR_B	./Common/GameDefine.h	188;"	d
COLOR_G	./Common/GameDefine.h	187;"	d
COLOR_R	./Common/GameDefine.h	186;"	d
COMMON_HEART_BEAT	./Protocol/Command.h	/^	COMMON_HEART_BEAT		=	9999,$/;"	e	enum:Command
COMMON_SERVER_REG_REQ	./Protocol/Command.h	/^	COMMON_SERVER_REG_REQ	=	9997,$/;"	e	enum:Command
COMMON_SERVER_REG_RESP	./Protocol/Command.h	/^	COMMON_SERVER_REG_RESP	=	9998,$/;"	e	enum:Command
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	14;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	45;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	75;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	260;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	106;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	69;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	197;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	188;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	204;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_TWEAK	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
CONFIG_LOGFILE	./Base/Log.h	47;"	d
CPacketPack	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^typedef CHAR* CPacketPack;$/;"	t
CREATE_ITEM	./Protocol/Command.h	/^	CREATE_ITEM 	= 1,			\/\/创建道具$/;"	e	enum:_MSG_ITEM_TYPE
CREATE_ITEM	./websocket/protocol.h	/^	CREATE_ITEM 	= 1,			\/\/创建道具$/;"	e	enum:_MSG_ITEM_TYPE
CREATE_ROOM	./websocket/protocol.h	/^	CREATE_ROOM 		= 1,		\/\/创建房间$/;"	e	enum:_MSG_BATTLE_TYPE
CRITICAL	./Base/logger.h	/^    CRITICAL,$/;"	e	enum:LOG_LEVEL
CRITSECT	./Common/Common.h	257;"	d
CSingleMap	./Common/SingleMap.h	/^	CSingleMap(bool bOwner) { m_bOwner = bOwner; }$/;"	f	class:CSingleMap
CSingleMap	./Common/SingleMap.h	/^class CSingleMap : public ISingleMap<T>$/;"	c
CTimeOut	./Common/TimeOut.h	/^typedef	 CTimeOut_<0>	CTimeOut;$/;"	t
CTimeOutMS	./Common/TimeOut.h	/^typedef	CTimeOutMS_<0>	CTimeOutMS;$/;"	t
CTimeOutMS_	./Common/TimeOut.h	/^	CTimeOutMS_(int nIntervalSecs = I) { m_nInterval = nIntervalSecs; m_tUpdateTime = 0; }		\/\/ =0 : 用于数组初始化$/;"	f	class:CTimeOutMS_
CTimeOutMS_	./Common/TimeOut.h	/^class CTimeOutMS_$/;"	c
CTimeOut_	./Common/TimeOut.h	/^	CTimeOut_(int nIntervalSecs = I) { m_nInterval = nIntervalSecs; m_tUpdateTime = 0; }		\/\/ =0 : 用于数组初始化$/;"	f	class:CTimeOut_
CTimeOut_	./Common/TimeOut.h	/^class CTimeOut_$/;"	c
CUserData	./Main/UserData.cpp	/^CUserData::CUserData()$/;"	f	class:CUserData
CUserData	./Main/UserData.h	/^class CUserData$/;"	c
C_MT_CLIENTSOCKET_H	./NetBase/MulitThreadNetBase/MTClientSocket.h	14;"	d
C_MT_LISTEN_SOCKET_H	./NetBase/MulitThreadNetBase/MTListenSocket.h	13;"	d
C_MT_SERVER_SOCKET_H	./NetBase/MulitThreadNetBase/MTServerSocket.h	13;"	d
Capacity	./NetBase/SocketInputStream.h	/^	UINT		Capacity() const      				{	return	m_BufferLen;		}$/;"	f	class:SocketInputStream
Capacity	./NetBase/SocketOutputStream.h	/^	UINT		Capacity() const      				{	return	m_BufferLen;		}$/;"	f	class:SocketOutputStream
CheckPacket	./MsgHandler/NetMsg.h	/^	virtual BOOL		CheckPacket()								{ 	return TRUE; 		}$/;"	f	class:CNetMsg
CheckPacket	./NetBase/NetMsg.h	/^	virtual BOOL		CheckPacket()								{ 	return TRUE; 		}$/;"	f	class:CNetMsg
CheckTime	./Main/Player.cpp	/^UInt32 Player::CheckTime()$/;"	f	class:Player
CheckTimeEx	./Main/Player.cpp	/^UInt32 Player::CheckTimeEx()$/;"	f	class:Player
CircularShift	./websocket/sha1.cpp	/^unsigned SHA1::CircularShift(int bits, unsigned word)$/;"	f	class:SHA1
CleanConnectToACC	./Main/ClientManager.cpp	/^void ClientManager::CleanConnectToACC()$/;"	f	class:ClientManager
CleanConnectToMTS	./Main/ClientManager.cpp	/^void ClientManager::CleanConnectToMTS()$/;"	f	class:ClientManager
CleanConnectToPW	./Main/ClientManager.cpp	/^void ClientManager::CleanConnectToPW()$/;"	f	class:ClientManager
CleanUp	./Base/GameUtil.h	/^	VOID CleanUp( )$/;"	f	class:CMyTimer
CleanUp	./Main/ClientPlayer.cpp	/^VOID ClientPlayer::CleanUp()$/;"	f	class:ClientPlayer
CleanUp	./Main/Player.cpp	/^VOID Player::CleanUp()$/;"	f	class:Player
CleanUp	./Main/PlayerManager.cpp	/^VOID PlayerManager::CleanUp()$/;"	f	class:PlayerManager
CleanUp	./Main/Robot.cpp	/^bool Robot::CleanUp()$/;"	f	class:Robot
CleanUp	./Main/ServerPlayer.cpp	/^VOID ServerPlayer::CleanUp()$/;"	f	class:ServerPlayer
CleanUp	./MsgHandler/NetMsg.h	/^	virtual VOID		CleanUp(){};$/;"	f	class:CNetMsg
CleanUp	./NetBase/NetMsg.h	/^	virtual VOID		CleanUp(){};$/;"	f	class:CNetMsg
CleanUp	./NetBase/SocketInputStream.cpp	/^VOID SocketInputStream::CleanUp()$/;"	f	class:SocketInputStream
CleanUp	./NetBase/SocketOutputStream.cpp	/^VOID SocketOutputStream::CleanUp()$/;"	f	class:SocketOutputStream
Clear	./Common/SingleMap.h	/^void CSingleMap<T>::Clear()$/;"	f	class:CSingleMap
Clear	./Common/TimeOut.h	/^	void	Clear		()						{ m_nInterval = m_tUpdateTime = 0; }$/;"	f	class:CTimeOutMS_
Clear	./Common/TimeOut.h	/^	void	Clear		()						{ m_nInterval = m_tUpdateTime = 0; }$/;"	f	class:CTimeOut_
ClearBcs	./Main/Player.h	/^	VOID  					ClearBcs() 	{ m_pBcs = NULL; }$/;"	f	class:Player
ClearBct	./Main/Player.h	/^	VOID 					ClearBct()	 { 	m_pBct = NULL; }$/;"	f	class:Player
ClearBrbt	./Main/Player.h	/^	VOID 					ClearBrbt()	 { 	m_pBrbt = NULL; }$/;"	f	class:Player
ClearMember	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::ClearMember()$/;"	f	class:CBattleTeam
ClearPacket	./NetBase/MulitThreadNetBase/MTClientSocket.cpp	/^bool CClientSocket::ClearPacket	(int nLen)$/;"	f	class:CClientSocket
ClearPacket	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^BOOL CMTServerSocket::ClearPacket(INT nLen)$/;"	f	class:CMTServerSocket
ClientID_t	./Common/Type.h	/^typedef ID_t			ClientID_t;			\/\/			$/;"	t
ClientManager	./Main/ClientManager.cpp	/^ClientManager::ClientManager()$/;"	f	class:ClientManager
ClientManager	./Main/ClientManager.h	/^class ClientManager : public PlayerManager$/;"	c
ClientPlayer	./Main/ClientPlayer.cpp	/^ClientPlayer::ClientPlayer()$/;"	f	class:ClientPlayer
ClientPlayer	./Main/ClientPlayer.h	/^class ClientPlayer : public Player$/;"	c
ClientPool	./Main/ClientPool.cpp	/^ClientPool::ClientPool()$/;"	f	class:ClientPool
ClientPool	./Main/ClientPool.h	/^class ClientPool$/;"	c
ClientSocket	./NetBase/ClientSocket.cpp	/^ClientSocket::ClientSocket()$/;"	f	class:ClientSocket
ClientSocket	./NetBase/ClientSocket.h	/^class ClientSocket$/;"	c
Close	./NetBase/ClientSocket.cpp	/^VOID ClientSocket::Close()$/;"	f	class:ClientSocket
Close	./NetBase/MulitThreadNetBase/MTClientSocket.cpp	/^void CClientSocket::Close()$/;"	f	class:CClientSocket
Close	./NetBase/MulitThreadNetBase/MTListenSocket.cpp	/^INT CMTListenSocket::Close()$/;"	f	class:CMTListenSocket
Close	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^void CMTServerSocket::Close(BOOL bNoLinger \/*= FALSE*\/)$/;"	f	class:CMTServerSocket
Close	./NetBase/ServerSocket.cpp	/^VOID ServerSocket::Close()$/;"	f	class:ServerSocket
CloseHandle	./Common/Event.cpp	/^bool CloseHandle(CEvent* pEvent)$/;"	f
Command	./Protocol/Command.h	/^enum Command$/;"	g
Computed	./websocket/sha1.h	/^        bool Computed;                      \/\/ Is the digest computed?$/;"	m	class:SHA1
Connect	./Main/ClientManager.cpp	/^BOOL ClientManager::Connect()$/;"	f	class:ClientManager
Connect	./NetBase/ClientSocket.cpp	/^BOOL ClientSocket::Connect(const CHAR* host, UINT port)$/;"	f	class:ClientSocket
ConvertTU	./Base/TimeManager.cpp	/^VOID TimeManager::ConvertTU( tm* TM, UINT& Date )$/;"	f	class:TimeManager
ConvertUT	./Base/TimeManager.cpp	/^VOID TimeManager::ConvertUT( UINT Date, tm* TM )$/;"	f	class:TimeManager
CopyDataToBuffer	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^BOOL CMTServerSocket::CopyDataToBuffer(const CHAR* pSource, INT nLen)$/;"	f	class:CMTServerSocket
Corrupted	./websocket/sha1.h	/^        bool Corrupted;                     \/\/ Is the message digest corruped?$/;"	m	class:SHA1
CountingTimer	./Base/GameUtil.h	/^	BOOL CountingTimer(UINT uNow)$/;"	f	class:CMyTimer
Create	./NetBase/ServerSocket.cpp	/^BOOL ServerSocket::Create()$/;"	f	class:ServerSocket
CreateEvent	./Common/Event.cpp	/^CEvent* CreateEvent(bool bManualReset, bool bInitialState, bool& bRet)$/;"	f
CreateEvent	./Common/Event.cpp	/^bool CEvent::CreateEvent()$/;"	f	class:CEvent
CreateFightItem	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::CreateFightItem(ItemInfo& iteminfo)$/;"	f	class:CBattleTeam
CreateFightItemPos	./Main/BattleTeam.cpp	/^VOID CBattleTeam::CreateFightItemPos()$/;"	f	class:CBattleTeam
CreateMsg	./MsgHandler/MsgAction.cpp	/^BOOL CMsgAction::CreateMsg(UINT nAction, UINT nTargetId\/*=0*\/, UINT nType\/*=0*\/, UINT nData1\/*=0*\/, UINT nData2\/*=0*\/, UINT nParam1\/*=0*\/, UINT nParam2\/*=0*\/)$/;"	f	class:CMsgAction
CreateMsg	./MsgHandler/MsgAction.cpp	/^BOOL CMsgAction::CreateMsg(UINT nRetStatus, UINT nAction)$/;"	f	class:CMsgAction
CreateMsg	./MsgHandler/MsgBattle.cpp	/^BOOL CMsgBattle::CreateMsg( UINT nAction\/*=0*\/, UINT nBattleModel\/*=0*\/, UINT nTeamId\/*=0*\/, UINT nTargetId\/*=0*\/, INT nPower\/*=0*\/, $/;"	f	class:CMsgBattle
CreateMsg	./MsgHandler/MsgBattle.cpp	/^BOOL CMsgBattle::CreateMsg(UINT nRetStatus, UINT nAction)$/;"	f	class:CMsgBattle
CreateMsg	./MsgHandler/MsgExchang.cpp	/^BOOL CMsgExchang::CreateMsg(UINT nRetStatus, UINT nAction)$/;"	f	class:CMsgExchang
CreateMsg	./MsgHandler/MsgItem.cpp	/^BOOL CMsgItem::CreateMsg(UINT nAction, UINT nItemId\/*=0*\/, UINT nItemType\/*=0*\/, UINT nSorce\/*=0*\/, UINT nPointX\/*=0*\/, UINT nPointY\/*=0*\/)$/;"	f	class:CMsgItem
CreateMsg	./MsgHandler/MsgItem.cpp	/^BOOL CMsgItem::CreateMsg(UINT nRetStatus, UINT nAction)$/;"	f	class:CMsgItem
CreateMsg	./MsgHandler/MsgLogin.cpp	/^BOOL CMsgLogin::CreateMsg(UINT nRetStatus, UINT nAction)$/;"	f	class:CMsgLogin
CreateMsg	./MsgHandler/MsgSynRoomInfo.cpp	/^BOOL CMsgSynRoomInfo::CreateMsg(Player* player, UINT nAction, INT nTeamId, INT nTeamColour)$/;"	f	class:CMsgSynRoomInfo
CreateMsg	./MsgHandler/MsgSynRoomInfo.cpp	/^BOOL CMsgSynRoomInfo::CreateMsg(UINT nRetStatus, UINT nAction)$/;"	f	class:CMsgSynRoomInfo
CreateMsg	./MsgHandler/MsgUserInfo.cpp	/^BOOL CMsgUserInfo::CreateMsg(Player* player)$/;"	f	class:CMsgUserInfo
CreateMsg	./MsgHandler/MsgUserInfo.cpp	/^BOOL CMsgUserInfo::CreateMsg(UINT nRet)$/;"	f	class:CMsgUserInfo
CreateMsg	./MsgHandler/MsgVas.cpp	/^BOOL CMsgVas::CreateMsg(INT nAction\/*=0*\/, INT nModelType, INT nItemId, INT nItemType, INT nItemCount)$/;"	f	class:CMsgVas
CreateMsg	./MsgHandler/MsgVas.cpp	/^BOOL CMsgVas::CreateMsg(UINT nRetStatus, UINT nAction)$/;"	f	class:CMsgVas
CreateMsg	./MsgHandler/MsgWalk.cpp	/^BOOL CMsgWalk::CreateMsg(INT nTargetId\/*=0*\/, INT nPointX\/*=0*\/, INT nPointY\/*=0*\/, INT nPointStartX\/*=0*\/, INT nPointStartY\/*=0*\/,INT nPointEndX\/*=0*\/, INT nPointEndY\/*=0*\/)$/;"	f	class:CMsgWalk
CreateMsg	./MsgHandler/MsgWalk.cpp	/^BOOL CMsgWalk::CreateMsg(UINT nRetStatus, UINT nAction)$/;"	f	class:CMsgWalk
CreateMsg	./MsgHandler/NetMsg.cpp	/^BOOL CNetMsg::CreateMsg (UINT nRetStatus, UINT nAction)$/;"	f	class:CNetMsg
CreateNew	./Common/SingleMap.h	/^	static CSingleMap<T>*	CreateNew(bool bOwner) { return new CSingleMap<T>(bOwner); }$/;"	f	class:CSingleMap
CreateNew	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^CMTServerSocket* CMTServerSocket::CreateNew(SOCKET sock)$/;"	f	class:CMTServerSocket
CreateNewRobot	./Main/Player.cpp	/^BOOL Player::CreateNewRobot(const char* robotID, UInt32 accID, UInt32 protoTypeID\/*=0*\/)$/;"	f	class:Player
CreatePacket	./Common/PacketFactoryManager.cpp	/^CNetMsg* PacketFactoryManager::CreatePacket(PacketID_t packetID) $/;"	f	class:PacketFactoryManager
CreatePacket	./MsgHandler/MsgAction.h	/^	CNetMsg* 	CreatePacket() { return new CMsgAction; };$/;"	f	class:CMsgActionFactory
CreatePacket	./MsgHandler/MsgBattle.h	/^	CNetMsg* 	CreatePacket() { return new CMsgBattle; };$/;"	f	class:CMsgBattleFactory
CreatePacket	./MsgHandler/MsgExchang.h	/^	CNetMsg* 	CreatePacket() { return new CMsgExchang; };$/;"	f	class:CMsgExchangFactory
CreatePacket	./MsgHandler/MsgItem.h	/^	CNetMsg* 	CreatePacket() { return new CMsgItem; };$/;"	f	class:CMsgItemFactory
CreatePacket	./MsgHandler/MsgLogin.h	/^	CNetMsg* 	CreatePacket() { return new CMsgLogin; };$/;"	f	class:CMsgLoginFactory
CreatePacket	./MsgHandler/MsgSynRoomInfo.h	/^	CNetMsg* 	CreatePacket() { return new CMsgSynRoomInfo; };$/;"	f	class:CMsgSynRoomInfoFactory
CreatePacket	./MsgHandler/MsgUserInfo.h	/^	CNetMsg* 	CreatePacket() { return new CMsgUserInfo; };$/;"	f	class:CMsgUserInfoFactory
CreatePacket	./MsgHandler/MsgVas.h	/^	CNetMsg* 	CreatePacket() { return new CMsgVas; };$/;"	f	class:CMsgVasFactory
CreatePacket	./MsgHandler/MsgWalk.h	/^	CNetMsg* 	CreatePacket() { return new CMsgWalk; };$/;"	f	class:CMsgWalkFactory
CreateTeam	./Main/Battle.cpp	/^UINT CBattle::CreateTeam(Player* pPlayer, INT nModelType)$/;"	f	class:CBattle
CurrentDate	./Base/TimeManager.cpp	/^UINT TimeManager::CurrentDate()$/;"	f	class:TimeManager
CurrentSavedTime	./Base/TimeManager.h	/^	UINT			CurrentSavedTime(){ return m_CurrentTime; };$/;"	f	class:TimeManager
CurrentTime	./Base/TimeManager.cpp	/^UINT TimeManager::CurrentTime()$/;"	f	class:TimeManager
CutOverflow	./Common/Common.h	/^inline T	CutOverflow(T x, T y) { return (x <= y) ? x : y; }$/;"	f
CutRange	./Common/Common.h	/^inline T	CutRange(T n, T min, T max) { return (n<min) ? min : ((n>max) ? max : n); }$/;"	f
CutTrail	./Common/Common.h	/^inline T	CutTrail(T x, T y) { return (x >= y) ? x : y; }$/;"	f
DATABASE_STR_LEN	./Common/GameDefine.h	150;"	d
DBHandle	./Common/Type.h	/^typedef		VOID*	DBHandle;$/;"	t
DBMySql	./DataBase/DBMySql.cpp	/^DBMySql::DBMySql()$/;"	f	class:DBMySql
DBMySql	./DataBase/DBMySql.cpp	/^DBMySql::DBMySql(const std::string& host, const std::string& user, const std::string& passwd, const std::string& db, short port)$/;"	f	class:DBMySql
DBMySql	./DataBase/DBMySql.h	/^class DBMySql$/;"	c
DB_2_SM_TIME	./Common/GameDefine.h	160;"	d
DB_BAG_POS_END	./Common/GameDefine.h	85;"	d
DB_BAG_POS_START	./Common/GameDefine.h	84;"	d
DB_BANK_POS_END	./Common/GameDefine.h	91;"	d
DB_BANK_POS_START	./Common/GameDefine.h	90;"	d
DB_CHAR_NUMBER	./Common/GameDefine.h	158;"	d
DB_CONNECTION_COUNT	./Common/GameDefine.h	163;"	d
DB_EQUIP_POS_END	./Common/GameDefine.h	88;"	d
DB_EQUIP_POS_START	./Common/GameDefine.h	87;"	d
DB_OPERATION_TIME	./Common/GameDefine.h	156;"	d
DB_PASSWORD_STR_LEN	./Common/GameDefine.h	154;"	d
DB_USE_STR_LEN	./Common/GameDefine.h	152;"	d
DEBUG	./Base/logger.h	/^    DEBUG=1, \/\/1$/;"	e	enum:LOG_LEVEL
DEBUG_CATCH	./Common/Common.h	153;"	d
DEBUG_CATCH0	./Common/Common.h	159;"	d
DEBUG_CATCH2	./Common/Common.h	154;"	d
DEBUG_CATCH3	./Common/Common.h	155;"	d
DEBUG_CATCH4	./Common/Common.h	156;"	d
DEBUG_CATCHF	./Common/Common.h	158;"	d
DEBUG_CATCHF2	./Common/Common.h	160;"	d
DEBUG_CATCHF3	./Common/Common.h	161;"	d
DEBUG_CATCHF4	./Common/Common.h	162;"	d
DEBUG_TRY	./Common/Common.h	152;"	d
DEC	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	439;"	d	file:
DEC	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
DEFAULT_LOG_CACHE_SIZE	./Base/Log.h	52;"	d
DEFAULT_OBJ_COUNT	./Common/GameDefine.h	55;"	d
DISABLE	./Base/logger.h	/^    DISABLE = 100$/;"	e	enum:LOG_LEVEL
DISALLOW_EVIL_CONSTRUCTORS	./Common/Type.h	151;"	d
DISALLOW_EVIL_CONSTRUCTORS	./Common/Type.h	152;"	d
DWORD	./Common/Type.h	/^	typedef	ULONG  DWORD;$/;"	t
DateStamp	./Common/Common.cpp	/^int DateStamp(time_t tTime\/*=0*\/)$/;"	f
DateStampPass	./Common/Common.cpp	/^int DateStampPass(int nDate, int nDays)$/;"	f
DateTime	./Common/Common.cpp	/^void	DateTime(char * buf20, time_t tInput \/*= 0*\/)	\/\/ 填入buf20中$/;"	f
DateTimeSign	./Common/Common.cpp	/^int	DateTimeSign(time_t tInput \/*= 0*\/)	$/;"	f
DateTimeStamp	./Common/Common.cpp	/^void DateTimeStamp(char * buf15, time_t tInput \/*= 0*\/)	\/\/ 填入buf15中$/;"	f
DateTimeUpMonthSign	./Common/Common.cpp	/^int	DateTimeUpMonthSign(time_t tInput \/*= 0*\/)	$/;"	f
DecInterval	./Common/TimeOut.h	/^	void	DecInterval	(int nMilliSecs)		{ m_nInterval = ::CutTrail(m_nInterval-nMilliSecs, 0); }$/;"	f	class:CTimeOutMS_
DecInterval	./Common/TimeOut.h	/^	void	DecInterval	(int nSecs)				{ m_nInterval = ::CutTrail(m_nInterval-nSecs, 0); }$/;"	f	class:CTimeOut_
DelBcs	./Main/Battle.cpp	/^BOOL CBattle::DelBcs(Player* pPlayer)$/;"	f	class:CBattle
DelClient	./Main/ClientPool.cpp	/^VOID ClientPool::DelClient(ClientID_t ClientID)$/;"	f	class:ClientPool
DelMember	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::DelMember(Player* pPlayer)$/;"	f	class:CBattleTeam
DelObj	./Common/SingleMap.h	/^bool	CSingleMap<T>::DelObj(Iterator& iter)$/;"	f	class:CSingleMap
DelObj	./Common/SingleMap.h	/^bool	CSingleMap<T>::DelObj(OBJID key)$/;"	f	class:CSingleMap
DelPlayer	./Main/PlayerPool.cpp	/^VOID PlayerPool::DelPlayer(PlayerID_t PlayerID)$/;"	f	class:PlayerPool
DelPlayer	./Main/ServerManager.cpp	/^BOOL ServerManager::DelPlayer(Player* pPlayer)$/;"	f	class:ServerManager
DelPlayerEx	./Main/PlayerPool.cpp	/^void PlayerPool::DelPlayerEx(UInt32 accountID)$/;"	f	class:PlayerPool
DelStaticManager	./Main/World.cpp	/^BOOL World::DelStaticManager()$/;"	f	class:World
DelTeamFromBct	./Main/Battle.cpp	/^BOOL CBattle::DelTeamFromBct(CBattleTeam* _bct)$/;"	f	class:CBattle
DelTeamFromBct	./Main/Battle.cpp	/^BOOL CBattle::DelTeamFromBct(INT _Teamid)$/;"	f	class:CBattle
DeletePair	./Common/Common.h	/^struct DeletePair$/;"	s
DeletePtrs	./Common/Common.h	/^struct DeletePtrs$/;"	s
Destroy	./Main/BattleTeam.cpp	/^VOID CBattleTeam::Destroy()$/;"	f	class:CBattleTeam
Destroy	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^void CMTServerSocket::Destroy(CMTServerSocket* pMTServerSocket)$/;"	f	class:CMTServerSocket
DiffTime	./Base/TimeManager.cpp	/^UINT TimeManager::DiffTime( UINT Date1, UINT Date2 )$/;"	f	class:TimeManager
Disconnect	./Main/ClientPlayer.cpp	/^VOID ClientPlayer::Disconnect()$/;"	f	class:ClientPlayer
Disconnect	./Main/Player.cpp	/^VOID Player::Disconnect()$/;"	f	class:Player
Disconnect	./Main/ServerPlayer.cpp	/^VOID ServerPlayer::Disconnect()$/;"	f	class:ServerPlayer
EM_ITEM_SORCE_1	./Main/BattleTeam.h	/^	EM_ITEM_SORCE_1 = 1000,$/;"	e	enum:__anon1
EM_ITEM_SORCE_2	./Main/BattleTeam.h	/^	EM_ITEM_SORCE_2 = 2000,$/;"	e	enum:__anon1
EM_ITEM_SORCE_3	./Main/BattleTeam.h	/^	EM_ITEM_SORCE_3 = 3000,$/;"	e	enum:__anon1
EPOLL_SETSIZE	./Common/BaseType.h	221;"	d
EPoll	./Main/ServerManager.cpp	/^INT ServerManager::EPoll()$/;"	f	class:ServerManager
EQUALS	./build/Makefile	/^EQUALS = =$/;"	m
ERROR	./Base/logger.h	/^    ERROR,   \/\/4$/;"	e	enum:LOG_LEVEL
ERROR_SIZE	./Common/BaseType.h	265;"	d
ERR_EXIT	./Main/World.h	24;"	d
EVENT_H	./Common/Event.h	12;"	d
EXCHANGE_ITEM	./Protocol/Command.h	/^	EXCHANGE_ITEM 	= 1,		\/\/兑换道具$/;"	e	enum:_MSG_EXCHANGE
EXCHANGE_ITEM	./websocket/protocol.h	/^	EXCHANGE_ITEM 	= 1,		\/\/兑换道具$/;"	e	enum:_MSG_EXCHANGE
EXE_COUNT_PER_TICK	./Main/Player.cpp	336;"	d	file:
EXIT	./Common/Thread.h	/^		EXIT		\/\/ 已经退出 $/;"	e	enum:Thread::ThreadStatus
EXITING	./Common/Thread.h	/^		EXITING,	\/\/ 线程正在退出$/;"	e	enum:Thread::ThreadStatus
End	./Common/SingleMap.h	/^	Iter	End()											{ return m_map.end(); }$/;"	f	class:CSingleMap
EnsureInitialized	./Common/Event.cpp	/^bool CEvent::EnsureInitialized()$/;"	f	class:CEvent
EpollCreate	./NetBase/ServerSocket.cpp	/^BOOL ServerSocket::EpollCreate(INT maxEvents)$/;"	f	class:ServerSocket
EpollCtl	./NetBase/ServerSocket.cpp	/^BOOL ServerSocket::EpollCtl(int epfd, int op, int fd, struct epoll_event *event)$/;"	f	class:ServerSocket
Error	./NetBase/SocketAPI.cpp	/^CHAR Error[ERROR_SIZE];$/;"	v
Exit	./Main/World.cpp	/^BOOL World::Exit()$/;"	f	class:World
FAIL	./MsgHandler/MsgLogin.h	/^	FAIL = 0,				\/\/成功$/;"	e	enum:LOGIN_RESULT
FALSE	./Common/BaseType.h	374;"	d
FATAL	./Base/logger.h	/^    FATAL,$/;"	e	enum:LOG_LEVEL
FD_SETSIZE	./Common/BaseType.h	207;"	d
FIGHT_CONTINUE_TIME_	./Main/BattleTeam.h	24;"	d
FLOAT	./Common/BaseType.h	/^typedef	float	FLOAT;									\/\/标准无符号float$/;"	t
FactoryMap	./Common/PacketFactoryManager.h	/^typedef std::map<PacketID_t, PacketFactory*> FactoryMap; $/;"	t
FastSaveLog	./Base/Log.cpp	/^VOID Log::FastSaveLog( INT logid, CHAR* msg, ... )$/;"	f	class:Log
FightQuickMatch	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::FightQuickMatch()$/;"	f	class:CBattleTeam
FightStart	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::FightStart()$/;"	f	class:CBattleTeam
FileAPI	./NetBase/FileAPI.h	/^namespace FileAPI$/;"	n
Fill	./NetBase/SocketInputStream.cpp	/^INT SocketInputStream::Fill()$/;"	f	class:SocketInputStream
Find	./NetBase/SocketInputStream.cpp	/^BOOL SocketInputStream::Find(CHAR* buf)$/;"	f	class:SocketInputStream
Flush	./Base/logger.h	/^        void Flush(){$/;"	f	class:Logger
Flush	./NetBase/MulitThreadNetBase/MTClientSocket.cpp	/^bool CClientSocket::Flush()				\/\/ return false : no empty$/;"	f	class:CClientSocket
Flush	./NetBase/SocketOutputStream.cpp	/^INT SocketOutputStream::Flush()$/;"	f	class:SocketOutputStream
FlushFightResult	./Main/BattleTeam.cpp	/^VOID CBattleTeam::FlushFightResult()$/;"	f	class:CBattleTeam
FlushLog	./Base/Log.cpp	/^VOID Log::FlushLog( INT logid )$/;"	f	class:Log
FlushLog_All	./Base/Log.cpp	/^VOID Log::FlushLog_All( )$/;"	f	class:Log
FormatDateTime	./Common/Common.cpp	/^bool FormatDateTime(char* buf, const char* szFormat, time_t tInput \/*= 0*\/)$/;"	f
FormatTodayTime	./Base/TimeManager.cpp	/^BOOL TimeManager::FormatTodayTime(WORD& nTime)$/;"	f	class:TimeManager
GAME_TITLE	./Common/BaseType.h	312;"	d
GETHIGH	./Common/GameDefine.h	191;"	d
GETLOW	./Common/GameDefine.h	192;"	d
GETUSER	./Common/GameDefine.h	172;"	d
GETWORLD	./Common/GameDefine.h	170;"	d
GET_PACKET_INDEX	./MsgHandler/NetMsg.h	50;"	d
GET_PACKET_INDEX	./NetBase/NetMsg.h	24;"	d
GET_PACKET_LEN	./MsgHandler/NetMsg.h	52;"	d
GET_PACKET_LEN	./NetBase/NetMsg.h	26;"	d
GS2C_CREATE_ROBOT	./Protocol/Command.h	/^	GS2C_CREATE_ROBOT		=	303,$/;"	e	enum:Command
GS2C_KICK_OFF	./Protocol/Command.h	/^	GS2C_KICK_OFF 			=	302,$/;"	e	enum:Command
GS2C_LOGIN	./Protocol/Command.h	/^	GS2C_LOGIN				=	300,$/;"	e	enum:Command
GS2C_LOGOUT	./Protocol/Command.h	/^	GS2C_LOGOUT				=	301,$/;"	e	enum:Command
GS2C_ROBOT_ONLINE	./Protocol/Command.h	/^	GS2C_ROBOT_ONLINE		=	304,$/;"	e	enum:Command
GS2MTS_CREATE_ROBOT	./Protocol/Command.h	/^	GS2MTS_CREATE_ROBOT		=	603, \/\/ 创建机器人$/;"	e	enum:Command
GS2MTS_GET_ROBOT_LIST	./Protocol/Command.h	/^	GS2MTS_GET_ROBOT_LIST	=	602, \/\/ 机器人查询$/;"	e	enum:Command
GS2MTS_ROBOT_OFFLINE	./Protocol/Command.h	/^	GS2MTS_ROBOT_OFFLINE	=	601,$/;"	e	enum:Command
GS2MTS_ROBOT_ONLINE	./Protocol/Command.h	/^	GS2MTS_ROBOT_ONLINE		=	600,$/;"	e	enum:Command
GS2PW_ALL_WORLD_DATA	./Protocol/Command.h	/^	GS2PW_ALL_WORLD_DATA	=	403,$/;"	e	enum:Command
GS2PW_CREATE_ROBOT	./Protocol/Command.h	/^	GS2PW_CREATE_ROBOT		=	402,$/;"	e	enum:Command
GS2PW_GET_PW_DATA	./Protocol/Command.h	/^	GS2PW_GET_PW_DATA		=	404,$/;"	e	enum:Command
GS2PW_ROBOT_OFFLINE	./Protocol/Command.h	/^	GS2PW_ROBOT_OFFLINE 	=	401,$/;"	e	enum:Command
GS2PW_ROBOT_ONLINE	./Protocol/Command.h	/^	GS2PW_ROBOT_ONLINE 		= 	400,$/;"	e	enum:Command
GUID_t	./Common/Type.h	/^typedef UINT			GUID_t;	$/;"	t
GetANSITime	./Base/TimeManager.cpp	/^time_t TimeManager::GetANSITime()$/;"	f	class:TimeManager
GetAccountID	./Main/Player.h	/^	UInt32				GetAccountID()				{  	return m_AccountID; 	}$/;"	f	class:Player
GetAddGold	./Main/Player.h	/^    UInt32           GetAddGold()                              {    return QueryData()->GetAddGold();         }$/;"	f	class:Player
GetAddGold	./Main/UserData.h	/^    UInt32           GetAddGold()                              {    return m_Info.m_nAddGold;         }$/;"	f	class:CUserData
GetAddScore	./Main/Player.h	/^    UInt32           GetAddScore()                              {    return QueryData()->GetAddScore();         }$/;"	f	class:Player
GetAddScore	./Main/UserData.h	/^    UInt32           GetAddScore()                              {    return m_Info.m_nAddScore;         }$/;"	f	class:CUserData
GetAmount	./Common/SingleMap.h	/^	int		GetAmount()										{ return m_map.size(); }$/;"	f	class:CSingleMap
GetBattle	./Main/BattleManager.h	/^	CBattle* GetBattle() 				{	return m_pBattle;	}$/;"	f	class:CBattleManager
GetBcTeamAmount	./Main/Battle.cpp	/^UINT  CBattle::GetBcTeamAmount()$/;"	f	class:CBattle
GetBcs	./Main/Player.h	/^	CBattleConfusionSingle* GetBcs() 	{ return m_pBcs; }$/;"	f	class:Player
GetBcsAmount	./Main/Battle.cpp	/^UINT CBattle::GetBcsAmount()$/;"	f	class:CBattle
GetBcsSet	./Main/Battle.h	/^	VT_BCS& GetBcsSet() 	{	return m_vtBcs;	}$/;"	f	class:CBattle
GetBct	./Main/Player.h	/^	CBattleTeam* 			GetBct()	{	return m_pBct; 	}$/;"	f	class:Player
GetBctSet	./Main/Battle.h	/^	VT_BC_TEAM& GetBctSet() 	{	return m_vtBcTeam;	}$/;"	f	class:CBattle
GetBrbt	./Main/Player.h	/^	CBattleTeam* 			GetBrbt()	{	return m_pBrbt; 	}$/;"	f	class:Player
GetBrbtSet	./Main/Battle.h	/^	VT_BC_TEAM& GetBrbtSet() 	{	return m_vtRbTeam;	}$/;"	f	class:CBattle
GetBuffer	./NetBase/SocketInputStream.h	/^	CHAR*		GetBuffer() const 					{	return	m_Buffer;			}$/;"	f	class:SocketInputStream
GetBuffer	./NetBase/SocketOutputStream.h	/^	CHAR*		GetBuffer() const 					{	return	m_Buffer;			}$/;"	f	class:SocketOutputStream
GetBufferLen	./NetBase/SocketInputStream.h	/^	UINT		GetBufferLen() const 				{	return	m_BufferLen;		}$/;"	f	class:SocketInputStream
GetBufferLen	./NetBase/SocketOutputStream.h	/^	UINT		GetBufferLen() const 				{	return	m_BufferLen;		}$/;"	f	class:SocketOutputStream
GetCarLevel	./Main/Player.h	/^    UInt32           GetCarLevel()                              {    return QueryData()->GetCarLevel();         }$/;"	f	class:Player
GetCarLevel	./Main/UserData.h	/^    UInt32           GetCarLevel()                              {    return m_Info.m_nCarLevel;         }   $/;"	f	class:CUserData
GetClient	./Main/ClientPool.cpp	/^ClientPlayer* ClientPool::GetClient(ClientID_t ClientID)$/;"	f	class:ClientPool
GetClientEPollEvent	./NetBase/Socket.h	/^        struct epoll_event*                     GetClientEPollEvent()                                                  { return m_pEpollEvent;                               }$/;"	f	class:Socket
GetClientID	./Main/Player.h	/^	ClientID_t 			GetClientID()	{ return m_PID; }$/;"	f	class:Player
GetClientPollFd	./NetBase/Socket.h	/^        struct pollfd*                          GetClientPollFd()                                                       { return m_pClientPollFd;               }$/;"	f	class:Socket
GetCurStarSum	./Main/Player.h	/^	UInt32 GetCurStarSum(){$/;"	f	class:Player
GetCurStarSum	./Main/UserData.h	/^    UInt32           GetCurStarSum()                             {    return m_Info.m_nCurStarSum;          }$/;"	f	class:CUserData
GetCurrTime	./Common/Common.h	/^inline long	GetCurrTime()				{ return time(NULL); }$/;"	f
GetDay	./Base/TimeManager.h	/^	INT				GetDay(){ return m_TM.tm_mday; };		\/\/[1,31]$/;"	f	class:TimeManager
GetDayTime	./Base/Log.h	/^	UINT			GetDayTime( ){ return m_DayTime ; }$/;"	f	class:Log
GetDayTime	./Base/TimeManager.cpp	/^UINT TimeManager::GetDayTime()$/;"	f	class:TimeManager
GetEnemyTeam	./Main/BattleTeam.h	/^	CBattleTeam* GetEnemyTeam()								{	return m_pEnemyTeam;					}	$/;"	f	class:CBattleTeam
GetFightCfgLevel	./Main/Player.cpp	/^UINT Player::GetFightCfgLevel(UINT nSorce)$/;"	f	class:Player
GetFightKillSum	./Main/Player.h	/^	UInt32  GetFightKillSum(){$/;"	f	class:Player
GetFightKillSum	./Main/UserData.h	/^    UInt32           GetFightKillSum()                            {    return m_Info.m_nFightKillSum;       }$/;"	f	class:CUserData
GetFightLevel	./Main/Player.h	/^	UInt32  GetFightLevel(){$/;"	f	class:Player
GetFightLevel	./Main/UserData.h	/^    UInt32           GetFightLevel()                              {    return m_Info.m_nFightLevel;         }  $/;"	f	class:CUserData
GetFightResult	./Main/BattleTeam.h	/^	INT 	GetFightResult()								{	return m_nFightResult;					}$/;"	f	class:CBattleTeam
GetFightScore	./Main/Player.h	/^	UInt32 GetFightScore()	{$/;"	f	class:Player
GetFightScore	./Main/UserData.h	/^    UInt32           GetFightScore()                              {    return m_Info.m_nFightScore;         }$/;"	f	class:CUserData
GetFightTeamColour	./Main/BattleTeam.h	/^	INT 	GetFightTeamColour()							{	return m_nFightTeamColour;				}$/;"	f	class:CBattleTeam
GetFightTeamKillSum	./Main/BattleTeam.h	/^	INT 	GetFightTeamKillSum()							{	return m_nFightTeamKillSum;				}$/;"	f	class:CBattleTeam
GetFightTimeInterval	./Main/BattleTeam.h	/^	CTimeOut& 	GetFightTimeInterval()						{	return m_tFightTimeInterval;			}	$/;"	f	class:CBattleTeam
GetFightTotalScore	./Main/BattleTeam.h	/^	INT 	GetFightTotalScore()							{	return m_nFightTotalScore;				}$/;"	f	class:CBattleTeam
GetFrontPrepareFightTeam	./Main/Battle.cpp	/^CBattleTeam* CBattle::GetFrontPrepareFightTeam(INT nModelType)$/;"	f	class:CBattle
GetGiftDay	./Main/Player.h	/^	std::string& GetGiftDay()	{		return QueryData()->GetGiftDay();	}$/;"	f	class:Player
GetGiftDay	./Main/UserData.h	/^    std::string&     GetGiftDay()                                {   return m_Info.m_GiftDay;               }$/;"	f	class:CUserData
GetGiftSum	./Main/Player.h	/^	UInt32 GetGiftSum()	{$/;"	f	class:Player
GetGiftSum	./Main/UserData.h	/^    UInt32           GetGiftSum()                                {    return m_Info.m_nGiftSum;             }               $/;"	f	class:CUserData
GetGoldSum	./Main/Player.h	/^	UInt32 GetGoldSum(){ 		$/;"	f	class:Player
GetGoldSum	./Main/UserData.h	/^    UInt32           GetGoldSum()                                {    return m_Info.m_nGoldSum;             }$/;"	f	class:CUserData
GetGrandingId	./Main/Player.h	/^	UInt32 GetGrandingId(){$/;"	f	class:Player
GetGrandingId	./Main/UserData.h	/^    UInt32           GetGrandingId()                             {    return m_Info.m_nGrandingId;          }$/;"	f	class:CUserData
GetHead	./NetBase/SocketInputStream.h	/^	UINT		GetHead() const 					{	return	m_Head;				}$/;"	f	class:SocketInputStream
GetHead	./NetBase/SocketOutputStream.h	/^	UINT		GetHead() const 					{	return	m_Head;				}$/;"	f	class:SocketOutputStream
GetHeadPicurl	./Main/Player.h	/^    std::string& 			GetHeadPicurl(){       QueryData()->GetHeadPicurl();    }$/;"	f	class:Player
GetHeadPicurl	./Main/UserData.h	/^    std::string&     GetHeadPicurl()                             {   return m_Info.m_HeadPicurl;            }$/;"	f	class:CUserData
GetHour	./Base/TimeManager.h	/^	INT				GetHour(){ return m_TM.tm_hour; };		\/\/[0,23]$/;"	f	class:TimeManager
GetInfo	./Main/UserData.h	/^    PlayerInfoStruct&       GetInfo()                                   {   return m_Info;      }$/;"	f	class:CUserData
GetInt	./Common/IniFile.cpp	/^int		CIniFile::GetInt(const char * pKey)$/;"	f	class:CIniFile
GetInterface	./NetBase/MulitThreadNetBase/MTListenSocket.h	/^	IMTListenSocket*	GetInterface() { return (IMTListenSocket*)this; }$/;"	f	class:CMTListenSocket
GetInterface	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	IMTServerSocket* GetInterface() 		{	return (IMTServerSocket*)this;	}$/;"	f	class:CMTServerSocket
GetInterval	./Common/TimeOut.h	/^	int		GetInterval()						{ return m_nInterval; }$/;"	f	class:CTimeOutMS_
GetInterval	./Common/TimeOut.h	/^	int		GetInterval()						{ return m_nInterval; }$/;"	f	class:CTimeOut_
GetKillSum	./Main/Player.h	/^	UInt32 GetKillSum(){$/;"	f	class:Player
GetKillSum	./Main/UserData.h	/^    UInt32           GetKillSum()                                {    return m_Info.m_nKillSum;             }$/;"	f	class:CUserData
GetKingPlayer	./Main/BattleTeam.h	/^	Player* GetKingPlayer()							{return (m_pKingPlayer == NULL) ? NULL : m_pKingPlayer;	}$/;"	f	class:CBattleTeam
GetKingSum	./Main/Player.h	/^	UInt32 GetKingSum()	{$/;"	f	class:Player
GetKingSum	./Main/UserData.h	/^    UInt32           GetKingSum()                                {    return m_Info.m_nKingSum;             }$/;"	f	class:CUserData
GetLeaveTime	./Base/GameUtil.h	/^	UINT GetLeaveTime(UINT uNow)\/\/剩余时间;$/;"	f	class:CMyTimer
GetLinger	./NetBase/ClientSocket.h	/^    UINT GetLinger() 							{ 	return m_pSocket->getLinger(); 				}$/;"	f	class:ClientSocket
GetLinger	./NetBase/ServerSocket.h	/^    UINT GetLinger() 							{ 	return m_pSocket->getLinger(); 				}$/;"	f	class:ServerSocket
GetLogName	./Base/Log.cpp	/^VOID Log::GetLogName( INT logid, CHAR* szName )$/;"	f	class:Log
GetLogSize	./Base/Log.h	/^	INT				GetLogSize( INT logid ){ return m_LogPos[logid] ; }$/;"	f	class:Log
GetMaxBufferLen	./NetBase/SocketInputStream.h	/^	UINT		GetMaxBufferLen() const 			{	return	m_MaxBufferLen;		}$/;"	f	class:SocketInputStream
GetMaxBufferLen	./NetBase/SocketOutputStream.h	/^	UINT		GetMaxBufferLen() const 			{	return	m_MaxBufferLen;		}$/;"	f	class:SocketOutputStream
GetMember	./Main/BattleTeam.cpp	/^Player* CBattleTeam::GetMember(UINT nPlayerId)$/;"	f	class:CBattleTeam
GetMemberAmount	./Main/BattleTeam.cpp	/^UINT CBattleTeam::GetMemberAmount()$/;"	f	class:CBattleTeam
GetMemberByIndex	./Main/BattleTeam.cpp	/^Player* CBattleTeam::GetMemberByIndex(int nIndex)$/;"	f	class:CBattleTeam
GetMinute	./Base/TimeManager.h	/^	INT				GetMinute(){ return m_TM.tm_min; };		\/\/[0,59]$/;"	f	class:TimeManager
GetMonth	./Base/TimeManager.h	/^	INT				GetMonth(){ return m_TM.tm_mon; };		\/\/[0,11]$/;"	f	class:TimeManager
GetNickName	./Main/Player.h	/^	std::string& 			GetNickName(){ 	        QueryData()->GetNickName();     }$/;"	f	class:Player
GetNickName	./Main/UserData.h	/^    std::string&     GetNickName()                               {   return m_Info.m_NickName;              }$/;"	f	class:CUserData
GetNoDelay	./NetBase/ClientSocket.h	/^	BOOL GetNoDelay() 							{ 	return m_pSocket->isNoDelay(); 				}$/;"	f	class:ClientSocket
GetNoDelay	./NetBase/ServerSocket.h	/^	BOOL GetNoDelay() 							{ 	return m_pSocket->isNoDelay(); 				}$/;"	f	class:ServerSocket
GetNonBlocking	./NetBase/ClientSocket.h	/^    BOOL GetNonBlocking() const 				{ 	return m_pSocket->isNonBlocking(); 			}$/;"	f	class:ClientSocket
GetNonBlocking	./NetBase/ServerSocket.h	/^    BOOL GetNonBlocking() const 				{ 	return m_pSocket->isNonBlocking(); 			}$/;"	f	class:ServerSocket
GetNowTime	./Main/Player.h	/^	DWORD 				GetNowTime()				{ 	return m_time; 			}$/;"	f	class:Player
GetObj	./Common/SingleMap.h	/^T*		CSingleMap<T>::GetObj(OBJID key)$/;"	f	class:CSingleMap
GetObjByIter	./Common/SingleMap.h	/^	T*		GetObjByIter(Iter i)							{ return i->second; }$/;"	f	class:CSingleMap
GetPacket	./NetBase/MulitThreadNetBase/MTClientSocket.cpp	/^const char* CClientSocket::GetPacket(int* pBufSize, bool bFromNet \/*= true*\/)$/;"	f	class:CClientSocket
GetPacket	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^const CHAR*  CMTServerSocket::GetPacket(INT* nLen, BOOL bFromNet \/*= TRUE*\/)$/;"	f	class:CMTServerSocket
GetPacketID	./MsgHandler/MsgAction.h	/^	PacketID_t 	GetPacketID() const { return _MSG_ACTION; };$/;"	f	class:CMsgActionFactory
GetPacketID	./MsgHandler/MsgAction.h	/^	virtual	PacketID_t	GetPacketID() const { return _MSG_ACTION; };	$/;"	f	class:CMsgAction
GetPacketID	./MsgHandler/MsgBattle.h	/^	PacketID_t 	GetPacketID() const { return _MSG_BATTLE; };$/;"	f	class:CMsgBattleFactory
GetPacketID	./MsgHandler/MsgBattle.h	/^	virtual	PacketID_t	GetPacketID() const { return _MSG_BATTLE; };	$/;"	f	class:CMsgBattle
GetPacketID	./MsgHandler/MsgExchang.h	/^	PacketID_t 	GetPacketID() const { return _MSG_EXCHANGE; };$/;"	f	class:CMsgExchangFactory
GetPacketID	./MsgHandler/MsgExchang.h	/^	virtual	PacketID_t	GetPacketID() const { return _MSG_EXCHANGE; };	$/;"	f	class:CMsgExchang
GetPacketID	./MsgHandler/MsgItem.h	/^	PacketID_t 	GetPacketID() const { return _MSG_ITEM; };$/;"	f	class:CMsgItemFactory
GetPacketID	./MsgHandler/MsgItem.h	/^	virtual	PacketID_t	GetPacketID() const { return _MSG_ITEM; };	$/;"	f	class:CMsgItem
GetPacketID	./MsgHandler/MsgLogin.h	/^	PacketID_t 	GetPacketID() const { return _MSG_LOGIN; };$/;"	f	class:CMsgLoginFactory
GetPacketID	./MsgHandler/MsgLogin.h	/^	virtual	PacketID_t	GetPacketID() const { return _MSG_LOGIN; };	$/;"	f	class:CMsgLogin
GetPacketID	./MsgHandler/MsgSynRoomInfo.h	/^	PacketID_t 	GetPacketID() const { return _MSG_SYN_ROOM; };$/;"	f	class:CMsgSynRoomInfoFactory
GetPacketID	./MsgHandler/MsgSynRoomInfo.h	/^	virtual	PacketID_t	GetPacketID() const { return _MSG_SYN_ROOM; };	$/;"	f	class:CMsgSynRoomInfo
GetPacketID	./MsgHandler/MsgUserInfo.h	/^	PacketID_t 	GetPacketID() const { return _MSG_USERINFO; };$/;"	f	class:CMsgUserInfoFactory
GetPacketID	./MsgHandler/MsgUserInfo.h	/^	virtual	PacketID_t	GetPacketID() const { return _MSG_USERINFO; };	$/;"	f	class:CMsgUserInfo
GetPacketID	./MsgHandler/MsgVas.h	/^	PacketID_t 	GetPacketID() const { return _MSG_WALK; };$/;"	f	class:CMsgVasFactory
GetPacketID	./MsgHandler/MsgVas.h	/^	virtual	PacketID_t	GetPacketID() const { return _MSG_WALK; };	$/;"	f	class:CMsgVas
GetPacketID	./MsgHandler/MsgWalk.h	/^	PacketID_t 	GetPacketID() const { return _MSG_WALK; };$/;"	f	class:CMsgWalkFactory
GetPacketID	./MsgHandler/MsgWalk.h	/^	virtual	PacketID_t	GetPacketID() const { return _MSG_WALK; };	$/;"	f	class:CMsgWalk
GetPacketIndex	./Main/Player.h	/^	BYTE 				GetPacketIndex(){  		return m_PacketIndex; }$/;"	f	class:Player
GetPacketIndex	./MsgHandler/NetMsg.h	/^	BYTE				GetPacketIndex() const 						{ 	return m_Index; 	}$/;"	f	class:CNetMsg
GetPacketIndex	./NetBase/NetMsg.h	/^	BYTE				GetPacketIndex() const 						{ 	return m_Index; 	}$/;"	f	class:CNetMsg
GetPacketMaxSize	./Common/PacketFactoryManager.cpp	/^UINT PacketFactoryManager::GetPacketMaxSize(PacketID_t packetID) $/;"	f	class:PacketFactoryManager
GetPacketMaxSize	./MsgHandler/MsgAction.h	/^	UINT 		GetPacketMaxSize() const { return m_nPacketSize; };	$/;"	f	class:CMsgActionFactory
GetPacketMaxSize	./MsgHandler/MsgBattle.h	/^	UINT 		GetPacketMaxSize() const { return m_nPacketSize; };	$/;"	f	class:CMsgBattleFactory
GetPacketMaxSize	./MsgHandler/MsgExchang.h	/^	UINT 		GetPacketMaxSize() const { return m_nPacketSize; };	$/;"	f	class:CMsgExchangFactory
GetPacketMaxSize	./MsgHandler/MsgItem.h	/^	UINT 		GetPacketMaxSize() const { return m_nPacketSize; };	$/;"	f	class:CMsgItemFactory
GetPacketMaxSize	./MsgHandler/MsgLogin.h	/^	UINT 		GetPacketMaxSize() const { return m_nPacketSize; };	$/;"	f	class:CMsgLoginFactory
GetPacketMaxSize	./MsgHandler/MsgSynRoomInfo.h	/^	UINT 		GetPacketMaxSize() const { return m_nPacketSize; };	$/;"	f	class:CMsgSynRoomInfoFactory
GetPacketMaxSize	./MsgHandler/MsgUserInfo.h	/^	UINT 		GetPacketMaxSize() const { return m_nPacketSize; };	$/;"	f	class:CMsgUserInfoFactory
GetPacketMaxSize	./MsgHandler/MsgVas.h	/^	UINT 		GetPacketMaxSize() const { return m_nPacketSize; };	$/;"	f	class:CMsgVasFactory
GetPacketMaxSize	./MsgHandler/MsgWalk.h	/^	UINT 		GetPacketMaxSize() const { return m_nPacketSize; };	$/;"	f	class:CMsgWalkFactory
GetPacketSize	./MsgHandler/MsgAction.h	/^	virtual	UINT		GetPacketSize() const { return m_nDataLen; };$/;"	f	class:CMsgAction
GetPacketSize	./MsgHandler/MsgBattle.h	/^	virtual	UINT		GetPacketSize() const { return m_nDataLen; };$/;"	f	class:CMsgBattle
GetPacketSize	./MsgHandler/MsgExchang.h	/^	virtual	UINT		GetPacketSize() const { return m_nDataLen; };$/;"	f	class:CMsgExchang
GetPacketSize	./MsgHandler/MsgItem.h	/^	virtual	UINT		GetPacketSize() const { return m_nDataLen; };$/;"	f	class:CMsgItem
GetPacketSize	./MsgHandler/MsgLogin.h	/^	virtual	UINT		GetPacketSize() const { return m_nDataLen; };$/;"	f	class:CMsgLogin
GetPacketSize	./MsgHandler/MsgSynRoomInfo.h	/^	virtual	UINT		GetPacketSize() const { return m_nDataLen; };$/;"	f	class:CMsgSynRoomInfo
GetPacketSize	./MsgHandler/MsgUserInfo.h	/^	virtual	UINT		GetPacketSize() const { return m_nDataLen; };$/;"	f	class:CMsgUserInfo
GetPacketSize	./MsgHandler/MsgVas.h	/^	virtual	UINT		GetPacketSize() const { return m_nDataLen; };$/;"	f	class:CMsgVas
GetPacketSize	./MsgHandler/MsgWalk.h	/^	virtual	UINT		GetPacketSize() const { return m_nDataLen; };$/;"	f	class:CMsgWalk
GetPacketStatus	./MsgHandler/NetMsg.h	/^	BYTE				GetPacketStatus() const 					{ 	return m_Status; 	}$/;"	f	class:CNetMsg
GetPacketStatus	./NetBase/NetMsg.h	/^	BYTE				GetPacketStatus() const 					{ 	return m_Status; 	}$/;"	f	class:CNetMsg
GetPeerIP	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^DWORD CMTServerSocket::GetPeerIP()$/;"	f	class:CMTServerSocket
GetPeerPort	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^UINT CMTServerSocket::GetPeerPort()$/;"	f	class:CMTServerSocket
GetPeerStrIP	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^BOOL CMTServerSocket::GetPeerStrIP(char* szClientIP)$/;"	f	class:CMTServerSocket
GetPlayer	./Main/PlayerPool.cpp	/^ServerPlayer* PlayerPool::GetPlayer(PlayerID_t PlayerID)$/;"	f	class:PlayerPool
GetPlayerAmount	./Main/PlayerManager.h	/^	UINT 		GetPlayerAmount()					{	return	m_nPlayerAmount;		}$/;"	f	class:PlayerManager
GetPlayerByIndex	./Main/Battle.cpp	/^Player* CBattle::GetPlayerByIndex(int nIndex)$/;"	f	class:CBattle
GetPlayerBySocket	./Main/PlayerManager.cpp	/^Player* PlayerManager::GetPlayerBySocket(SOCKET sock)$/;"	f	class:PlayerManager
GetPlayerByUid	./Main/PlayerPool.cpp	/^Player* PlayerPool::GetPlayerByUid(UInt32 Uid)$/;"	f	class:PlayerPool
GetPlayerEx	./Main/PlayerPool.cpp	/^Player* PlayerPool::GetPlayerEx(UInt32 accountID)$/;"	f	class:PlayerPool
GetPlayerID	./Main/Player.h	/^	PlayerID_t			GetPlayerID()	{ 	return m_PID; 	}$/;"	f	class:Player
GetPlayerIDS	./Main/PlayerManager.h	/^	PlayerID_t* GetPlayerIDS()						{	return	m_nPlayerIDS;			}$/;"	f	class:PlayerManager
GetPlayerManagerID	./Main/Player.h	/^	ID_t 				GetPlayerManagerID() 	{ 		return m_PlayerManagerID; }$/;"	f	class:Player
GetQuickMatchTimeStamp	./Main/BattleTeam.h	/^	time_t 	GetQuickMatchTimeStamp() 							{	return m_nQuickMatchTimeStamp;		}								$/;"	f	class:CBattleTeam
GetRatio	./Main/Player.h	/^    UInt32           GetRatio()                              {    return QueryData()->GetRatio();         }  $/;"	f	class:Player
GetRatio	./Main/UserData.h	/^    UInt32           GetRatio()                              {    return m_Info.m_nRatio;         }            $/;"	f	class:CUserData
GetRbTeamAmount	./Main/Battle.cpp	/^UINT  CBattle::GetRbTeamAmount()$/;"	f	class:CBattle
GetReceiveBufferSize	./Main/Player.h	/^	UINT 				GetReceiveBufferSize() const { return m_pSocket->getReceiveBufferSize(); }	$/;"	f	class:Player
GetReceiveBufferSize	./NetBase/ClientSocket.h	/^    UINT GetReceiveBufferSize() const 			{ 	return m_pSocket->getReceiveBufferSize();	}$/;"	f	class:ClientSocket
GetReceiveBufferSize	./NetBase/ServerSocket.h	/^    UINT GetReceiveBufferSize() const 			{ 	return m_pSocket->getReceiveBufferSize();	}$/;"	f	class:ServerSocket
GetRecvBuffer	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	virtual const CHAR*         GetRecvBuffer()												{	return m_RecvBuffMsg;		}$/;"	f	class:CMTServerSocket
GetRecvBufferLen	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	virtual INT                 GetRecvBufferLen()											{	return m_nRecvBuffLen;		}$/;"	f	class:CMTServerSocket
GetRecvLeaveLen	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^INT CMTServerSocket::GetRecvLeaveLen()$/;"	f	class:CMTServerSocket
GetRemain	./Common/TimeOut.cpp	/^int CTimeOutMS_<I>::GetRemain()$/;"	f	class:CTimeOutMS_
GetRemain	./Common/TimeOut.h	/^	int		GetRemain()							{ return m_tUpdateTime ? ::CutRange(m_nInterval - (int)((clock()\/CLOCKS_PER_SEC)-(int)m_tUpdateTime), 0, m_nInterval) : 0; }$/;"	f	class:CTimeOut_
GetReuseAddr	./NetBase/ClientSocket.h	/^    UINT GetReuseAddr() 						{ 	return m_pSocket->isReuseAddr(); 			}$/;"	f	class:ClientSocket
GetReuseAddr	./NetBase/ServerSocket.h	/^    UINT GetReuseAddr() 						{ 	return m_pSocket->isReuseAddr(); 			}$/;"	f	class:ServerSocket
GetReusePort	./NetBase/ClientSocket.h	/^    UINT GetReusePort() 						{ 	return m_pSocket->isReusePort(); 			}$/;"	f	class:ClientSocket
GetReusePort	./NetBase/ServerSocket.h	/^    UINT GetReusePort() 						{ 	return m_pSocket->isReusePort(); 			}$/;"	f	class:ServerSocket
GetRobot	./Main/Player.h	/^	Robot* 				GetRobot()	{  	return m_robot;	}$/;"	f	class:Player
GetSecond	./Base/TimeManager.h	/^	INT				GetSecond(){ return m_TM.tm_sec; };		\/\/[0,59]$/;"	f	class:TimeManager
GetSendBufferSize	./Main/Player.h	/^	UINT 				GetSendBufferSize() const	{ 		return m_pSocket->getSendBufferSize();	}$/;"	f	class:Player
GetSendBufferSize	./NetBase/ClientSocket.h	/^    UINT GetSendBufferSize() const 				{ 	return m_pSocket->getSendBufferSize(); 		}$/;"	f	class:ClientSocket
GetSendBufferSize	./NetBase/ServerSocket.h	/^    UINT GetSendBufferSize() const 				{ 	return m_pSocket->getSendBufferSize(); 		}$/;"	f	class:ServerSocket
GetSendLeaveLen	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^INT CMTServerSocket::GetSendLeaveLen()$/;"	f	class:CMTServerSocket
GetServerData	./Main/ClientPlayer.h	/^	_CLIENT_DATA* GetServerData()					{	return m_pServerData;	}$/;"	f	class:ClientPlayer
GetServerData	./Main/ServerPlayer.h	/^	_SERVER_DATA* GetServerData()					{	return m_pServerData;	}$/;"	f	class:ServerPlayer
GetServerPlayer	./Main/ServerManager.cpp	/^ServerPlayer* ServerManager::GetServerPlayer(ID_t ServerID)$/;"	f	class:ServerManager
GetSignUpPlayer	./Main/BattleConfusionSingle.h	/^	Player* GetSignUpPlayer() {	return m_pSignUpPlayer;	}$/;"	f	class:CBattleConfusionSingle
GetSocket	./Main/Player.h	/^	Socket*  			GetSocket()	{ 	return m_pSocket; 	}$/;"	f	class:Player
GetSocket	./NetBase/MulitThreadNetBase/MTListenSocket.cpp	/^SOCKET CMTListenSocket::GetSocket()$/;"	f	class:CMTListenSocket
GetSocket	./NetBase/ServerSocket.h	/^    Socket* GetSocket() 						{ 	return m_pSocket; 			}$/;"	f	class:ServerSocket
GetSocketID	./NetBase/ClientSocket.h	/^	SOCKET GetSocketID() 						{ 	return m_pSocket->getSocketID(); 			}$/;"	f	class:ClientSocket
GetSocketID	./NetBase/ServerSocket.h	/^	SOCKET GetSocketID() 						{ 	return m_pSocket->getSocketID(); 			}$/;"	f	class:ServerSocket
GetSocketInputStream	./Main/Player.h	/^	SocketInputStream* 	GetSocketInputStream()	{   		return m_pSocketInputStream; }$/;"	f	class:Player
GetSocketOutputStream	./Main/Player.h	/^	SocketOutputStream*	GetSocketOutputStream()	{  		  return m_pSocketOutputStream;	}$/;"	f	class:Player
GetStampTime	./Main/BattleConfusionSingle.h	/^	time_t GetStampTime() {	return m_StampTime;	}$/;"	f	class:CBattleConfusionSingle
GetStarDay	./Main/Player.h	/^	std::string& GetStarDay()	{		return QueryData()->GetStarDay();	}$/;"	f	class:Player
GetStarDay	./Main/UserData.h	/^    std::string&     GetStarDay()                                {   return m_Info.m_StarDay;               }$/;"	f	class:CUserData
GetStarSum	./Main/Player.h	/^	UInt32 GetStarSum(){$/;"	f	class:Player
GetStarSum	./Main/UserData.h	/^    UInt32           GetStarSum()                                {    return m_Info.m_nStarSum;             }$/;"	f	class:CUserData
GetStrAccount	./Main/Player.h	/^	string& 			GetStrAccount()				{	return m_StrAccount; }$/;"	f	class:Player
GetString	./Common/IniFile.cpp	/^bool	CIniFile::GetString(char * bufString, const char * pKey, int nBufSize)$/;"	f	class:CIniFile
GetTail	./NetBase/SocketInputStream.h	/^	UINT		GetTail() const 					{	return	m_Tail;				}$/;"	f	class:SocketInputStream
GetTail	./NetBase/SocketOutputStream.h	/^	UINT		GetTail() const 					{	return	m_Tail;				}$/;"	f	class:SocketOutputStream
GetTeamAmount	./Main/BattleTeam.h	/^	UINT     		GetTeamAmount()	{ return m_vtTeamPlayerS.size();	}$/;"	f	class:CBattleTeam
GetTeamById	./Main/Battle.cpp	/^CBattleTeam* CBattle::GetTeamById(INT nModelType, INT nTeamid)$/;"	f	class:CBattle
GetTeamId	./Main/BattleTeam.h	/^	UINT 	GetTeamId() 							{	return m_id;	}$/;"	f	class:CBattleTeam
GetTeamInfoById	./Main/Battle.cpp	/^CBattleTeam* CBattle::GetTeamInfoById(INT _Teamid)$/;"	f	class:CBattle
GetTeamPlayerS	./Main/BattleTeam.h	/^	TEAMPLAYERSET& GetTeamPlayerS()	{	return m_vtTeamPlayerS;	}						\/\/报名玩家$/;"	f	class:CBattleTeam
GetTeamStatus	./Main/BattleTeam.h	/^	UINT 	GetTeamStatus() 						{	return m_nTeamStatus;		}$/;"	f	class:CBattleTeam
GetTermTime	./Base/GameUtil.h	/^	UINT GetTermTime( ){ return m_uTickTerm ; }$/;"	f	class:CMyTimer
GetTickOldTime	./Base/GameUtil.h	/^	UINT GetTickOldTime( ){ return m_uTickOld; }$/;"	f	class:CMyTimer
GetTimeStamp	./Main/BattleTeam.h	/^	time_t 	GetTimeStamp() 							{	return m_nTimeStamp;		}	$/;"	f	class:CBattleTeam
GetTodayTime	./Base/TimeManager.cpp	/^WORD TimeManager::GetTodayTime()$/;"	f	class:TimeManager
GetUID	./Main/Player.h	/^	ID_t  				GetUID()	{ 	return m_UID; }$/;"	f	class:Player
GetUid	./Main/Player.h	/^	UInt32 					GetUid()	{         QueryData()->GetUid();     }$/;"	f	class:Player
GetUid	./Main/UserData.h	/^    UInt32           GetUid()                                   {   return m_Info.m_nUid;            }$/;"	f	class:CUserData
GetUnlockSum	./Main/Player.h	/^	std::string& GetUnlockSum(){return QueryData()->GetUnlockSum();	}$/;"	f	class:Player
GetUnlockSum	./Main/UserData.h	/^    std::string&     GetUnlockSum()                              {    return m_Info.m_UnlockSum;            }$/;"	f	class:CUserData
GetUpdateTime	./Common/TimeOut.h	/^	time_t	GetUpdateTime()						{ return m_tUpdateTime; }$/;"	f	class:CTimeOutMS_
GetUpdateTime	./Common/TimeOut.h	/^	time_t	GetUpdateTime()						{ return m_tUpdateTime; }$/;"	f	class:CTimeOut_
GetUseCar	./Main/Player.h	/^	UInt32 GetUseCar(){$/;"	f	class:Player
GetUseCar	./Main/UserData.h	/^    UInt32           GetUseCar()                                 {    return m_Info.m_nCurUseCar;              }$/;"	f	class:CUserData
GetWeek	./Base/TimeManager.h	/^	UINT			GetWeek(){ return m_TM.tm_wday; };$/;"	f	class:TimeManager
GetYear	./Base/TimeManager.h	/^	INT				GetYear(){ return m_TM.tm_year+1900; };	\/\/[1900,????]$/;"	f	class:TimeManager
H	./websocket/sha1.h	/^        unsigned H[5];                      \/\/ Message digest buffers$/;"	m	class:SHA1
HEADER_MAP	./websocket/websocket_handler.h	/^typedef std::map<std::string, std::string>  HEADER_MAP;$/;"	t
HEART_BEAT_DETECTION	./Main/Player.h	55;"	d
HEART_BEAT_DETECTION_USER	./Main/Player.h	54;"	d
HEX	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
HEX	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
HeartBeat	./Main/ClientManager.cpp	/^BOOL ClientManager::HeartBeat(DWORD dwTime\/*=0*\/)$/;"	f	class:ClientManager
HeartBeat	./Main/ClientPlayer.cpp	/^BOOL ClientPlayer::HeartBeat(DWORD dwTime)$/;"	f	class:ClientPlayer
HeartBeat	./Main/Player.cpp	/^BOOL Player::HeartBeat(DWORD dwTime)$/;"	f	class:Player
HeartBeat	./Main/ServerManager.cpp	/^BOOL ServerManager::HeartBeat(DWORD dwTime\/*=0*\/)$/;"	f	class:ServerManager
HeartBeat	./Main/ServerPlayer.cpp	/^BOOL ServerPlayer::HeartBeat(DWORD dwTime\/*=0*\/)$/;"	f	class:ServerPlayer
ID_VOID_MAIN	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
ID_t	./Common/Type.h	/^typedef SHORT	ID_t;$/;"	t
IF_NOT	./Base/logger.h	/^    IF_NOT,$/;"	e	enum:LOG_LEVEL
IF_NOT	./Common/Common.h	128;"	d
IF_NOT	./Common/Common.h	141;"	d
IF_NOT_	./Base/logger.h	/^    IF_NOT_,$/;"	e	enum:LOG_LEVEL
IF_NOT_	./Common/Common.h	129;"	d
IF_NOT_	./Common/Common.h	142;"	d
IF_OK	./Base/logger.h	/^    IF_OK,$/;"	e	enum:LOG_LEVEL
IF_OK	./Common/Common.h	130;"	d
IF_OK	./Common/Common.h	143;"	d
IF_OK_	./Base/logger.h	/^    IF_OK_,$/;"	e	enum:LOG_LEVEL
IF_OK_	./Common/Common.h	131;"	d
IF_OK_	./Common/Common.h	144;"	d
IMTClientSocket	./NetBase/MulitThreadNetBase/I_MTClientSocket.h	/^class IMTClientSocket$/;"	c
IMTListenSocket	./NetBase/MulitThreadNetBase/I_MTListenSocket.h	/^class IMTListenSocket$/;"	c
IMTServerSocket	./NetBase/MulitThreadNetBase/I_MTServerSocket.h	/^class IMTServerSocket$/;"	c
INFINITE	./Common/BaseType.h	378;"	d
INFO	./Base/logger.h	/^    INFO,     \/\/2$/;"	e	enum:LOG_LEVEL
INIDATASIZE	./Common/IniFile.h	52;"	d
INIWORDSIZE	./Common/IniFile.h	51;"	d
INT	./Common/BaseType.h	/^typedef int 	INT;									\/\/标准有符号int$/;"	t
INTERLOCKEDDECREMENT	./Common/Common.h	254;"	d
INTERLOCKEDDECREMENT	./Common/Common.h	263;"	d
INTERLOCKEDEXCHANGE	./Common/Common.h	251;"	d
INTERLOCKEDEXCHANGE	./Common/Common.h	260;"	d
INTERLOCKEDEXCHANGEADD	./Common/Common.h	252;"	d
INTERLOCKEDEXCHANGEADD	./Common/Common.h	261;"	d
INTERLOCKEDINCREMENT	./Common/Common.h	253;"	d
INTERLOCKEDINCREMENT	./Common/Common.h	262;"	d
INVALID_BAG_INDEX	./Common/GameDefine.h	97;"	d
INVALID_GUID	./Common/Type.h	63;"	d
INVALID_HANDL	./Common/BaseType.h	362;"	d
INVALID_ID	./Common/BaseType.h	365;"	d
INVALID_ID_EX	./Common/Type.h	65;"	d
INVALID_INDEX	./Common/Type.h	64;"	d
INVALID_SOCKET	./Common/BaseType.h	270;"	d
INVITE_JOIN	./websocket/protocol.h	/^	INVITE_JOIN	 		= 4,		\/\/邀请好友加入$/;"	e	enum:_MSG_BATTLE_TYPE
IOModelOpen	./Common/Common.cpp	/^int IOModelOpen(const char* IoModelName)$/;"	f
IO_MODEL_EPOLL	./Common/Config.h	/^	INT 	IO_MODEL_EPOLL;$/;"	m	struct:ST_CONFIG
IO_MODEL_POLL	./Common/Config.h	/^	INT 	IO_MODEL_POLL;$/;"	m	struct:ST_CONFIG
IO_MODEL_SELECT	./Common/Config.h	/^	INT 	IO_MODEL_SELECT;$/;"	m	struct:ST_CONFIG
IPSTR_SIZE	./Common/BaseType.h	/^const int	IPSTR_SIZE			= 24;$/;"	v
IP_SIZE	./Common/BaseType.h	157;"	d
IP_t	./Common/BaseType.h	/^typedef ULONG IP_t;$/;"	t
ISSET0	./Common/Type.h	96;"	d
ISSET1	./Common/Type.h	97;"	d
ISSET10	./Common/Type.h	106;"	d
ISSET11	./Common/Type.h	107;"	d
ISSET12	./Common/Type.h	108;"	d
ISSET13	./Common/Type.h	109;"	d
ISSET14	./Common/Type.h	110;"	d
ISSET15	./Common/Type.h	111;"	d
ISSET2	./Common/Type.h	98;"	d
ISSET3	./Common/Type.h	99;"	d
ISSET4	./Common/Type.h	100;"	d
ISSET5	./Common/Type.h	101;"	d
ISSET6	./Common/Type.h	102;"	d
ISSET7	./Common/Type.h	103;"	d
ISSET8	./Common/Type.h	104;"	d
ISSET9	./Common/Type.h	105;"	d
ISTESTWORLD	./Common/GameDefine.h	174;"	d
ISVALIDWORLD	./Common/GameDefine.h	176;"	d
ISingleMap	./Common/I_SingleMap.h	/^class ISingleMap$/;"	c
ITEM_LOGIC_FUNC_LEN	./Common/GameDefine.h	111;"	d
I_MT_CLIENTSOCKET_H	./NetBase/MulitThreadNetBase/I_MTClientSocket.h	13;"	d
I_MT_LISTEN_SOCKET_H	./NetBase/MulitThreadNetBase/I_MTListenSocket.h	13;"	d
I_MT_SERVER_SOCKET_H	./NetBase/MulitThreadNetBase/I_MTServerSocket.h	13;"	d
IncInterval	./Common/TimeOut.h	/^	void	IncInterval	(int nMilliSecs, int nLimit)		{ m_nInterval = ::CutOverflow(m_nInterval+nMilliSecs, nLimit); }$/;"	f	class:CTimeOutMS_
IncInterval	./Common/TimeOut.h	/^	void	IncInterval	(int nSecs, int nLimit)	{ m_nInterval = ::CutOverflow(m_nInterval+nSecs, nLimit); }$/;"	f	class:CTimeOut_
Init	./Base/Log.cpp	/^BOOL Log::Init( )$/;"	f	class:Log
Init	./Base/TimeManager.cpp	/^BOOL TimeManager::Init()$/;"	f	class:TimeManager
Init	./Base/logger.cpp	/^void Logger::Init(std::string logName, LOG_LEVEL level, bool toFile){$/;"	f	class:Logger
Init	./Common/Config.h	/^	VOID Init()$/;"	f	struct:ST_CONFIG
Init	./Common/Config.h	/^	VOID Init()$/;"	f	struct:_CLIENT_DATA
Init	./Common/Config.h	/^	VOID Init()$/;"	f	struct:_SERVER_DATA
Init	./Common/Config.h	/^	VOID Init()$/;"	f	struct:_SERVER_WORLD
Init	./Common/PacketFactoryManager.cpp	/^BOOL PacketFactoryManager::Init()$/;"	f	class:PacketFactoryManager
Init	./Main/BattleTeam.cpp	/^VOID CBattleTeam::Init()$/;"	f	class:CBattleTeam
Init	./Main/ClientManager.cpp	/^BOOL ClientManager::Init()$/;"	f	class:ClientManager
Init	./Main/ClientPlayer.cpp	/^BOOL ClientPlayer::Init()$/;"	f	class:ClientPlayer
Init	./Main/ClientPool.cpp	/^BOOL ClientPool::Init(UINT ClientPoolMaxCount \/*= MAX_CLIENT_POOL_SIZE*\/)$/;"	f	class:ClientPool
Init	./Main/PlayerPool.cpp	/^BOOL PlayerPool::Init(UINT PlayerPoolMaxCount \/*= MAX_POOL_SIZE*\/)$/;"	f	class:PlayerPool
Init	./Main/ServerManager.cpp	/^BOOL ServerManager::Init()$/;"	f	class:ServerManager
Init	./Main/ServerPlayer.cpp	/^BOOL ServerPlayer::Init()$/;"	f	class:ServerPlayer
Init	./Main/World.cpp	/^BOOL World::Init()$/;"	f	class:World
InitLog	./Common/Common.cpp	/^void InitLog(const char * pTitle, const char * pFilename, time_t tStart)$/;"	f
InitReconnectToACC	./Main/ClientManager.cpp	/^BOOL ClientManager::InitReconnectToACC()$/;"	f	class:ClientManager
InitReconnectToMTS	./Main/ClientManager.cpp	/^BOOL ClientManager::InitReconnectToMTS()$/;"	f	class:ClientManager
InitReconnectToPW	./Main/ClientManager.cpp	/^BOOL ClientManager::InitReconnectToPW()$/;"	f	class:ClientManager
InitSize	./NetBase/SocketInputStream.cpp	/^VOID SocketInputStream::InitSize()$/;"	f	class:SocketInputStream
InitSize	./NetBase/SocketOutputStream.cpp	/^VOID SocketOutputStream::InitSize()$/;"	f	class:SocketOutputStream
InitStaticManager	./Main/World.cpp	/^BOOL World::InitStaticManager()$/;"	f	class:World
Input	./websocket/sha1.cpp	/^void SHA1::Input(   const char  *message_array,$/;"	f	class:SHA1
Input	./websocket/sha1.cpp	/^void SHA1::Input(   const unsigned char *message_array,$/;"	f	class:SHA1
Input	./websocket/sha1.cpp	/^void SHA1::Input(char message_element)$/;"	f	class:SHA1
Input	./websocket/sha1.cpp	/^void SHA1::Input(unsigned char message_element)$/;"	f	class:SHA1
Insert	./DataBase/DBMySql.cpp	/^int DBMySql::Insert(const std::string& str)$/;"	f	class:DBMySql
Instance	./Base/logger.cpp	/^Logger& Logger::Instance(){$/;"	f	class:Logger
Int64	./Common/Type.h	/^}Int64;$/;"	t	typeref:struct:_Int64
InviteMemberJoinTeam	./Main/Battle.cpp	/^BOOL CBattle::InviteMemberJoinTeam(INT nModelType, Player* pMember, INT nTeamid, UINT& nAmount)$/;"	f	class:CBattle
IsACCActive	./Main/ClientManager.h	/^	BOOL				IsACCActive()					{ 	return m_bACCActive; 		} $/;"	f	class:ClientManager
IsAccept	./Main/ServerManager.cpp	/^BOOL ServerManager::IsAccept(Socket* pSocket)$/;"	f	class:ServerManager
IsActive	./Common/TimeOut.h	/^	bool	IsActive	()						{ return m_tUpdateTime != 0; }$/;"	f	class:CTimeOutMS_
IsActive	./Common/TimeOut.h	/^	bool	IsActive	()						{ return m_tUpdateTime != 0; }$/;"	f	class:CTimeOut_
IsActive	./Main/ClientManager.h	/^	BOOL				IsActive()						{ 	return m_bActive; 			} $/;"	f	class:ClientManager
IsActive	./Main/ServerManager.h	/^	BOOL 	IsActive()						{  return m_bActive;	}$/;"	f	class:ServerManager
IsActive	./Main/World.h	/^	BOOL 	IsActive()						{  return m_bActive;	}$/;"	f	class:World
IsActiveTime	./Common/Common.cpp	/^bool IsActiveTime(time_t tCurr, unsigned long nFormat)		\/\/ DDWWHHMMSS$/;"	f
IsBetween	./Common/Common.cpp	/^bool IsBetween(int nCurr, int nBegin, int nEnd)$/;"	f
IsClientPlayer	./Main/ClientPlayer.h	/^	virtual BOOL IsClientPlayer()		{	return TRUE;	}				$/;"	f	class:ClientPlayer
IsClientPlayer	./Main/ServerPlayer.h	/^	virtual BOOL IsClientPlayer()		{	return FALSE;	}			$/;"	f	class:ServerPlayer
IsDisconnect	./Main/Player.h	/^	BOOL 				IsDisconnect()	{ 	 return m_IsDisconnect;	}$/;"	f	class:Player
IsEmpty	./Main/Player.h	/^	BOOL 				IsEmpty()	{ 	return m_IsEmpty; }$/;"	f	class:Player
IsEmpty	./NetBase/SocketInputStream.h	/^	BOOL		IsEmpty() const						{	return 	m_Head == m_Tail;	}$/;"	f	class:SocketInputStream
IsEmpty	./NetBase/SocketOutputStream.h	/^	BOOL		IsEmpty() const						{	return 	m_Head == m_Tail;	}$/;"	f	class:SocketOutputStream
IsException	./Main/ServerManager.cpp	/^BOOL ServerManager::IsException(Socket* pSocket)$/;"	f	class:ServerManager
IsFightConfusionFinsh	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::IsFightConfusionFinsh()$/;"	f	class:CBattleTeam
IsFightFinish	./Main/BattleTeam.h	/^    BOOL   IsFightFinish()                                  {   return FALSE;                           }$/;"	f	class:CBattleTeam
IsFightTeamFinsh	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::IsFightTeamFinsh()$/;"	f	class:CBattleTeam
IsFullConnect	./Main/ServerManager.cpp	/^BOOL ServerManager::IsFullConnect()$/;"	f	class:ServerManager
IsGamePlayer	./Main/ClientPlayer.h	/^	virtual BOOL IsGamePlayer()			{	return FALSE;	}$/;"	f	class:ClientPlayer
IsGamePlayer	./Main/ServerPlayer.h	/^	virtual BOOL IsGamePlayer()			{	return FALSE;	}$/;"	f	class:ServerPlayer
IsMTSActive	./Main/ClientManager.h	/^	BOOL				IsMTSActive()					{ 	return m_bMTSActive; 		} $/;"	f	class:ClientManager
IsNeedConnectACC	./Main/ClientManager.h	/^	BOOL                IsNeedConnectACC()				{	return g_config.ACC_CONNECT_OPEN != 0 ? TRUE : FALSE;	}$/;"	f	class:ClientManager
IsNeedConnectMTS	./Main/ClientManager.h	/^	BOOL                IsNeedConnectMTS()				{	return g_config.MTS_CONNECT_OPEN != 0 ? TRUE : FALSE;	}$/;"	f	class:ClientManager
IsNeedConnectPW	./Main/ClientManager.h	/^	BOOL                IsNeedConnectPW()				{	return g_config.PW_CONNECT_OPEN != 0 ? TRUE : FALSE;	}$/;"	f	class:ClientManager
IsOpen	./NetBase/MulitThreadNetBase/MTClientSocket.cpp	/^bool CClientSocket::IsOpen()$/;"	f	class:CClientSocket
IsOpen	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	virtual BOOL 				IsOpen()													{	if (m_sock == INVALID_SOCKET) return FALSE; return TRUE;	}$/;"	f	class:CMTServerSocket
IsPWActive	./Main/ClientManager.h	/^	BOOL				IsPWActive()					{ 	return m_bPWActive; 		} $/;"	f	class:ClientManager
IsQuickMatchTimeout	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::IsQuickMatchTimeout()$/;"	f	class:CBattleTeam
IsReady	./Main/ServerManager.cpp	/^BOOL ServerManager::IsReady(Socket* pSocket)$/;"	f	class:ServerManager
IsServerPlayer	./Main/ClientPlayer.h	/^	virtual BOOL IsServerPlayer()		{	return FALSE;	}$/;"	f	class:ClientPlayer
IsServerPlayer	./Main/ServerPlayer.h	/^	virtual BOOL IsServerPlayer()		{	return TRUE;	}	$/;"	f	class:ServerPlayer
IsSetTimer	./Base/GameUtil.h	/^	BOOL IsSetTimer( ){ return m_bOper ; }$/;"	f	class:CMyTimer
IsTeamMember	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::IsTeamMember(Player* pPlayer)$/;"	f	class:CBattleTeam
IsTimeOut	./Common/TimeOut.h	/^	bool	IsTimeOut	()						{ return (clock()\/1000) >= m_tUpdateTime+m_nInterval; }$/;"	f	class:CTimeOutMS_
IsTimeOut	./Common/TimeOut.h	/^	bool	IsTimeOut	()						{ return (clock()\/CLOCKS_PER_SEC) >= m_tUpdateTime+m_nInterval; }$/;"	f	class:CTimeOut_
IsTimeOut	./Common/TimeOut.h	/^	bool	IsTimeOut	(int nMilliSecs)		{ return (clock()\/1000) >= m_tUpdateTime+nMilliSecs; }$/;"	f	class:CTimeOutMS_
IsTimeOut	./Common/TimeOut.h	/^	bool	IsTimeOut	(int nSecs)				{ return (clock()\/CLOCKS_PER_SEC) >= m_tUpdateTime+nSecs; }$/;"	f	class:CTimeOut_
IsTimeRange	./Common/Common.cpp	/^bool IsTimeRange(unsigned long nBegin, unsigned long nEnd, time_t tCurr\/*=0*\/)		\/\/ DDWWHHMMSS$/;"	f
IsValid	./Main/ClientPlayer.cpp	/^BOOL ClientPlayer::IsValid()$/;"	f	class:ClientPlayer
IsValid	./Main/Player.cpp	/^BOOL Player::IsValid()$/;"	f	class:Player
IsValid	./Main/ServerPlayer.cpp	/^BOOL ServerPlayer::IsValid()$/;"	f	class:ServerPlayer
IsWrite	./Main/ServerManager.cpp	/^BOOL ServerManager::IsWrite(Socket* pSocket)$/;"	f	class:ServerManager
ItemInfo	./Main/BattleTeam.h	/^struct ItemInfo$/;"	s
Iter	./Common/I_SingleMap.h	/^	typedef	MAPINDEX::iterator	Iter;$/;"	t	class:ISingleMap
Iterator	./Common/SingleMap.h	/^		Iterator(MAP_SET* pSet) : m_pSet(pSet),m_iter(pSet->begin()),m_pObj(0) {}$/;"	f	class:CSingleMap::Iterator
Iterator	./Common/SingleMap.h	/^	class	Iterator{$/;"	c	class:CSingleMap
KEY_SIZE	./Common/BaseType.h	160;"	d
LENGTH	./Common/GameDefine.h	181;"	d
LOCKOBJ	./Common/Common.h	249;"	d
LOCKOBJ	./Common/Common.h	258;"	d
LOCKOBJ_EX	./Common/Common.h	247;"	d
LOG	./Base/logger.h	20;"	d
LOGCATCH	./Common/Common.h	116;"	d
LOGCLIENT	./Common/Common.h	117;"	d
LOGCRITICAL	./Base/logger.h	39;"	d
LOGDEBUG	./Common/Common.h	112;"	d
LOGERROR	./Common/Common.h	115;"	d
LOGFATAL	./Base/logger.h	42;"	d
LOGFILE_DIR	./Common/BaseType.h	313;"	d
LOGFILE_FILENAME	./Common/BaseType.h	314;"	d
LOGGER_H_	./Base/logger.h	12;"	d
LOGINFO	./Base/logger.h	28;"	d
LOGIN_LOGFILE	./Base/Log.h	41;"	d
LOGIN_RESULT	./MsgHandler/MsgLogin.h	/^enum LOGIN_RESULT$/;"	g
LOGMSG	./Common/Common.h	114;"	d
LOGWARN	./Base/logger.h	32;"	d
LOGWARNING	./Common/Common.h	113;"	d
LOG_CRITICAL	./Base/logger.h	57;"	d
LOG_DEBUG	./Base/logger.h	45;"	d
LOG_ERROR	./Base/logger.h	54;"	d
LOG_FATAL	./Base/logger.h	60;"	d
LOG_FILE_0	./Base/Log.h	/^	LOG_FILE_0 =0 ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_1	./Base/Log.h	/^	LOG_FILE_1 =1 ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_10	./Base/Log.h	/^	LOG_FILE_10 =10,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_11	./Base/Log.h	/^	LOG_FILE_11 =11,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_12	./Base/Log.h	/^	LOG_FILE_12 =12,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_13	./Base/Log.h	/^	LOG_FILE_13 =13,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_2	./Base/Log.h	/^	LOG_FILE_2 =2 ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_3	./Base/Log.h	/^	LOG_FILE_3 =3 ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_4	./Base/Log.h	/^	LOG_FILE_4 =4 ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_5	./Base/Log.h	/^	LOG_FILE_5 =5 ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_6	./Base/Log.h	/^	LOG_FILE_6 =6 ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_7	./Base/Log.h	/^	LOG_FILE_7 =7 ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_8	./Base/Log.h	/^	LOG_FILE_8 =8 ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_9	./Base/Log.h	/^	LOG_FILE_9 =9 ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_FILE_NAME_ID	./Base/Log.h	/^enum LOG_FILE_NAME_ID$/;"	g
LOG_FILE_NUMBER	./Base/Log.h	/^	LOG_FILE_NUMBER ,$/;"	e	enum:LOG_FILE_NAME_ID
LOG_INFO	./Base/logger.h	48;"	d
LOG_LEVEL	./Base/logger.h	/^enum LOG_LEVEL$/;"	g
LOG_WARN	./Base/logger.h	51;"	d
LONG	./Common/BaseType.h	/^typedef	long 	LONG;									\/\/标准有符号long$/;"	t
LOSEDATA	./Common/Common.cpp	/^void LOSEDATA(const char * sFormat, ...)$/;"	f
LPCSTR	./Common/Type.h	/^	typedef const char* LPCSTR;$/;"	t
LPCTSTR	./Common/BaseType.h	/^typedef const CHAR* LPCTSTR;$/;"	t
LeaveTime	./Common/TimeOut.h	/^	int		LeaveTime()							{ return (clock()\/1000) -m_tUpdateTime-m_nInterval; }$/;"	f	class:CTimeOutMS_
Length	./NetBase/SocketInputStream.cpp	/^UINT SocketInputStream::Length() const$/;"	f	class:SocketInputStream
Length	./NetBase/SocketOutputStream.cpp	/^UINT SocketOutputStream::Length() const$/;"	f	class:SocketOutputStream
Length_High	./websocket/sha1.h	/^        unsigned Length_High;               \/\/ Message length in bits$/;"	m	class:SHA1
Length_Low	./websocket/sha1.h	/^        unsigned Length_Low;                \/\/ Message length in bits$/;"	m	class:SHA1
Listen	./NetBase/MulitThreadNetBase/MTListenSocket.cpp	/^INT CMTListenSocket::Listen(INT nPort, INT nAddr = 0, INT nSndBuffSize = 0, INT nRevBuffSize = 0)$/;"	f	class:CMTListenSocket
Listen	./NetBase/ServerSocket.cpp	/^BOOL ServerSocket::Listen(UINT backlog \/*= MAX_BACKLOG*\/)$/;"	f	class:ServerSocket
LoadInfo	./Main/UserData.cpp	/^BOOL CUserData::LoadInfo()$/;"	f	class:CUserData
Lock	./Base/GameUtil.h	/^		VOID	Lock( ){ EnterCriticalSection(&m_Lock); } ;$/;"	f	class:MyLock
Lock	./Base/GameUtil.h	/^		VOID	Lock( ){ pthread_mutex_lock(&m_Mutex); } ;$/;"	f	class:MyLock
Lock	./Common/MyAutoMutex.cpp	/^BOOL CMyAutoMutex::Lock()$/;"	f	class:CMyAutoMutex
Lock	./Common/PacketFactoryManager.h	/^	VOID				Lock(){ m_Lock.Lock(); }$/;"	f	class:PacketFactoryManager
Lock	./Main/ClientPool.h	/^	void				Lock()								{	m_Lock.Lock();		} $/;"	f	class:ClientPool
Lock	./Main/PlayerPool.h	/^	void				Lock()								{	m_Lock.Lock();		} $/;"	f	class:PlayerPool
LockMyMutexOBJ	./Common/MyAutoMutex.h	60;"	d
Log	./Base/Log.cpp	/^Log::Log( )$/;"	f	class:Log
Log	./Base/Log.h	/^class Log$/;"	c
Log	./Base/logger.cpp	/^void Logger::Log(LOG_LEVEL level, std::string filename, int lineno, const char *fmt, ...){$/;"	f	class:Logger
LogSave	./Common/Common.cpp	/^void LogSave (const char* fmt, ...)$/;"	f
Logger	./Base/logger.h	/^        Logger():$/;"	f	class:Logger
Logger	./Base/logger.h	/^class Logger{$/;"	c
Loop	./Main/Battle.cpp	/^BOOL CBattle::Loop()$/;"	f	class:CBattle
Loop	./Main/BattleManager.cpp	/^BOOL CBattleManager::Loop()$/;"	f	class:CBattleManager
Loop	./Main/ClientManager.cpp	/^BOOL ClientManager::Loop()$/;"	f	class:ClientManager
Loop	./Main/ServerManager.cpp	/^BOOL ServerManager::Loop()$/;"	f	class:ServerManager
Loop	./Main/World.cpp	/^BOOL World::Loop()$/;"	f	class:World
MAGIC_KEY	./websocket/websocket_handler.h	15;"	d
MAKE_COLOR	./Common/GameDefine.h	185;"	d
MAPGROUP_ONTIMER_MS	./Common/BaseType.h	/^const int	MAPGROUP_ONTIMER_MS		= 500;			\/\/ 地图组线程的ONTIMER频率$/;"	v
MAPINDEX	./Common/I_SingleMap.h	/^	typedef	map<OBJID, T*> MAPINDEX;	$/;"	t	class:ISingleMap
MAP_ITER	./Common/SingleMap.h	/^	typedef	MAP_SET::iterator	MAP_ITER;$/;"	t	class:CSingleMap
MAP_SET	./Common/SingleMap.h	/^	typedef	map<OBJID, T*>		MAP_SET;$/;"	t	class:CSingleMap
MAX_ACCOUNT	./Common/GameDefine.h	46;"	d
MAX_BACKLOG	./Common/BaseType.h	/^const int MAX_BACKLOG = 512;$/;"	v
MAX_BAG_SIZE	./Common/GameDefine.h	73;"	d
MAX_BANK_MONEY	./Common/GameDefine.h	94;"	d
MAX_BOX_OP_DISTANCE	./Common/GameDefine.h	71;"	d
MAX_CHARACTER_INPUTNAME	./Common/GameDefine.h	35;"	d
MAX_CHARACTER_NAME	./Common/GameDefine.h	43;"	d
MAX_CHAR_CAN_PICK_MISSION_ITEM_NUM	./Common/GameDefine.h	123;"	d
MAX_CLIENT_DEFAULT_EVENT_DIST	./Common/GameDefine.h	137;"	d
MAX_CLIENT_DEFAULT_EVENT_DIST_SQ	./Common/GameDefine.h	143;"	d
MAX_CLIENT_POOL_SIZE	./Main/ClientPool.h	24;"	d
MAX_CREATE_PLAYER_NUM	./Common/GameDefine.h	52;"	d
MAX_EXTBAG_SIZE	./Common/GameDefine.h	75;"	d
MAX_FILE_PATH	./Common/GameDefine.h	183;"	d
MAX_GROW_POINT_RATE_NUM	./Common/GameDefine.h	109;"	d
MAX_KICK_TIME	./Main/Player.h	53;"	d
MAX_LOGIC_FUNC_LEN	./Common/GameDefine.h	110;"	d
MAX_MEDIC_EFFECT_NUM	./Common/GameDefine.h	107;"	d
MAX_NPC_DISTANCE	./Common/GameDefine.h	77;"	d
MAX_OPEN_ITEMBOX_DIST	./Common/GameDefine.h	131;"	d
MAX_OPEN_ITEMBOX_DIST_SQ	./Common/GameDefine.h	134;"	d
MAX_PASSWORD	./Common/GameDefine.h	49;"	d
MAX_PLAYER	./Common/BaseType.h	238;"	d
MAX_POOL_SIZE	./Common/BaseType.h	243;"	d
MAX_RADIUS	./Common/GameDefine.h	64;"	d
MAX_REFESH_OBJ_ZONE_ARRAY_SIZE	./Common/GameDefine.h	68;"	d
MAX_REFESH_OBJ_ZONE_RADIUS	./Common/GameDefine.h	66;"	d
MAX_SCENE_GP_OWNER	./Common/GameDefine.h	114;"	d
MAX_SCENE_GROW_POINT_NUM	./Common/GameDefine.h	112;"	d
MAX_SEND_TIME	./Common/GameDefine.h	61;"	d
MAX_SERVER_DEFAULT_EVENT_DIST	./Common/GameDefine.h	140;"	d
MAX_SERVER_DEFAULT_EVENT_DIST_SQ	./Common/GameDefine.h	146;"	d
MAX_SHOP_NUM_PER_PLAYER	./Common/GameDefine.h	103;"	d
MAX_SHOP_NUM_PER_SCENE	./Common/GameDefine.h	100;"	d
MAX_SKILLOBJ_NUMBER	./Common/GameDefine.h	126;"	d
MAX_TABLE_DEFINE_LEVEL	./Common/GameDefine.h	117;"	d
MAX_WEBSHOPINFO_NUMBER	./Common/GameDefine.h	128;"	d
MAX_WORLD	./Common/GameDefine.h	30;"	d
MAX_WORLDCOUNT	./Common/BaseType.h	161;"	d
MAX_WORLD_USER	./Common/GameDefine.h	32;"	d
MODEL_PART	./Common/Type.h	/^	typedef unsigned __int64 MODEL_PART;$/;"	t
MODEL_PART	./Common/Type.h	/^	typedef unsigned long long MODEL_PART;$/;"	t
MSGMAXLEN	./websocket/websocket_respond.h	7;"	d
MSG_ACTION	./websocket/protocol.h	/^        MSG_ACTION,$/;"	e	enum:_PROTOCOL_PACKET_TYPE
MSG_BATTLE	./websocket/protocol.h	/^        MSG_BATTLE = 2001,$/;"	e	enum:_PROTOCOL_PACKET_TYPE
MSG_EXCHANGE	./websocket/protocol.h	/^        MSG_EXCHANGE,$/;"	e	enum:_PROTOCOL_PACKET_TYPE
MSG_ITEM	./websocket/protocol.h	/^        MSG_ITEM,$/;"	e	enum:_PROTOCOL_PACKET_TYPE
MSG_VAS	./websocket/protocol.h	/^        MSG_VAS,$/;"	e	enum:_PROTOCOL_PACKET_TYPE
MTS2AS_CLIENT_LOGIN	./Protocol/Command.h	/^    MTS2AS_CLIENT_LOGIN		=   902,  \/\/ MTS回复给AIserver的消息包,$/;"	e	enum:Command
MTS2C_AICHAT	./Protocol/Command.h	/^    MTS2C_AICHAT            =   901,  \/\/ MTS给客户端的自然语言数据$/;"	e	enum:Command
MTS2GS_CREATE_ROBOT	./Protocol/Command.h	/^	MTS2GS_CREATE_ROBOT		=	701, \/\/ 创建机器人回复$/;"	e	enum:Command
MTS2GS_GET_ROBOT_LIST	./Protocol/Command.h	/^	MTS2GS_GET_ROBOT_LIST	=	700, \/\/ 机器人查询回复$/;"	e	enum:Command
MTS2TES_EXPRESSION_NODE	./Protocol/Command.h	/^	MTS2TES_EXPRESSION_NODE	=	900,$/;"	e	enum:Command
MTS_BROKER_SUBCRIBE	./Protocol/Command.h	/^    MTS_BROKER_SUBCRIBE     =   65533, \/\/MTS broker程序worker订阅消息的命令.$/;"	e	enum:Command
MTS_CONNECT_OPEN	./Common/Config.h	/^	INT 	MTS_CONNECT_OPEN;$/;"	m	struct:ST_CONFIG
MTS_IP	./Common/Config.h	/^	CHAR	MTS_IP[IPSTR_SIZE];$/;"	m	struct:ST_CONFIG
MTS_LOG_OPEN	./Common/Config.h	/^	INT 	MTS_LOG_OPEN;$/;"	m	struct:ST_CONFIG
MTS_PORT	./Common/Config.h	/^	INT		MTS_PORT;$/;"	m	struct:ST_CONFIG
MTS_RCV_SIZE	./Common/Config.h	/^	INT 	MTS_RCV_SIZE;$/;"	m	struct:ST_CONFIG
MTS_SERVER	./Main/Player.h	/^	MTS_SERVER = 2,$/;"	e	enum:SendToServer
MTS_SERVER_NUM	./Main/Player.h	50;"	d
MTS_SND_SIZE	./Common/Config.h	/^	INT 	MTS_SND_SIZE;$/;"	m	struct:ST_CONFIG
MYQUEUE_H	./Common/T_MyQueue.h	14;"	d
MY_CATCH	./Common/BaseType.h	431;"	d
MY_CATCH	./Common/BaseType.h	434;"	d
MY_TRY	./Common/BaseType.h	430;"	d
MY_TRY	./Common/BaseType.h	433;"	d
MatchMemberToTeam	./Main/Battle.cpp	/^BOOL CBattle::MatchMemberToTeam(INT nModelType, INT nTeamid, UINT& nAmount)$/;"	f	class:CBattle
MathcEnemyFightTeam	./Main/Battle.cpp	/^CBattleTeam* CBattle::MathcEnemyFightTeam(CBattleTeam* pbt)$/;"	f	class:CBattle
Message_Block	./websocket/sha1.h	/^        unsigned char Message_Block[64];    \/\/ 512-bit message blocks$/;"	m	class:SHA1
Message_Block_Index	./websocket/sha1.h	/^        int Message_Block_Index;            \/\/ Index into message block array$/;"	m	class:SHA1
MyGetCurrentThreadID	./Base/GameUtil.cpp	/^TID MyGetCurrentThreadID( )$/;"	f
MyLock	./Base/GameUtil.h	/^		MyLock( ){ InitializeCriticalSection(&m_Lock); } ;$/;"	f	class:MyLock
MyLock	./Base/GameUtil.h	/^		MyLock( ){ pthread_mutex_init( &m_Mutex , NULL );} ;$/;"	f	class:MyLock
MyLock	./Base/GameUtil.h	/^	class MyLock$/;"	c
MySleep	./Base/GameUtil.cpp	/^VOID MySleep( UINT millionseconds )$/;"	f
NAMESTR	./Common/BaseType.h	/^typedef CHAR NAMESTR[_MAX_NAMESIZE];$/;"	t
NAME_SIZE	./Common/BaseType.h	301;"	d
NewClient	./Main/ClientPool.cpp	/^ClientPlayer* ClientPool::NewClient()$/;"	f	class:ClientPool
NewEnum	./Common/SingleMap.h	/^	Iterator	NewEnum		() 						{ return Iterator(&m_map); }$/;"	f	class:CSingleMap
NewPlayer	./Main/PlayerPool.cpp	/^ServerPlayer* PlayerPool::NewPlayer()$/;"	f	class:PlayerPool
NewStaticManager	./Main/World.cpp	/^BOOL World::NewStaticManager()$/;"	f	class:World
Next	./Common/SingleMap.h	/^		bool	Next()		{ if(m_iter==m_pSet->end()) return m_pObj=NULL,false; ASSERT(m_pObj=m_iter->second); m_iter++; return true; }$/;"	f	class:CSingleMap::Iterator
ONLINE_BIND_PORT_CONNECT_ACC	./Common/Config.h	/^	INT 	ONLINE_BIND_PORT_CONNECT_ACC;$/;"	m	struct:ST_CONFIG
ONLINE_BIND_PORT_CONNECT_MTS	./Common/Config.h	/^	INT 	ONLINE_BIND_PORT_CONNECT_MTS;$/;"	m	struct:ST_CONFIG
ONLINE_BIND_PORT_CONNECT_PW	./Common/Config.h	/^	INT 	ONLINE_BIND_PORT_CONNECT_PW;$/;"	m	struct:ST_CONFIG
ONLINE_DEFAULT_INPUT_BUFFER_SIZE	./Common/Config.h	/^	INT		ONLINE_DEFAULT_INPUT_BUFFER_SIZE;$/;"	m	struct:ST_CONFIG
ONLINE_DEFAULT_OUTPUT_BUFFER_SIZE	./Common/Config.h	/^	INT		ONLINE_DEFAULT_OUTPUT_BUFFER_SIZE;$/;"	m	struct:ST_CONFIG
ONLINE_DISCONNECT_INPUT_BUFFER_SIZE	./Common/Config.h	/^	INT		ONLINE_DISCONNECT_INPUT_BUFFER_SIZE;$/;"	m	struct:ST_CONFIG
ONLINE_DISCONNECT_OUTPUT_BUFFER_SIZE	./Common/Config.h	/^	INT		ONLINE_DISCONNECT_OUTPUT_BUFFER_SIZE;$/;"	m	struct:ST_CONFIG
ONLINE_HEART_BEAT_DETECTION	./Common/Config.h	/^	INT     ONLINE_HEART_BEAT_DETECTION;$/;"	m	struct:ST_CONFIG
ONLINE_HEART_BEAT_DETECTION_USER	./Common/Config.h	/^	INT     ONLINE_HEART_BEAT_DETECTION_USER;$/;"	m	struct:ST_CONFIG
ONLINE_IP	./Common/Config.h	/^	CHAR	ONLINE_IP[IPSTR_SIZE];$/;"	m	struct:ST_CONFIG
ONLINE_LISTEN_IPV_MODULE	./Common/Config.h	/^	INT 	ONLINE_LISTEN_IPV_MODULE;$/;"	m	struct:ST_CONFIG
ONLINE_LOG_OPEN	./Common/Config.h	/^	INT 	ONLINE_LOG_OPEN;$/;"	m	struct:ST_CONFIG
ONLINE_MAPGROUP_SIZE	./Common/Config.h	/^	INT 	ONLINE_MAPGROUP_SIZE;$/;"	m	struct:ST_CONFIG
ONLINE_PORT	./Common/Config.h	/^	INT		ONLINE_PORT;$/;"	m	struct:ST_CONFIG
ONLINE_RCV_SIZE	./Common/Config.h	/^	INT 	ONLINE_RCV_SIZE;$/;"	m	struct:ST_CONFIG
ONLINE_RECONNECT_INTERVAL_TIME_TO_ACC	./Common/Config.h	/^	INT     ONLINE_RECONNECT_INTERVAL_TIME_TO_ACC;$/;"	m	struct:ST_CONFIG
ONLINE_RECONNECT_INTERVAL_TIME_TO_MTS	./Common/Config.h	/^	INT     ONLINE_RECONNECT_INTERVAL_TIME_TO_MTS;$/;"	m	struct:ST_CONFIG
ONLINE_RECONNECT_INTERVAL_TIME_TO_PW	./Common/Config.h	/^	INT     ONLINE_RECONNECT_INTERVAL_TIME_TO_PW;$/;"	m	struct:ST_CONFIG
ONLINE_REGIST_INDEX	./Common/Config.h	/^	INT 	ONLINE_REGIST_INDEX;$/;"	m	struct:ST_CONFIG
ONLINE_REPORT_INTERVAL_TIME	./Common/Config.h	/^	INT     ONLINE_REPORT_INTERVAL_TIME;$/;"	m	struct:ST_CONFIG
ONLINE_SERVER_NAME	./Common/Config.h	/^	CHAR 	ONLINE_SERVER_NAME[_MAX_NAMESIZE];$/;"	m	struct:ST_CONFIG
ONLINE_SND_SIZE	./Common/Config.h	/^	INT 	ONLINE_SND_SIZE;$/;"	m	struct:ST_CONFIG
ONLINE_SOCK_LISTEN_ADDR	./Common/Config.h	/^	CHAR	ONLINE_SOCK_LISTEN_ADDR[IPSTR_SIZE];$/;"	m	struct:ST_CONFIG
ONLINE_ULIMIT_N	./Common/Config.h	/^	INT 	ONLINE_ULIMIT_N;$/;"	m	struct:ST_CONFIG
OVER_MAX_SERVER	./Common/Config.h	68;"	d
ObjID_t	./Common/Type.h	/^typedef UINT	ObjID_t;			$/;"	t
Open	./NetBase/MulitThreadNetBase/MTClientSocket.cpp	/^bool CMTClientSocket::Open(const char* szName, int nPort, int nBlockSecs \/*= 0*\/, int nSndBuf \/*= 0*\/, int nRcvBuf \/*= 0*\/, const char* szClientIP\/* = NULL*\/)$/;"	f	class:CMTClientSocket
PACKET_C2ACC_CHECK_ACCOUNT	./NetBase/PacketDefine.h	/^		PACKET_C2ACC_CHECK_ACCOUNT ,								\/\/前端发送检查账号信息到账号服务器$/;"	e	enum:Packets::PACKET_DEFINE
PACKET_C2ACC_REGISTER	./NetBase/PacketDefine.h	/^		PACKET_C2ACC_REGISTER ,										\/\/前端发送注册请求到账号服务器$/;"	e	enum:Packets::PACKET_DEFINE
PACKET_C2ACC_TEST	./NetBase/PacketDefine.h	/^	\/* ID:1 *\/PACKET_C2ACC_TEST ,$/;"	e	enum:Packets::PACKET_DEFINE
PACKET_DEFINE	./NetBase/PacketDefine.h	/^	enum PACKET_DEFINE$/;"	g	namespace:Packets
PACKET_EXE	./MsgHandler/NetMsg.h	/^enum PACKET_EXE$/;"	g
PACKET_EXE	./NetBase/NetMsg.h	/^enum PACKET_EXE$/;"	g
PACKET_EXE_BREAK	./MsgHandler/NetMsg.h	/^	PACKET_EXE_BREAK,$/;"	e	enum:PACKET_EXE
PACKET_EXE_BREAK	./NetBase/NetMsg.h	/^	PACKET_EXE_BREAK,$/;"	e	enum:PACKET_EXE
PACKET_EXE_CONTINUE	./MsgHandler/NetMsg.h	/^	PACKET_EXE_CONTINUE,$/;"	e	enum:PACKET_EXE
PACKET_EXE_CONTINUE	./NetBase/NetMsg.h	/^	PACKET_EXE_CONTINUE,$/;"	e	enum:PACKET_EXE
PACKET_EXE_ERROR	./MsgHandler/NetMsg.h	/^	PACKET_EXE_ERROR = 0,			\/\/出现异常错误，断开此玩家连接$/;"	e	enum:PACKET_EXE
PACKET_EXE_ERROR	./NetBase/NetMsg.h	/^	PACKET_EXE_ERROR = 0,			\/\/出现异常错误，断开此玩家连接$/;"	e	enum:PACKET_EXE
PACKET_EXE_NOTREMOVE	./MsgHandler/NetMsg.h	/^	PACKET_EXE_NOTREMOVE,$/;"	e	enum:PACKET_EXE
PACKET_EXE_NOTREMOVE	./NetBase/NetMsg.h	/^	PACKET_EXE_NOTREMOVE,$/;"	e	enum:PACKET_EXE
PACKET_EXE_NOTREMOVE_ERROR	./MsgHandler/NetMsg.h	/^	PACKET_EXE_NOTREMOVE_ERROR,$/;"	e	enum:PACKET_EXE
PACKET_EXE_NOTREMOVE_ERROR	./NetBase/NetMsg.h	/^	PACKET_EXE_NOTREMOVE_ERROR,$/;"	e	enum:PACKET_EXE
PACKET_FLAG	./Main/Player.h	/^enum PACKET_FLAG$/;"	g
PACKET_HEADER_SIZE	./MsgHandler/NetMsg.h	162;"	d
PACKET_HEADER_SIZE	./NetBase/NetMsg.h	137;"	d
PACKET_MAX	./NetBase/PacketDefine.h	/^		PACKET_MAX=50999													\/\/消息类型的最大值$/;"	e	enum:Packets::PACKET_DEFINE
PACKET_NONE	./NetBase/PacketDefine.h	/^		PACKET_NONE = 0 ,						\/\/0，空$/;"	e	enum:Packets::PACKET_DEFINE
PACK_COMPART	./Common/BaseType.h	358;"	d
PACK_COMPART_SIZE	./Common/BaseType.h	359;"	d
PF_NONE	./Main/Player.h	/^	PF_NONE=0,$/;"	e	enum:PACKET_FLAG
PICK_ITEM	./Protocol/Command.h	/^	PICK_ITEM	 	= 2,			\/\/拾取道具$/;"	e	enum:_MSG_ITEM_TYPE
PICK_ITEM	./websocket/protocol.h	/^	PICK_ITEM	 	= 2,			\/\/拾取道具$/;"	e	enum:_MSG_ITEM_TYPE
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	299;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	317;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	323;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	338;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	344;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	347;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	350;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	353;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	356;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	359;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	362;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	365;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	385;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	312;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
PLAYERLIST_SET	./Main/PlayerManager.h	/^	typedef std::map<SOCKET, Player*>	PLAYERLIST_SET;$/;"	t	class:PlayerManager
PLAYER_INFO_STRUCT	./Main/UserData.h	/^enum PLAYER_INFO_STRUCT{$/;"	g
PLAYER_STATUS	./Common/PlayerStatus.h	/^enum PLAYER_STATUS$/;"	g
POLL_SETSIZE	./Common/BaseType.h	214;"	d
PS_BILLING_CONNECT	./Common/PlayerStatus.h	/^	PS_BILLING_CONNECT = 400 ,$/;"	e	enum:PLAYER_STATUS
PS_CLIENT_CONNECT	./Common/PlayerStatus.h	/^	PS_CLIENT_CONNECT ,$/;"	e	enum:PLAYER_STATUS
PS_CLIENT_LOAD	./Common/PlayerStatus.h	/^	PS_CLIENT_LOAD = 200 ,$/;"	e	enum:PLAYER_STATUS
PS_LOGIN_AUTHED	./Common/PlayerStatus.h	/^	PS_LOGIN_AUTHED,				\/\/验证通过的客户端(合法),以后发送GUID就可以$/;"	e	enum:PLAYER_STATUS
PS_LOGIN_CONNECT	./Common/PlayerStatus.h	/^	PS_LOGIN_CONNECT,				\/\/连接并且发送了数据		$/;"	e	enum:PLAYER_STATUS
PS_LOGIN_EMPTY	./Common/PlayerStatus.h	/^	PS_LOGIN_EMPTY			= 300 , \/\/池中数据$/;"	e	enum:PLAYER_STATUS
PS_LOGIN_NORMAL	./Common/PlayerStatus.h	/^	PS_LOGIN_NORMAL ,				\/\/可以逻辑操作客户端。$/;"	e	enum:PLAYER_STATUS
PS_LOGIN_PROCESS_TURN	./Common/PlayerStatus.h	/^	PS_LOGIN_PROCESS_TURN,			\/\/已经在逻辑操作排队队列中客户端$/;"	e	enum:PLAYER_STATUS
PS_LOGIN_SERVER_READY	./Common/PlayerStatus.h	/^	PS_LOGIN_SERVER_READY,			\/\/可以进入Server 的客户端$/;"	e	enum:PLAYER_STATUS
PS_LOGIN_WAIT_AUTH	./Common/PlayerStatus.h	/^	PS_LOGIN_WAIT_AUTH,				\/\/等待login 服务器验证$/;"	e	enum:PLAYER_STATUS
PS_LOGIN_WAIT_PROCESS_TURN	./Common/PlayerStatus.h	/^	PS_LOGIN_WAIT_PROCESS_TURN,		\/\/等待加入逻辑操作排队队列$/;"	e	enum:PLAYER_STATUS
PS_SERVER_ANOTHER_GUID_ALSO_KICK	./Common/PlayerStatus.h	/^	PS_SERVER_ANOTHER_GUID_ALSO_KICK ,$/;"	e	enum:PLAYER_STATUS
PS_SERVER_ANOTHER_GUID_ENTER	./Common/PlayerStatus.h	/^	PS_SERVER_ANOTHER_GUID_ENTER ,$/;"	e	enum:PLAYER_STATUS
PS_SERVER_CONNECT	./Common/PlayerStatus.h	/^	PS_SERVER_CONNECT ,		$/;"	e	enum:PLAYER_STATUS
PS_SERVER_EMPTY	./Common/PlayerStatus.h	/^	PS_SERVER_EMPTY = 100 ,		$/;"	e	enum:PLAYER_STATUS
PS_SERVER_ENTER_RECYCLE	./Common/PlayerStatus.h	/^	PS_SERVER_ENTER_RECYCLE ,$/;"	e	enum:PLAYER_STATUS
PS_SERVER_LEAVE_RECYCLE	./Common/PlayerStatus.h	/^	PS_SERVER_LEAVE_RECYCLE ,$/;"	e	enum:PLAYER_STATUS
PS_SERVER_NORMAL	./Common/PlayerStatus.h	/^	PS_SERVER_NORMAL ,$/;"	e	enum:PLAYER_STATUS
PS_SERVER_READY_TO_ENTER	./Common/PlayerStatus.h	/^	PS_SERVER_READY_TO_ENTER ,	$/;"	e	enum:PLAYER_STATUS
PS_SERVER_WAITING_FOR_CHANGESCENE	./Common/PlayerStatus.h	/^	PS_SERVER_WAITING_FOR_CHANGESCENE ,$/;"	e	enum:PLAYER_STATUS
PS_SERVER_WAITING_FOR_CHANGESCENE_SCENE	./Common/PlayerStatus.h	/^	PS_SERVER_WAITING_FOR_CHANGESCENE_SCENE ,$/;"	e	enum:PLAYER_STATUS
PS_SERVER_WAITING_FOR_ENTER	./Common/PlayerStatus.h	/^	PS_SERVER_WAITING_FOR_ENTER ,	$/;"	e	enum:PLAYER_STATUS
PS_SERVER_WAITING_FOR_SERVER_DATA	./Common/PlayerStatus.h	/^	PS_SERVER_WAITING_FOR_SERVER_DATA ,$/;"	e	enum:PLAYER_STATUS
PS_SERVER_WAITING_FOR_SERVER_DATA_INCOMING	./Common/PlayerStatus.h	/^	PS_SERVER_WAITING_FOR_SERVER_DATA_INCOMING ,$/;"	e	enum:PLAYER_STATUS
PS_SERVER_WAITTING_FOR_ENVREQUEST	./Common/PlayerStatus.h	/^	PS_SERVER_WAITTING_FOR_ENVREQUEST ,$/;"	e	enum:PLAYER_STATUS
PS_WORLD_CONNECT	./Common/PlayerStatus.h	/^	PS_WORLD_CONNECT = 500 ,$/;"	e	enum:PLAYER_STATUS
PS_WORLD_NORMAL	./Common/PlayerStatus.h	/^	PS_WORLD_NORMAL ,$/;"	e	enum:PLAYER_STATUS
PURE_VIRTUAL_DECLARE	./Common/Common.h	267;"	d
PURE_VIRTUAL_DECLARE_0	./Common/Common.h	268;"	d
PURE_VIRTUAL_FUNCTION	./Common/Common.h	133;"	d
PURE_VIRTUAL_FUNCTION	./Common/Common.h	146;"	d
PURE_VIRTUAL_FUNCTION_	./Common/Common.h	134;"	d
PURE_VIRTUAL_FUNCTION_	./Common/Common.h	147;"	d
PURE_VIRTUAL_FUNCTION_0	./Common/Common.h	132;"	d
PURE_VIRTUAL_FUNCTION_0	./Common/Common.h	145;"	d
PW2GS_ALL_WORLD_DATA	./Protocol/Command.h	/^	PW2GS_ALL_WORLD_DATA	=	503,$/;"	e	enum:Command
PW2GS_CREATE_ROBOT	./Protocol/Command.h	/^	PW2GS_CREATE_ROBOT		=	502,$/;"	e	enum:Command
PW2GS_GET_PW_DATA	./Protocol/Command.h	/^	PW2GS_GET_PW_DATA		=	504,$/;"	e	enum:Command
PW2GS_ROBOT_OFFLINE	./Protocol/Command.h	/^	PW2GS_ROBOT_OFFLINE		=	501,$/;"	e	enum:Command
PW2GS_ROBOT_ONLINE	./Protocol/Command.h	/^	PW2GS_ROBOT_ONLINE		=	500,$/;"	e	enum:Command
PW_CONNECT_OPEN	./Common/Config.h	/^	INT 	PW_CONNECT_OPEN;$/;"	m	struct:ST_CONFIG
PW_IP	./Common/Config.h	/^	CHAR	PW_IP[IPSTR_SIZE];$/;"	m	struct:ST_CONFIG
PW_LOG_OPEN	./Common/Config.h	/^	INT 	PW_LOG_OPEN;$/;"	m	struct:ST_CONFIG
PW_PORT	./Common/Config.h	/^	INT		PW_PORT;$/;"	m	struct:ST_CONFIG
PW_RCV_SIZE	./Common/Config.h	/^	INT 	PW_RCV_SIZE;$/;"	m	struct:ST_CONFIG
PW_SERVER	./Main/Player.h	/^	PW_SERVER = 1,$/;"	e	enum:SendToServer
PW_SERVER_NUM	./Main/Player.h	51;"	d
PW_SND_SIZE	./Common/Config.h	/^	INT 	PW_SND_SIZE;$/;"	m	struct:ST_CONFIG
PacketFactory	./Common/PacketFactory.h	/^class PacketFactory$/;"	c
PacketFactoryManager	./Common/PacketFactoryManager.cpp	/^PacketFactoryManager::PacketFactoryManager()$/;"	f	class:PacketFactoryManager
PacketFactoryManager	./Common/PacketFactoryManager.h	/^class PacketFactoryManager$/;"	c
PacketID_t	./Common/BaseType.h	/^typedef UINT PacketID_t;$/;"	t
Packets	./NetBase/PacketDefine.h	/^namespace Packets$/;"	n
PadMessage	./websocket/sha1.cpp	/^void SHA1::PadMessage()$/;"	f	class:SHA1
Peek	./NetBase/SocketInputStream.cpp	/^BOOL SocketInputStream::Peek(CHAR* buf, UINT len)$/;"	f	class:SocketInputStream
PickUpFightItem	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::PickUpFightItem(Player* pPlayer, INT nItemId)$/;"	f	class:CBattleTeam
PickUpFightItem	./Main/Player.cpp	/^BOOL Player::PickUpFightItem(INT nItemId)$/;"	f	class:Player
Player	./Main/Player.cpp	/^Player::Player()$/;"	f	class:Player
Player	./Main/Player.h	/^class Player$/;"	c
PlayerID_t	./Common/Type.h	/^typedef ID_t			PlayerID_t;			\/\/$/;"	t
PlayerInfoStruct	./Main/UserData.h	/^struct  PlayerInfoStruct$/;"	s
PlayerManager	./Main/PlayerManager.cpp	/^PlayerManager::PlayerManager()$/;"	f	class:PlayerManager
PlayerManager	./Main/PlayerManager.h	/^class PlayerManager$/;"	c
PlayerMap	./Main/PlayerPool.h	/^typedef std::map<UInt32, Player*> PlayerMap; $/;"	t
PlayerPool	./Main/PlayerPool.cpp	/^PlayerPool::PlayerPool()$/;"	f	class:PlayerPool
PlayerPool	./Main/PlayerPool.h	/^class PlayerPool$/;"	c
Poll	./Main/ServerManager.cpp	/^INT ServerManager::Poll()$/;"	f	class:ServerManager
PopObj	./Common/SingleMap.h	/^T*	CSingleMap<T>::PopObj(Iterator& iter)$/;"	f	class:CSingleMap
PrescriptionID_t	./Common/Type.h	/^typedef INT				PrescriptionID_t;	$/;"	t
Process	./MsgHandler/MsgAction.cpp	/^UINT CMsgAction::Process(VOID *pInfo)$/;"	f	class:CMsgAction
Process	./MsgHandler/MsgBattle.cpp	/^UINT CMsgBattle::Process(VOID *pInfo)$/;"	f	class:CMsgBattle
Process	./MsgHandler/MsgExchang.cpp	/^UINT CMsgExchang::Process(VOID *pInfo)$/;"	f	class:CMsgExchang
Process	./MsgHandler/MsgItem.cpp	/^UINT CMsgItem::Process(VOID *pInfo)$/;"	f	class:CMsgItem
Process	./MsgHandler/MsgLogin.cpp	/^UINT CMsgLogin::Process(VOID *pInfo)$/;"	f	class:CMsgLogin
Process	./MsgHandler/MsgSynRoomInfo.cpp	/^UINT CMsgSynRoomInfo::Process(VOID *pInfo)$/;"	f	class:CMsgSynRoomInfo
Process	./MsgHandler/MsgUserInfo.cpp	/^UINT CMsgUserInfo::Process(VOID *pInfo)$/;"	f	class:CMsgUserInfo
Process	./MsgHandler/MsgVas.cpp	/^UINT CMsgVas::Process(VOID *pInfo)$/;"	f	class:CMsgVas
Process	./MsgHandler/MsgWalk.cpp	/^UINT CMsgWalk::Process(VOID *pInfo)$/;"	f	class:CMsgWalk
Process	./MsgHandler/NetMsg.cpp	/^UINT CNetMsg::Process ( VOID* pInfo )$/;"	f	class:CNetMsg
ProcessCommand	./Main/ClientPlayer.cpp	/^BOOL ClientPlayer::ProcessCommand(bool Option \/*= true*\/)$/;"	f	class:ClientPlayer
ProcessCommand	./Main/Player.cpp	/^BOOL Player::ProcessCommand(bool Option \/*= true*\/)$/;"	f	class:Player
ProcessCommand	./Main/ServerPlayer.cpp	/^BOOL ServerPlayer::ProcessCommand(bool Option \/*= true*\/)$/;"	f	class:ServerPlayer
ProcessCommands	./Main/ClientManager.cpp	/^BOOL ClientManager::ProcessCommands()$/;"	f	class:ClientManager
ProcessCommands	./Main/ServerManager.cpp	/^BOOL ServerManager::ProcessCommands()$/;"	f	class:ServerManager
ProcessExceptions	./Main/ClientManager.cpp	/^BOOL ClientManager::ProcessExceptions()$/;"	f	class:ClientManager
ProcessExceptions	./Main/ServerManager.cpp	/^BOOL ServerManager::ProcessExceptions()$/;"	f	class:ServerManager
ProcessInput	./Main/ClientPlayer.cpp	/^BOOL ClientPlayer::ProcessInput()$/;"	f	class:ClientPlayer
ProcessInput	./Main/Player.cpp	/^BOOL Player::ProcessInput()$/;"	f	class:Player
ProcessInput	./Main/ServerPlayer.cpp	/^BOOL ServerPlayer::ProcessInput()$/;"	f	class:ServerPlayer
ProcessInputs	./Main/ClientManager.cpp	/^BOOL ClientManager::ProcessInputs()$/;"	f	class:ClientManager
ProcessInputs	./Main/ServerManager.cpp	/^BOOL ServerManager::ProcessInputs()$/;"	f	class:ServerManager
ProcessMessageBlock	./websocket/sha1.cpp	/^void SHA1::ProcessMessageBlock()$/;"	f	class:SHA1
ProcessOutput	./Main/ClientPlayer.cpp	/^BOOL ClientPlayer::ProcessOutput()$/;"	f	class:ClientPlayer
ProcessOutput	./Main/Player.cpp	/^BOOL Player::ProcessOutput()$/;"	f	class:Player
ProcessOutput	./Main/ServerPlayer.cpp	/^BOOL ServerPlayer::ProcessOutput()$/;"	f	class:ServerPlayer
ProcessOutputs	./Main/ClientManager.cpp	/^BOOL ClientManager::ProcessOutputs()$/;"	f	class:ClientManager
ProcessOutputs	./Main/ServerManager.cpp	/^BOOL ServerManager::ProcessOutputs()$/;"	f	class:ServerManager
ProcessSendFail	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^INT CMTServerSocket::ProcessSendFail(INT nRet)$/;"	f	class:CMTServerSocket
ProtocolCmd	./MsgHandler/NetMsg.h	/^	ProtocolCmd():pkgLen(0),checkSum(0),cmd(0),ret(0)$/;"	f	struct:ProtocolCmd
ProtocolCmd	./MsgHandler/NetMsg.h	/^struct ProtocolCmd $/;"	s
ProtocolCmd	./NetBase/NetMsg.h	/^	ProtocolCmd():pkgLen(0),checkSum(0),cmd(0),ret(0)$/;"	f	struct:ProtocolCmd
ProtocolCmd	./NetBase/NetMsg.h	/^struct ProtocolCmd $/;"	s
ProtocolHead	./MsgHandler/NetMsg.h	/^    ProtocolHead(UInt32 c= 0,UInt16 rtn = 0, UInt16 cs=0):pkgLen(0),checkSum(cs),$/;"	f	struct:ProtocolHead
ProtocolHead	./MsgHandler/NetMsg.h	/^struct ProtocolHead$/;"	s
ProtocolHead	./NetBase/NetMsg.h	/^    ProtocolHead(UInt32 c= 0,UInt16 rtn = 0, UInt16 cs=0):pkgLen(0),checkSum(cs),$/;"	f	struct:ProtocolHead
ProtocolHead	./NetBase/NetMsg.h	/^struct ProtocolHead$/;"	s
ProtocolHead14Byte	./MsgHandler/NetMsg.h	/^struct ProtocolHead14Byte$/;"	s
ProtocolHead16Byte	./MsgHandler/NetMsg.h	/^struct ProtocolHead16Byte$/;"	s
ProtocolPacket	./websocket/protocol.h	/^        ProtocolPacket():pkg_type(0), pkg_len(0){$/;"	f	struct:ProtocolPacket
ProtocolPacket	./websocket/protocol.h	/^struct ProtocolPacket{$/;"	s
QUEUE_SET	./Common/T_MyQueue.h	/^	typedef deque<T> QUEUE_SET;$/;"	t	class:CMyQueue
QUICK_JOIN	./websocket/protocol.h	/^	QUICK_JOIN	 		= 3,		\/\/快速加入$/;"	e	enum:_MSG_BATTLE_TYPE
QUICK_MATCH	./websocket/protocol.h	/^	QUICK_MATCH 		= 2,		\/\/快速匹配$/;"	e	enum:_MSG_BATTLE_TYPE
Query	./DataBase/DBMySql.cpp	/^MYSQL_RES* DBMySql::Query(const std::string& str)$/;"	f	class:DBMySql
QueryData	./Main/Player.h	/^	CUserData* 				QueryData()	{  	return &m_UserData;	}$/;"	f	class:Player
READY	./Common/Thread.h	/^		READY,		\/\/ 当前线程处于准备状态$/;"	e	enum:Thread::ThreadStatus
RECEIVE_BUFFER_SIZE	./Common/BaseType.h	254;"	d
RECV_BUFFER_SIZE	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^const int	RECV_BUFFER_SIZE	= 2048;$/;"	v
RECV_BUFF_SIZE	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^const INT RECV_BUFF_SIZE = 8*1024;$/;"	v
RECYCLEPLAYER_LOGFILE	./Base/Log.h	49;"	d
REPLAY_OK_STR	./Common/BaseType.h	304;"	d
RM	./build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RUNNING	./Common/Thread.h	/^		RUNNING,	\/\/ 处于运行状态$/;"	e	enum:Thread::ThreadStatus
Rand	./Common/Common.cpp	/^INT Rand(int nRange)$/;"	f
RandGet	./Base/GameUtil.cpp	/^int RandGet(int nMax, BOOL bReset\/*=FALSE*\/)$/;"	f
ReOpen	./NetBase/MulitThreadNetBase/MTClientSocket.cpp	/^bool CClientSocket::ReOpen(int nBlockSecs \/*= 0*\/)$/;"	f	class:CClientSocket
Read	./MsgHandler/MsgAction.cpp	/^BOOL CMsgAction::Read(SocketInputStream& iStream)$/;"	f	class:CMsgAction
Read	./MsgHandler/MsgBattle.cpp	/^BOOL CMsgBattle::Read(SocketInputStream& iStream)$/;"	f	class:CMsgBattle
Read	./MsgHandler/MsgExchang.cpp	/^BOOL CMsgExchang::Read(SocketInputStream& iStream)$/;"	f	class:CMsgExchang
Read	./MsgHandler/MsgItem.cpp	/^BOOL CMsgItem::Read(SocketInputStream& iStream)$/;"	f	class:CMsgItem
Read	./MsgHandler/MsgLogin.cpp	/^BOOL CMsgLogin::Read(SocketInputStream& iStream)$/;"	f	class:CMsgLogin
Read	./MsgHandler/MsgSynRoomInfo.cpp	/^BOOL CMsgSynRoomInfo::Read(SocketInputStream& iStream)$/;"	f	class:CMsgSynRoomInfo
Read	./MsgHandler/MsgUserInfo.cpp	/^BOOL CMsgUserInfo::Read(SocketInputStream& iStream)$/;"	f	class:CMsgUserInfo
Read	./MsgHandler/MsgVas.cpp	/^BOOL CMsgVas::Read(SocketInputStream& iStream)$/;"	f	class:CMsgVas
Read	./MsgHandler/MsgWalk.cpp	/^BOOL CMsgWalk::Read(SocketInputStream& iStream)$/;"	f	class:CMsgWalk
Read	./MsgHandler/NetMsg.cpp	/^BOOL CNetMsg::Read(SocketInputStream& iStream)$/;"	f	class:CNetMsg
Read	./NetBase/SocketInputStream.cpp	/^INT SocketInputStream::Read(CHAR* buf, UINT len)$/;"	f	class:SocketInputStream
ReadPacket	./NetBase/SocketInputStream.cpp	/^BOOL SocketInputStream::ReadPacket(CNetMsg* pMsg) $/;"	f	class:SocketInputStream
ReconnectToACC	./Main/ClientManager.cpp	/^BOOL ClientManager::ReconnectToACC()$/;"	f	class:ClientManager
ReconnectToMTS	./Main/ClientManager.cpp	/^BOOL ClientManager::ReconnectToMTS()$/;"	f	class:ClientManager
ReconnectToPW	./Main/ClientManager.cpp	/^BOOL ClientManager::ReconnectToPW()$/;"	f	class:ClientManager
Release	./Common/SingleMap.h	/^	void	Release() { delete this; }$/;"	f	class:CSingleMap
Release	./Main/BattleConfusionSingle.h	/^	VOID Release()	{	delete this;	}$/;"	f	class:CBattleConfusionSingle
Release	./Main/BattleTeam.h	/^	VOID 	Release() {		delete this;	}$/;"	f	class:CBattleTeam
RemoveAllPlayer	./Main/ServerManager.cpp	/^void ServerManager::RemoveAllPlayer()$/;"	f	class:ServerManager
RemoveLog	./Base/Log.cpp	/^VOID Log::RemoveLog( CHAR* filename )$/;"	f	class:Log
RemovePacket	./Common/PacketFactoryManager.cpp	/^VOID PacketFactoryManager::RemovePacket(CNetMsg* msg)$/;"	f	class:PacketFactoryManager
RemovePlayer	./Main/PlayerManager.cpp	/^BOOL PlayerManager::RemovePlayer(Player* pPlayer)$/;"	f	class:PlayerManager
RemovePlayer	./Main/PlayerManager.cpp	/^BOOL PlayerManager::RemovePlayer(PlayerID_t pid)$/;"	f	class:PlayerManager
RemovePlayer	./Main/ServerManager.cpp	/^BOOL ServerManager::RemovePlayer(Player* pPlayer)$/;"	f	class:ServerManager
Reset	./Common/Event.cpp	/^bool CEvent::Reset()$/;"	f	class:CEvent
Reset	./Common/SingleMap.h	/^		void	Reset()		{ m_iter=m_pSet->begin(); m_pObj=NULL; }$/;"	f	class:CSingleMap::Iterator
Reset	./websocket/sha1.cpp	/^void SHA1::Reset()$/;"	f	class:SHA1
ResetEvent	./Common/Event.cpp	/^bool ResetEvent(CEvent* pEvent)$/;"	f
ResetKick	./Main/Player.cpp	/^VOID Player::ResetKick()$/;"	f	class:Player
Resize	./NetBase/SocketInputStream.cpp	/^BOOL SocketInputStream::Resize(UINT size)$/;"	f	class:SocketInputStream
Resize	./NetBase/SocketOutputStream.cpp	/^BOOL SocketOutputStream::Resize(UINT size)$/;"	f	class:SocketOutputStream
Result	./websocket/sha1.cpp	/^bool SHA1::Result(unsigned *message_digest_array)$/;"	f	class:SHA1
Robot	./Main/Robot.h	/^    Robot() {_accID = 0; _robotID = ""; _protoTypeID=0; memset(&_data, 0, sizeof(RobotBaseProp));};$/;"	f	class:Robot
Robot	./Main/Robot.h	/^class Robot$/;"	c
RobotBaseProp	./Main/RobotConf.h	/^struct RobotBaseProp$/;"	s
RobotConf	./Common/Config.h	/^    RobotConf() {};$/;"	f	struct:RobotConf
RobotConf	./Common/Config.h	/^struct RobotConf$/;"	s
RunTick	./Base/TimeManager.h	/^	UINT			RunTick()$/;"	f	class:TimeManager
RunTime	./Base/TimeManager.h	/^	UINT			RunTime(){ $/;"	f	class:TimeManager
SAFE_DELETE	./Common/Common.h	178;"	d
SAFE_DELETE_ARRAY	./Common/Common.h	183;"	d
SAFE_FREE	./Common/Common.h	188;"	d
SAFE_RELEASE	./Common/Common.h	193;"	d
SAFE_RELEASEBYOWNER	./Common/Common.h	197;"	d
SELECT_BAK	./Main/ServerManager.h	/^		SELECT_BAK = 0, 	\/\/当前系统中拥有的完整句柄数据$/;"	e	enum:ServerManager::__anon2
SELECT_MAX	./Main/ServerManager.h	/^		SELECT_MAX = 2,		\/\/结构使用数量$/;"	e	enum:ServerManager::__anon2
SELECT_USE	./Main/ServerManager.h	/^		SELECT_USE = 1,		\/\/用于select调用的句柄数据$/;"	e	enum:ServerManager::__anon2
SEND_BUFFER_SIZE	./Common/BaseType.h	256;"	d
SEND_BUFFER_SIZE	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^const int	SEND_BUFFER_SIZE	= 4048;$/;"	v
SEND_BUFF_SIZE	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^const INT SEND_BUFF_SIZE = 16*1024;$/;"	v
SERVER_BILLING	./Common/GameDefine2.h	/^	SERVER_BILLING = 4,$/;"	e	enum:SERVER_TYPE
SERVER_ERRORFILE	./Base/Log.h	44;"	d
SERVER_FUNCTIONFILE	./Base/Log.h	45;"	d
SERVER_GAME	./Common/GameDefine2.h	/^	SERVER_GAME = 0 ,		\/\/游戏服务器端程序$/;"	e	enum:SERVER_TYPE
SERVER_LOGFILE	./Base/Log.h	43;"	d
SERVER_LOGIN	./Common/GameDefine2.h	/^	SERVER_LOGIN = 1 ,		\/\/登陆服务器端程序$/;"	e	enum:SERVER_TYPE
SERVER_NUMBER	./Common/GameDefine2.h	/^	SERVER_NUMBER ,$/;"	e	enum:SERVER_TYPE
SERVER_SHAREMEN	./Common/GameDefine2.h	/^	SERVER_SHAREMEN = 2 ,	\/\/共享存储端程序$/;"	e	enum:SERVER_TYPE
SERVER_TYPE	./Common/GameDefine2.h	/^enum SERVER_TYPE			\/\/服务器端程序类型$/;"	g
SERVER_TYPE_ACC	./Protocol/Command.h	/^	SERVER_TYPE_ACC 		=	1, \/\/ Acc 	Server$/;"	e	enum:ServerType
SERVER_TYPE_GC	./Protocol/Command.h	/^	SERVER_TYPE_GC			=	0, \/\/ Game 	Client$/;"	e	enum:ServerType
SERVER_TYPE_MTS	./Protocol/Command.h	/^	SERVER_TYPE_MTS			=	3, \/\/ MTS 	Server$/;"	e	enum:ServerType
SERVER_TYPE_OL	./Protocol/Command.h	/^	SERVER_TYPE_OL			=	2, \/\/ OnLine Server$/;"	e	enum:ServerType
SERVER_TYPE_PW	./Protocol/Command.h	/^	SERVER_TYPE_PW			=	4, \/\/ PW 	Server		$/;"	e	enum:ServerType
SERVER_WORLD	./Common/GameDefine2.h	/^	SERVER_WORLD = 3,$/;"	e	enum:SERVER_TYPE
SET_PACKET_INDEX	./MsgHandler/NetMsg.h	51;"	d
SET_PACKET_INDEX	./NetBase/NetMsg.h	25;"	d
SET_PACKET_LEN	./MsgHandler/NetMsg.h	53;"	d
SET_PACKET_LEN	./NetBase/NetMsg.h	27;"	d
SHA1	./websocket/sha1.cpp	/^SHA1::SHA1()$/;"	f	class:SHA1
SHA1	./websocket/sha1.h	/^class SHA1$/;"	c
SHELL	./build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHORT	./Common/BaseType.h	/^typedef	short 	SHORT;									\/\/标准有符号short$/;"	t
SIMULATE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
SIZE_T	./Common/BaseType.h	/^	typedef size_t SIZE_T;$/;"	t
SMHandle	./Common/Type.h	/^	typedef		INT		SMHandle;$/;"	t
SMHandle	./Common/Type.h	/^	typedef		VOID*	SMHandle;$/;"	t
SMUID_t	./Common/Type.h	/^typedef USHORT	SMUID_t;$/;"	t
SM_KEY	./Common/Type.h	/^typedef	ULONG	SM_KEY;$/;"	t
SOCKADDR	./Common/BaseType.h	/^typedef struct sockaddr SOCKADDR;$/;"	t	typeref:struct:sockaddr
SOCKADDR_IN	./Common/BaseType.h	/^typedef struct sockaddr_in SOCKADDR_IN;$/;"	t	typeref:struct:sockaddr_in
SOCKADDR_IN6	./Common/BaseType.h	/^typedef struct sockaddr_in6 SOCKADDR_IN6;$/;"	t	typeref:struct:sockaddr_in6
SOCKET	./Common/BaseType.h	/^	typedef INT SOCKET;$/;"	t
SOCKETKERNEL_ONTIMER_MS	./Common/BaseType.h	/^const int	SOCKETKERNEL_ONTIMER_MS	= 1000;			\/\/ 网络线程的ONTIMER频率$/;"	v
SOCKET_CLOSE	./Common/BaseType.h	/^	SOCKET_CLOSE = 0,$/;"	e	enum:SOCKET_ERROR_CODE
SOCKET_ERROR	./Common/BaseType.h	/^	SOCKET_ERROR = -1,$/;"	e	enum:SOCKET_ERROR_CODE
SOCKET_ERROR_CODE	./Common/BaseType.h	/^enum SOCKET_ERROR_CODE$/;"	g
SOCKET_ERROR_WOULDBLOCK	./Common/BaseType.h	406;"	d
SOCKET_ERROR_WOULDBLOCK_EX	./Common/BaseType.h	/^static const INT SOCKET_ERROR_WOULDBLOCK_EX = -100;$/;"	v
SOCKET_PROCESS_INTERVAL	./Common/BaseType.h	/^const int	SOCKET_PROCESS_INTERVAL	= 40;			\/\/ SOCKET轮循的频率$/;"	v
SOCKET_WOULDBLOCK	./Common/BaseType.h	/^	SOCKET_WOULDBLOCK = 1,$/;"	e	enum:SOCKET_ERROR_CODE
SOCKLEN_T	./Common/BaseType.h	/^	typedef socklen_t SOCKLEN_T;$/;"	t
SSIZE_T	./Common/BaseType.h	/^	typedef ssize_t SSIZE_T;$/;"	t
STATE_CLOSED	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	enum { STATE_CLOSED = 0, STATE_CONNECT, STATE_OPEN};$/;"	e	enum:CMTClientSocket::__anon8
STATE_CONNECT	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	enum { STATE_CLOSED = 0, STATE_CONNECT, STATE_OPEN};$/;"	e	enum:CMTClientSocket::__anon8
STATE_OPEN	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	enum { STATE_CLOSED = 0, STATE_CONNECT, STATE_OPEN};$/;"	e	enum:CMTClientSocket::__anon8
STRINGIFY	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
STRINGIFY	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
STRINGIFY_HELPER	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
STRINGIFY_HELPER	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
ST_CONFIG	./Common/Config.h	/^	ST_CONFIG()$/;"	f	struct:ST_CONFIG
ST_CONFIG	./Common/Config.h	/^struct ST_CONFIG{$/;"	s
SUCCESS	./MsgHandler/MsgLogin.h	/^	SUCCESS = 1,			\/\/失败$/;"	e	enum:LOGIN_RESULT
SUFFIXES	./build/Makefile	/^SUFFIXES =$/;"	m
SYSTEM_NAME	./Common/BaseType.h	302;"	d
SafeCopy	./Common/Common.cpp	/^bool	SafeCopy(char * pTarget, const char * pSource, int nBufLen \/*= 0*\/)$/;"	f
SaveCodeLog	./Base/Log.h	100;"	d
SaveCodeLog	./Base/Log.h	98;"	d
SaveLog	./Base/Log.cpp	/^VOID Log::SaveLog( const CHAR* filename, const CHAR* msg, ... )$/;"	f	class:Log
SceneID_t	./Common/Type.h	/^typedef ID_t			SceneID_t;			\/\/$/;"	t
Select	./Main/ServerManager.cpp	/^INT ServerManager::Select()$/;"	f	class:ServerManager
SendMsg	./MsgHandler/MsgAction.cpp	/^BOOL CMsgAction::SendMsg(CNetMsg* pMsg)$/;"	f	class:CMsgAction
SendMsg	./MsgHandler/MsgBattle.cpp	/^BOOL CMsgBattle::SendMsg(CNetMsg* pMsg)$/;"	f	class:CMsgBattle
SendMsg	./MsgHandler/MsgExchang.cpp	/^BOOL CMsgExchang::SendMsg(CNetMsg* pMsg)$/;"	f	class:CMsgExchang
SendMsg	./MsgHandler/MsgItem.cpp	/^BOOL CMsgItem::SendMsg(CNetMsg* pMsg)$/;"	f	class:CMsgItem
SendMsg	./MsgHandler/MsgLogin.cpp	/^BOOL CMsgLogin::SendMsg(CNetMsg* pMsg)$/;"	f	class:CMsgLogin
SendMsg	./MsgHandler/MsgSynRoomInfo.cpp	/^BOOL CMsgSynRoomInfo::SendMsg(CNetMsg* pMsg)$/;"	f	class:CMsgSynRoomInfo
SendMsg	./MsgHandler/MsgUserInfo.cpp	/^BOOL CMsgUserInfo::SendMsg(CNetMsg* pMsg)$/;"	f	class:CMsgUserInfo
SendMsg	./MsgHandler/MsgVas.cpp	/^BOOL CMsgVas::SendMsg(CNetMsg* pMsg)$/;"	f	class:CMsgVas
SendMsg	./MsgHandler/MsgWalk.cpp	/^BOOL CMsgWalk::SendMsg(CNetMsg* pMsg)$/;"	f	class:CMsgWalk
SendMsg	./MsgHandler/NetMsg.cpp	/^BOOL CNetMsg::SendMsg ( CNetMsg* pMsg )$/;"	f	class:CNetMsg
SendMsgToClient	./Main/Player.cpp	/^BOOL Player::SendMsgToClient(CNetMsg* pMsg)$/;"	f	class:Player
SendMsgToServer	./Main/ClientManager.cpp	/^BOOL ClientManager::SendMsgToServer(INT sendTo, const std::string& sJson, UInt32 cmd)$/;"	f	class:ClientManager
SendPacket	./Main/ClientPlayer.cpp	/^BOOL ClientPlayer::SendPacket(CNetMsg* pMsg)$/;"	f	class:ClientPlayer
SendPacket	./Main/Player.cpp	/^BOOL Player::SendPacket(CNetMsg* pMsg)$/;"	f	class:Player
SendPacket	./Main/ServerPlayer.cpp	/^BOOL ServerPlayer::SendPacket(CNetMsg* pMsg)$/;"	f	class:ServerPlayer
SendPacket	./NetBase/MulitThreadNetBase/MTClientSocket.cpp	/^bool CClientSocket::SendPacket(const char* buf, int nLen, bool bFlush \/*= false*\/)$/;"	f	class:CClientSocket
SendPacket	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^BOOL CMTServerSocket::SendPacket(const CHAR* pack, INT nLen)$/;"	f	class:CMTServerSocket
SendPacketToNet	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^INT CMTServerSocket::SendPacketToNet()$/;"	f	class:CMTServerSocket
SendToServer	./Main/Player.h	/^enum SendToServer$/;"	g
ServerManager	./Main/ServerManager.cpp	/^ServerManager::ServerManager()$/;"	f	class:ServerManager
ServerManager	./Main/ServerManager.h	/^class ServerManager : public PlayerManager$/;"	c
ServerPlayer	./Main/ServerPlayer.cpp	/^ServerPlayer::ServerPlayer()$/;"	f	class:ServerPlayer
ServerPlayer	./Main/ServerPlayer.h	/^class ServerPlayer : public Player$/;"	c
ServerRegToACC	./Main/ClientManager.cpp	/^BOOL ClientManager::ServerRegToACC()$/;"	f	class:ClientManager
ServerRegToMTS	./Main/ClientManager.cpp	/^BOOL ClientManager::ServerRegToMTS()$/;"	f	class:ClientManager
ServerRegToPW	./Main/ClientManager.cpp	/^BOOL ClientManager::ServerRegToPW()$/;"	f	class:ClientManager
ServerSocket	./NetBase/ServerSocket.cpp	/^ServerSocket::ServerSocket()$/;"	f	class:ServerSocket
ServerSocket	./NetBase/ServerSocket.h	/^class ServerSocket $/;"	c
ServerType	./Protocol/Command.h	/^enum ServerType$/;"	g
Set	./Common/Event.cpp	/^bool CEvent::Set()$/;"	f	class:CEvent
SetACCActive	./Main/ClientManager.h	/^	void				SetACCActive(BOOL bActive)		{ 	m_bACCActive = bActive; 	}$/;"	f	class:ClientManager
SetAccountID	./Main/Player.h	/^	VOID				SetAccountID (UInt32 accID)	{ 	m_AccountID = accID;	}$/;"	f	class:Player
SetAccountID	./Main/PlayerPool.cpp	/^void PlayerPool::SetAccountID(Player* player, UInt32 accountID)$/;"	f	class:PlayerPool
SetActive	./Main/ClientManager.h	/^	void				SetActive(BOOL bActive)			{ 	m_bActive = bActive; 		}$/;"	f	class:ClientManager
SetActive	./Main/ServerManager.h	/^	VOID    SetActive(BOOL active)			{	m_bActive = active;	}	$/;"	f	class:ServerManager
SetActive	./Main/World.h	/^	VOID    SetActive(BOOL active)			{	m_bActive = active;	}$/;"	f	class:World
SetAddGold	./Main/Player.h	/^    VOID             SetAddGold(UInt32 nAddGold, BOOL bUpdate = TRUE){	QueryData()->SetAddGold(nAddGold, bUpdate);}$/;"	f	class:Player
SetAddGold	./Main/UserData.cpp	/^VOID  CUserData::SetAddGold(UInt32 nAddGold, BOOL bUpdate \/*= TRUE*\/)$/;"	f	class:CUserData
SetAddScore	./Main/Player.h	/^    VOID             SetAddScore(UInt32 nAddScore, BOOL bUpdate = TRUE)	{	QueryData()->SetAddScore(nAddScore, bUpdate);}$/;"	f	class:Player
SetAddScore	./Main/UserData.cpp	/^VOID CUserData::SetAddScore(UInt32 nAddScore, BOOL bUpdate \/*= TRUE*\/)$/;"	f	class:CUserData
SetBattle	./Main/BattleManager.h	/^	BOOL SetBattle(CBattle* pBattle) 	{	CHECKF(pBattle);	m_pBattle = pBattle;	return TRUE;	}$/;"	f	class:CBattleManager
SetBcs	./Main/Player.h	/^	BOOL  					SetBcs(CBattleConfusionSingle* pBcs){ CHECKF (pBcs);  m_pBcs = pBcs; return TRUE;	}$/;"	f	class:Player
SetBct	./Main/Player.h	/^	BOOL  					SetBct (  CBattleTeam* pBt ){ 	CHECKF(pBt); m_pBct = pBt; return TRUE; }$/;"	f	class:Player
SetBrbt	./Main/Player.h	/^	BOOL  					SetBrbt ( CBattleTeam* pBt ){ 	CHECKF(pBt); m_pBrbt = pBt; return TRUE; }$/;"	f	class:Player
SetBuffSize	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^INT	CMTServerSocket::SetBuffSize(INT nSndBuffSize \/*= 0*\/, INT nRevBuffSize \/*= 0*\/)$/;"	f	class:CMTServerSocket
SetCarLevel	./Main/Player.h	/^    VOID             SetCarLevel(UInt32 nCarLevel, BOOL bUpdate = TRUE){	QueryData()->SetCarLevel(nCarLevel, bUpdate);}$/;"	f	class:Player
SetCarLevel	./Main/UserData.cpp	/^VOID CUserData::SetCarLevel(UInt32 nCarLevel, BOOL bUpdate \/*= TRUE*\/)$/;"	f	class:CUserData
SetClientEPollEvent	./NetBase/Socket.h	/^        void                                    SetClientEPollEvent(struct epoll_event* pEpollEvent)                   { CHECK(pEpollEvent);  m_pEpollEvent = pEpollEvent;   }$/;"	f	class:Socket
SetClientID	./Main/Player.h	/^	VOID  				SetClientID( ClientID_t id ) {	m_PID = id;	}$/;"	f	class:Player
SetClientPollFd	./NetBase/Socket.h	/^        void                                    SetClientPollFd(struct pollfd* pfd)                                     { CHECK(pfd);  m_pClientPollFd = pfd;   }$/;"	f	class:Socket
SetCurStarSum	./Main/Player.h	/^	VOID SetCurStarSum ( UInt32 nCurStarSum, BOOL bUpdate = TRUE ){$/;"	f	class:Player
SetCurStarSum	./Main/UserData.cpp	/^VOID CUserData::SetCurStarSum(UInt32 nCurStarSum, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetDayTime	./Base/Log.h	/^	VOID			SetDayTime( UINT daytime ){ m_DayTime = daytime ; }$/;"	f	class:Log
SetDisconnect	./Main/Player.h	/^	VOID 				SetDisconnect ( BOOL disconnect=TRUE ){ 	m_IsDisconnect = disconnect; }$/;"	f	class:Player
SetDontLinger	./NetBase/ServerSocket.h	/^    BOOL SetDontLinger(BOOL on=TRUE)            {   return m_pSocket->setDontLinger(on);      }$/;"	f	class:ServerSocket
SetEmpty	./Main/Player.h	/^	VOID 				SetEmpty ( BOOL empty=TRUE )	{ m_IsEmpty = empty;	}$/;"	f	class:Player
SetEnemyTeam	./Main/BattleTeam.h	/^	VOID 	SetEnemyTeam(CBattleTeam* pEnemyTeam)			{	m_pEnemyTeam = pEnemyTeam;				}$/;"	f	class:CBattleTeam
SetEvent	./Common/Event.cpp	/^bool SetEvent(CEvent* pEvent)$/;"	f
SetFightKillSum	./Main/Player.h	/^	VOID  SetFightKillSum ( UInt32 nFightKillSum, BOOL bUpdate = TRUE )	{$/;"	f	class:Player
SetFightKillSum	./Main/UserData.cpp	/^VOID CUserData::SetFightKillSum(UInt32 nFightKillSum, BOOL bUpdate \/*= TRUE*\/)$/;"	f	class:CUserData
SetFightLevel	./Main/Player.h	/^	VOID SetFightLevel ( UInt32 nFightLevel, BOOL bUpdate = TRUE ){$/;"	f	class:Player
SetFightLevel	./Main/UserData.cpp	/^VOID CUserData::SetFightLevel(UInt32 nFightLevel, BOOL bUpdate \/*= TRUE*\/) $/;"	f	class:CUserData
SetFightResult	./Main/BattleTeam.h	/^	VOID 	SetFightResult(INT nFightResult)				{	m_nFightResult = nFightResult;			}$/;"	f	class:CBattleTeam
SetFightScore	./Main/Player.h	/^	VOID SetFightScore ( UInt32 nFightScore, BOOL bUpdate = TRUE ){$/;"	f	class:Player
SetFightScore	./Main/UserData.cpp	/^VOID CUserData::SetFightScore(UInt32 nFightScore, BOOL bUpdate \/*= TRUE*\/)$/;"	f	class:CUserData
SetFightTeamColour	./Main/BattleTeam.h	/^	VOID 	SetFightTeamColour(INT nColour)					{	m_nFightTeamColour = nColour;			}$/;"	f	class:CBattleTeam
SetFightTeamKillSum	./Main/BattleTeam.h	/^	VOID 	SetFightTeamKillSum(INT nKillSum)				{	m_nFightTeamKillSum = nKillSum;			}$/;"	f	class:CBattleTeam
SetFightTotalScore	./Main/BattleTeam.h	/^	VOID 	SetFightTotalScore(INT nFightTotalScore)		{	m_nFightTotalScore = nFightTotalScore;	}$/;"	f	class:CBattleTeam
SetGiftDay	./Main/Player.h	/^	VOID SetGiftDay ( std::string& strGiftDay, BOOL bUpdate = TRUE )	{$/;"	f	class:Player
SetGiftDay	./Main/UserData.cpp	/^VOID CUserData::SetGiftDay(std::string const& strGiftDay, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetGiftSum	./Main/Player.h	/^	VOID SetGiftSum ( UInt32 nGiftSum, BOOL bUpdate = TRUE ){$/;"	f	class:Player
SetGiftSum	./Main/UserData.cpp	/^VOID CUserData::SetGiftSum(UInt32 nGiftSum, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetGoldSum	./Main/Player.h	/^	VOID SetGoldSum(UInt32 nGoldSum, BOOL bUpdate=TRUE){$/;"	f	class:Player
SetGoldSum	./Main/UserData.cpp	/^VOID CUserData::SetGoldSum(UInt32 nGoldSum, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetGrandingId	./Main/Player.h	/^	VOID SetGrandingId ( UInt32 nGrandingId, BOOL bUpdate = TRUE ){$/;"	f	class:Player
SetGrandingId	./Main/UserData.cpp	/^VOID CUserData::SetGrandingId(UInt32 nGrandingId, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetHeadPicurl	./Main/Player.h	/^	VOID 					SetHeadPicurl(std::string& strHeadPicurl, BOOL bUpdate=TRUE){  QueryData()->SetHeadPicurl (strHeadPicurl, bUpdate );     }$/;"	f	class:Player
SetHeadPicurl	./Main/UserData.cpp	/^VOID CUserData::SetHeadPicurl(std::string const& strHeadPicurl, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetInterval	./Common/TimeOut.h	/^	void	SetInterval	(int nMilliSecs)		{ m_nInterval = nMilliSecs; }$/;"	f	class:CTimeOutMS_
SetInterval	./Common/TimeOut.h	/^	void	SetInterval	(int nSecs)				{ m_nInterval = nSecs; }$/;"	f	class:CTimeOut_
SetKillSum	./Main/Player.h	/^	VOID SetKillSum ( UInt32 nKillSum, BOOL bUpdate = TRUE ){$/;"	f	class:Player
SetKillSum	./Main/UserData.cpp	/^VOID CUserData::SetKillSum(UInt32 nKillSum, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetKingSum	./Main/Player.h	/^	VOID  SetKingSum ( UInt32 nKingSum, BOOL bUpdate = TRUE ){$/;"	f	class:Player
SetKingSum	./Main/UserData.cpp	/^VOID CUserData::SetKingSum(UInt32 nKingSum, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetLevel	./Base/logger.h	/^        void SetLevel(LOG_LEVEL level){$/;"	f	class:Logger
SetLinger	./NetBase/ClientSocket.h	/^    VOID SetLinger(UINT lingertime) 			{ 	m_pSocket->setLinger(lingertime); 			}$/;"	f	class:ClientSocket
SetLinger	./NetBase/ServerSocket.h	/^    BOOL SetLinger(UINT lingertime) 			{ 	return m_pSocket->setLinger(lingertime); 			}$/;"	f	class:ServerSocket
SetLogName	./Base/logger.h	/^        void SetLogName(std::string logName){$/;"	f	class:Logger
SetMTSActive	./Main/ClientManager.h	/^	void				SetMTSActive(BOOL bActive)		{ 	m_bMTSActive = bActive; 	}$/;"	f	class:ClientManager
SetNickName	./Main/Player.h	/^	VOID 					SetNickName (std::string& strNickName, BOOL bUpdate =TRUE){  QueryData()->SetNickName(strNickName,bUpdate);    }$/;"	f	class:Player
SetNickName	./Main/UserData.cpp	/^VOID CUserData::SetNickName(std::string const& strNickName, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetNoDelay	./NetBase/ClientSocket.h	/^	VOID SetNoDelay(BOOL on=TRUE)				{ 	m_pSocket->setNoDelay(on); 					}$/;"	f	class:ClientSocket
SetNoDelay	./NetBase/ServerSocket.h	/^	BOOL SetNoDelay(BOOL on=TRUE)				{ 	return m_pSocket->setNoDelay(on); 					}$/;"	f	class:ServerSocket
SetNonBlocking	./NetBase/ClientSocket.h	/^    VOID SetNonBlocking(BOOL on = TRUE) 		{ 	m_pSocket->setNonBlocking(on); 				}$/;"	f	class:ClientSocket
SetNonBlocking	./NetBase/ServerSocket.h	/^    BOOL SetNonBlocking(BOOL on = TRUE) 		{ 	return m_pSocket->setNonBlocking(on); 				}$/;"	f	class:ServerSocket
SetNowTime	./Main/Player.h	/^	VOID 				SetNowTime(DWORD tm) 		{	m_time = tm; 			}$/;"	f	class:Player
SetPWActive	./Main/ClientManager.h	/^	void				SetPWActive(BOOL bActive)		{ 	m_bPWActive = bActive; 		}$/;"	f	class:ClientManager
SetPacketIndex	./Main/Player.h	/^	VOID  				SetPacketIndex ( BYTE index )	{		m_PacketIndex = index;	}$/;"	f	class:Player
SetPacketIndex	./MsgHandler/NetMsg.h	/^	VOID				SetPacketIndex(BYTE Index )					{ 	m_Index = Index; 	}$/;"	f	class:CNetMsg
SetPacketIndex	./NetBase/NetMsg.h	/^	VOID				SetPacketIndex(BYTE Index )					{ 	m_Index = Index; 	}$/;"	f	class:CNetMsg
SetPacketSize	./MsgHandler/MsgAction.h	/^	VOID 		SetPacketSize(UINT size) { m_nPacketSize = size; };$/;"	f	class:CMsgActionFactory
SetPacketSize	./MsgHandler/MsgBattle.h	/^	VOID 		SetPacketSize(UINT size) { m_nPacketSize = size; };$/;"	f	class:CMsgBattleFactory
SetPacketSize	./MsgHandler/MsgExchang.h	/^	VOID 		SetPacketSize(UINT size) { m_nPacketSize = size; };$/;"	f	class:CMsgExchangFactory
SetPacketSize	./MsgHandler/MsgItem.h	/^	VOID 		SetPacketSize(UINT size) { m_nPacketSize = size; };$/;"	f	class:CMsgItemFactory
SetPacketSize	./MsgHandler/MsgLogin.h	/^	VOID 		SetPacketSize(UINT size) { m_nPacketSize = size; };$/;"	f	class:CMsgLoginFactory
SetPacketSize	./MsgHandler/MsgSynRoomInfo.h	/^	VOID 		SetPacketSize(UINT size) { m_nPacketSize = size; };$/;"	f	class:CMsgSynRoomInfoFactory
SetPacketSize	./MsgHandler/MsgUserInfo.h	/^	VOID 		SetPacketSize(UINT size) { m_nPacketSize = size; };$/;"	f	class:CMsgUserInfoFactory
SetPacketSize	./MsgHandler/MsgVas.h	/^	VOID 		SetPacketSize(UINT size) { m_nPacketSize = size; };$/;"	f	class:CMsgVasFactory
SetPacketSize	./MsgHandler/MsgWalk.h	/^	VOID 		SetPacketSize(UINT size) { m_nPacketSize = size; };$/;"	f	class:CMsgWalkFactory
SetPacketStatus	./MsgHandler/NetMsg.h	/^	VOID				SetPacketStatus(BYTE Status )				{ 	m_Status = Status; 	}$/;"	f	class:CNetMsg
SetPacketStatus	./NetBase/NetMsg.h	/^	VOID				SetPacketStatus(BYTE Status )				{ 	m_Status = Status; 	}$/;"	f	class:CNetMsg
SetPlayerID	./Main/Player.h	/^	VOID 				SetPlayerID( PlayerID_t id ) 	{	m_PID = id;	}$/;"	f	class:Player
SetPlayerManagerID	./Main/Player.h	/^	VOID  				SetPlayerManagerID ( ID_t id )	{	m_PlayerManagerID = id;	}$/;"	f	class:Player
SetPlayerStatus	./Main/ClientPlayer.h	/^	void			SetPlayerStatus(UINT status)	{ m_Status = status; }$/;"	f	class:ClientPlayer
SetPlayerStatus	./Main/ServerPlayer.h	/^	void			SetPlayerStatus(UINT status)	{ m_Status = status; }$/;"	f	class:ServerPlayer
SetPrepareTimeStamp	./Main/BattleTeam.h	/^    VOID   SetPrepareTimeStamp(time_t timeStamp)            {   m_nQuickMatchTimeStamp = timeStamp;     }$/;"	f	class:CBattleTeam
SetQuickMatchTimeStamp	./Main/BattleTeam.h	/^	VOID 	SetQuickMatchTimeStamp(UINT nQuickMatchTimeStamp) 	{	m_nQuickMatchTimeStamp = nQuickMatchTimeStamp;	}$/;"	f	class:CBattleTeam
SetRatio	./Main/Player.h	/^    VOID             SetRatio(UInt32 nRatio, BOOL bUpdate = TRUE){	QueryData()->SetRatio(nRatio, bUpdate);}$/;"	f	class:Player
SetRatio	./Main/UserData.cpp	/^VOID CUserData::SetRatio(UInt32 nRatio, BOOL bUpdate \/*= TRUE*\/)$/;"	f	class:CUserData
SetReceiveBufferSize	./Main/Player.h	/^	BOOL 				SetReceiveBufferSize ( UINT size )	{ 	return m_pSocket->setReceiveBufferSize ( size );	}$/;"	f	class:Player
SetReceiveBufferSize	./NetBase/ClientSocket.h	/^    VOID SetReceiveBufferSize(UINT size) 		{ 	m_pSocket->setReceiveBufferSize(size); 		}$/;"	f	class:ClientSocket
SetReceiveBufferSize	./NetBase/ServerSocket.h	/^    BOOL SetReceiveBufferSize(UINT size) 		{ 	return m_pSocket->setReceiveBufferSize(size); 		}$/;"	f	class:ServerSocket
SetReuseAddr	./NetBase/ClientSocket.h	/^    VOID SetReuseAddr(BOOL on=TRUE) 			{ 	m_pSocket->setReuseAddr(on); 				}$/;"	f	class:ClientSocket
SetReuseAddr	./NetBase/ServerSocket.h	/^    BOOL SetReuseAddr(BOOL on=TRUE) 			{ 	return m_pSocket->setReuseAddr(on); 				}$/;"	f	class:ServerSocket
SetReusePort	./NetBase/ClientSocket.h	/^    VOID SetReusePort(BOOL on=TRUE) 			{ 	m_pSocket->setReusePort(on); 				}$/;"	f	class:ClientSocket
SetReusePort	./NetBase/ServerSocket.h	/^    BOOL SetReusePort(BOOL on=TRUE) 			{ 	return m_pSocket->setReusePort(on); 				}$/;"	f	class:ServerSocket
SetSection	./Common/IniFile.cpp	/^void	CIniFile::SetSection(const char * pSect)$/;"	f	class:CIniFile
SetSendBufferSize	./Main/Player.h	/^	BOOL 				SetSendBufferSize ( UINT size )	{ 		return m_pSocket->setReceiveBufferSize ( size ); }$/;"	f	class:Player
SetSendBufferSize	./NetBase/ClientSocket.h	/^    VOID SetSendBufferSize(UINT size) 			{ 	m_pSocket->setSendBufferSize(size); 		}$/;"	f	class:ClientSocket
SetSendBufferSize	./NetBase/ServerSocket.h	/^    BOOL SetSendBufferSize(UINT size) 			{ 	return m_pSocket->setSendBufferSize(size); 		}$/;"	f	class:ServerSocket
SetServerData	./Main/ClientPlayer.h	/^	VOID SetServerData(_CLIENT_DATA* pServerData)	{	assert(pServerData);	m_pServerData = pServerData;	}$/;"	f	class:ClientPlayer
SetServerData	./Main/ServerPlayer.h	/^	VOID SetServerData(_SERVER_DATA* pServerData)	{	assert(pServerData);	m_pServerData = pServerData;	}$/;"	f	class:ServerPlayer
SetSocket	./Main/Player.h	/^	VOID 				SetSocket ( Socket* sock )	{ 		m_pSocket = sock; }$/;"	f	class:Player
SetSocketInputStream	./Main/Player.h	/^	VOID  				SetSocketInputStream ( SocketInputStream* sis )	{ 		m_pSocketInputStream = sis; }$/;"	f	class:Player
SetSocketOpt	./Main/ClientManager.cpp	/^BOOL ClientManager::SetSocketOpt(Socket* pSocket, UINT bLinger\/*=TRUE*\/, BOOL bReuseAddr\/*=TRUE*\/, BOOL bReusePort\/*=TRUE*\/, BOOL bNoDelay\/*=TRUE*\/, BOOL bKeepAlive\/*=TRUE*\/, BOOL bNonBlocking\/*=TRUE*\/, BOOL bDontLinger\/*=TRUE*\/,UINT unSendBuffSize\/*=0*\/, UINT unRecvBuffSize\/*=0*\/)$/;"	f	class:ClientManager
SetSocketOutputStream	./Main/Player.h	/^	VOID 				SetSocketOutputStream ( SocketOutputStream* sos ) { m_pSocketOutputStream = sos; }$/;"	f	class:Player
SetStarDay	./Main/Player.h	/^	VOID  SetStarDay ( std::string& strStarDay, BOOL bUpdate = TRUE )	{$/;"	f	class:Player
SetStarDay	./Main/UserData.cpp	/^VOID CUserData::SetStarDay(std::string const& strStarDay, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetStarSum	./Main/Player.h	/^	VOID  SetStarSum ( UInt32 nStarSum, BOOL bUpdate = TRUE ){$/;"	f	class:Player
SetStarSum	./Main/UserData.cpp	/^VOID CUserData::SetStarSum(UInt32 nStarSum, BOOL bUpdate \/*= TRUE*\/)$/;"	f	class:CUserData
SetStrAccount	./Main/Player.h	/^	VOID  				SetStrAccount (const char* strAccount) { m_StrAccount = strAccount; }$/;"	f	class:Player
SetTeamId	./Main/BattleTeam.h	/^	VOID 	SetTeamId(UINT _id) 					{	m_id = _id;		}$/;"	f	class:CBattleTeam
SetTeamStatus	./Main/BattleTeam.h	/^	VOID 	SetTeamStatus(UINT nStatus) 			{	m_nTeamStatus = nStatus;	}$/;"	f	class:CBattleTeam
SetTermTime	./Base/GameUtil.h	/^	VOID SetTermTime( UINT uTerm ){ m_uTickTerm =uTerm; }$/;"	f	class:CMyTimer
SetTime	./Base/TimeManager.cpp	/^VOID TimeManager::SetTime()$/;"	f	class:TimeManager
SetTimeStamp	./Main/BattleTeam.h	/^	VOID 	SetTimeStamp(UINT nTimeStamp) 			{	m_nTimeStamp = nTimeStamp;	}$/;"	f	class:CBattleTeam
SetToFile	./Base/logger.h	/^        void SetToFile(bool toFile){$/;"	f	class:Logger
SetUID	./Main/Player.h	/^	VOID 				SetUID ( ID_t id )	{ 	m_UID = id; 	}$/;"	f	class:Player
SetUid	./Main/Player.h	/^	VOID 					SetUid ( UInt32 nUid, BOOL bUpdate=TRUE){	QueryData()->SetUid ( nUid, bUpdate );   }$/;"	f	class:Player
SetUid	./Main/UserData.cpp	/^VOID CUserData::SetUid(int nUid, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetUnlockSum	./Main/Player.h	/^	VOID  SetUnlockSum ( std::string& strUnlockSum, BOOL bUpdate = TRUE ){$/;"	f	class:Player
SetUnlockSum	./Main/UserData.cpp	/^VOID CUserData::SetUnlockSum(std::string const& strUnlockSum, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
SetUpdateTime	./Common/TimeOut.h	/^	void	SetUpdateTime( time_t time )		{ m_tUpdateTime = time;	}$/;"	f	class:CTimeOutMS_
SetUpdateTime	./Common/TimeOut.h	/^	void	SetUpdateTime( time_t time )		{ m_tUpdateTime = time;	}$/;"	f	class:CTimeOut_
SetUseCar	./Main/Player.h	/^	VOID  SetUseCar ( UInt32 nUseCar, BOOL bUpdate = TRUE )	{$/;"	f	class:Player
SetUseCar	./Main/UserData.cpp	/^VOID CUserData::SetUseCar(UInt32 nCurUseCar, BOOL bUpdate\/* = TRUE*\/)$/;"	f	class:CUserData
ShowPlayerMap	./Main/PlayerPool.cpp	/^void PlayerPool::ShowPlayerMap()$/;"	f	class:PlayerPool
Size	./Common/SingleMap.h	/^	int			Size		() const				{ return m_map.size(); }$/;"	f	class:CSingleMap
Size	./NetBase/SocketInputStream.h	/^	UINT		Size() const 						{	return 	Length();			}$/;"	f	class:SocketInputStream
Size	./NetBase/SocketOutputStream.h	/^	UINT		Size() const 						{	return 	Length();			}$/;"	f	class:SocketOutputStream
Skip	./NetBase/SocketInputStream.cpp	/^BOOL SocketInputStream::Skip(UINT len)$/;"	f	class:SocketInputStream
Socket	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	virtual SOCKET 				Socket()													{	return m_sock;	}$/;"	f	class:CMTServerSocket
Socket	./NetBase/Socket.cpp	/^Socket::Socket()$/;"	f	class:Socket
Socket	./NetBase/Socket.cpp	/^Socket::Socket(const CHAR* host, UINT port)$/;"	f	class:Socket
Socket	./NetBase/Socket.h	/^class Socket$/;"	c
SocketAPI	./NetBase/SocketAPI.h	/^namespace SocketAPI $/;"	n
SocketInputStream	./NetBase/SocketInputStream.cpp	/^SocketInputStream::SocketInputStream(Socket* sock, UINT BufferSize \/*= DEFAULTSOCKETINPUTBUFFERSIZE*\/, UINT MaxBufferLen \/*= DISCONNECTSOCKETINPUTSIZE*\/)$/;"	f	class:SocketInputStream
SocketInputStream	./NetBase/SocketInputStream.h	/^class SocketInputStream$/;"	c
SocketOutputStream	./NetBase/SocketOutputStream.cpp	/^SocketOutputStream::SocketOutputStream(Socket* sock, UINT BufferSize \/*= DEFAULTSOCKETOUTPUTBUFFERSIZE*\/, UINT MaxBufferLen \/*= DISCONNECTSOCKETOUTPUTSIZE*\/)$/;"	f	class:SocketOutputStream
SocketOutputStream	./NetBase/SocketOutputStream.h	/^class SocketOutputStream$/;"	c
StartQuickMatch	./Main/Battle.cpp	/^BOOL CBattle::StartQuickMatch(INT nModelType, INT nTeamid)$/;"	f	class:CBattle
StartTime	./Base/TimeManager.h	/^	UINT			StartTime(){ return m_StartTime; };$/;"	f	class:TimeManager
Startup	./Common/TimeOut.h	/^	void	Startup		(int nMilliSecs)		{ m_nInterval = nMilliSecs; Update(); }$/;"	f	class:CTimeOutMS_
Startup	./Common/TimeOut.h	/^	void	Startup		(int nSecs)				{ m_nInterval = nSecs; Update(); }$/;"	f	class:CTimeOut_
TEAMPLAYERSET	./Main/BattleTeam.h	/^typedef std::vector< Player* > TEAMPLAYERSET;$/;"	t
TES2MTS_DEAL_M_NODE	./Protocol/Command.h	/^	TES2MTS_DEAL_M_NODE 	=	800,$/;"	e	enum:Command
THREADDELAY_MS	./Common/BaseType.h	/^const int	THREADDELAY_MS			= 400;			\/\/ 等待内部消息的最大时间$/;"	v
TID	./Common/Type.h	/^	typedef DWORD		TID ;$/;"	t
TID	./Common/Type.h	/^	typedef pthread_t	TID ;$/;"	t
TIMELENTH	./Common/BaseType.h	162;"	d
TIMEOUT_H	./Common/TimeOut.h	13;"	d
TIMER_OFFSET_LIMIT	./Common/BaseType.h	/^const int	TIMER_OFFSET_LIMIT		= 10;			\/\/ TIMER时钟误差，大于该值时会自动纠正$/;"	v
TIME_TO_TRUE_QUIT	./Common/GameDefine.h	120;"	d
TRUE	./Common/BaseType.h	369;"	d
TRYLOCKOBJ_EX	./Common/Common.h	246;"	d
TSINGLEMAP_H	./Common/I_SingleMap.h	3;"	d
Thread	./Common/Thread.h	/^class Thread $/;"	c
ThreadStatus	./Common/Thread.h	/^	enum ThreadStatus $/;"	g	class:Thread
Time2DWORD	./Base/TimeManager.cpp	/^UINT TimeManager::Time2DWORD()$/;"	f	class:TimeManager
TimeManager	./Base/TimeManager.cpp	/^TimeManager::TimeManager()$/;"	f	class:TimeManager
TimeManager	./Base/TimeManager.h	/^class TimeManager$/;"	c
TimeOver	./Common/TimeOut.h	/^	bool	TimeOver	()						{ if(IsActive() && IsTimeOut()) return Clear(),true; return false; }$/;"	f	class:CTimeOutMS_
TimeOver	./Common/TimeOut.h	/^	bool	TimeOver	()						{ if(IsActive() && IsTimeOut()) return Clear(),true; return false; }$/;"	f	class:CTimeOut_
TimeOver	./Common/TimeOut.h	/^	bool	TimeOver	(int nMilliSecs)		{ if(IsActive() && IsTimeOut(nMilliSecs)) return Clear(),true; return false; }$/;"	f	class:CTimeOutMS_
TimeOver	./Common/TimeOut.h	/^	bool	TimeOver	(int nSecs)					{ if(IsActive() && IsTimeOut(nSecs)) return Clear(),true; return false; }$/;"	f	class:CTimeOut_
Time_t	./Common/Type.h	/^typedef INT				Time_t; $/;"	t
TimerFlush	./Base/logger.cpp	/^void Logger::TimerFlush(){$/;"	f	class:Logger
ToNextTick	./Common/TimeOut.cpp	/^bool CTimeOutMS_<I>::ToNextTick(int nMilliSecs)$/;"	f	class:CTimeOutMS_
ToNextTick	./Common/TimeOut.cpp	/^bool CTimeOut_<I>::ToNextTick(int nSecs)$/;"	f	class:CTimeOut_
ToNextTime	./Common/TimeOut.h	/^	bool	ToNextTime	()						{ if(IsTimeOut()) return Update(),true; else return false; }$/;"	f	class:CTimeOutMS_
ToNextTime	./Common/TimeOut.h	/^	bool	ToNextTime	()						{ if(IsTimeOut()) return Update(),true; else return false; }$/;"	f	class:CTimeOut_
ToNextTime	./Common/TimeOut.h	/^	bool	ToNextTime	(int nMilliSecs)		{ if(IsTimeOut(nMilliSecs)) return Update(),true; else return false; }$/;"	f	class:CTimeOutMS_
ToNextTime	./Common/TimeOut.h	/^	bool	ToNextTime	(int nSecs)				{ if(IsTimeOut(nSecs)) return Update(),true; else return false; }$/;"	f	class:CTimeOut_
ToNextTime	./Main/BattleTeam.cpp	/^BOOL CBattleTeam::ToNextTime()$/;"	f	class:CBattleTeam
TryLock	./Common/MyAutoMutex.cpp	/^BOOL CMyAutoMutex::TryLock()$/;"	f	class:CMyAutoMutex
TryMyMutexOBJ	./Common/MyAutoMutex.h	59;"	d
UCHAR	./Common/BaseType.h	/^typedef	unsigned char	UCHAR;							\/\/标准无符号char$/;"	t
UINT	./Common/BaseType.h	/^typedef	unsigned int	UINT;							\/\/标准无符号int$/;"	t
UINT32	./Common/BaseType.h	/^typedef UInt32 		UINT32;$/;"	t
UInt16	./Common/BaseType.h	/^typedef uint16_t	UInt16;$/;"	t
UInt16	./websocket/protocol.h	/^typedef uint16_t UInt16;$/;"	t
UInt32	./Common/BaseType.h	/^typedef uint32_t	UInt32;$/;"	t
UInt32	./websocket/protocol.h	/^typedef uint32_t UInt32;$/;"	t
UInt64	./Common/BaseType.h	/^typedef uint64_t	UInt64;$/;"	t
UInt8	./Common/BaseType.h	/^typedef uint8_t		UInt8;$/;"	t
ULONG	./Common/BaseType.h	/^typedef	unsigned long ULONG;							\/\/标准无符号long$/;"	t
UNLOCKOBJ	./Common/Common.h	250;"	d
UNLOCKOBJ	./Common/Common.h	259;"	d
UNLOCKOBJ_EX	./Common/Common.h	248;"	d
USHORT	./Common/BaseType.h	/^typedef	unsigned short USHORT;							\/\/标准无符号short$/;"	t
UnLock	./Common/MyAutoMutex.cpp	/^BOOL CMyAutoMutex::UnLock()$/;"	f	class:CMyAutoMutex
Unlock	./Base/GameUtil.h	/^		VOID	Unlock( ){ LeaveCriticalSection(&m_Lock); } ;$/;"	f	class:MyLock
Unlock	./Base/GameUtil.h	/^		VOID	Unlock( ){ pthread_mutex_unlock(&m_Mutex); } ;$/;"	f	class:MyLock
Unlock	./Common/PacketFactoryManager.h	/^	VOID				Unlock(){ m_Lock.Unlock(); }$/;"	f	class:PacketFactoryManager
Unlock	./Main/ClientPool.h	/^	void				Unlock()							{	m_Lock.Unlock();	} $/;"	f	class:ClientPool
Unlock	./Main/PlayerPool.h	/^	void				Unlock()							{	m_Lock.Unlock();	} $/;"	f	class:PlayerPool
UnlockMyMutexOBJ	./Common/MyAutoMutex.h	61;"	d
Update	./Common/TimeOut.h	/^	void	Update		()						{ m_tUpdateTime = (clock()\/CLOCKS_PER_SEC); }$/;"	f	class:CTimeOut_
Update	./Common/TimeOut.h	/^	void	Update		()						{ m_tUpdateTime = clock()\/1000; }$/;"	f	class:CTimeOutMS_
Update	./DataBase/DBMySql.cpp	/^int DBMySql::Update(const std::string& str)$/;"	f	class:DBMySql
UpdateFightScore	./Main/BattleTeam.cpp	/^VOID CBattleTeam::UpdateFightScore(INT nFightScore)$/;"	f	class:CBattleTeam
UpdateKingPlayer	./Main/BattleTeam.cpp	/^VOID CBattleTeam::UpdateKingPlayer()$/;"	f	class:CBattleTeam
UpdateNowTime	./Main/Player.cpp	/^DWORD Player::UpdateNowTime()$/;"	f	class:Player
UpdateRecord	./DataBase/DBMySql.cpp	/^bool DBMySql::UpdateRecord(std::string const& sql)$/;"	f	class:DBMySql
VERBOSE	./build/Makefile	/^VERBOSE = 1$/;"	m
VOID	./Common/BaseType.h	/^typedef	void	VOID;									\/\/标准空$/;"	t
VT_BATTLECONFUSIONTEAM_TOP_LIST	./Main/BattleTeam.h	/^typedef std::vector<BattleConfusionTeamTopInfo> VT_BATTLECONFUSIONTEAM_TOP_LIST;$/;"	t
VT_BCS	./Main/Battle.h	/^typedef std::vector< CBattleConfusionSingle* > VT_BCS;$/;"	t
VT_BC_TEAM	./Main/Battle.h	/^typedef std::vector< CBattleTeam* > VT_BC_TEAM;			\/\/大乱斗队伍列表$/;"	t
VT_ITEM_LIST	./Main/BattleTeam.h	/^typedef std::vector<ItemInfo> VT_ITEM_LIST;$/;"	t
VT_RB_TEAM	./Main/Battle.h	/^typedef std::vector< CBattleTeam* > VT_RB_TEAM;						\/\/红蓝战队队伍列表$/;"	t
WARN	./Base/logger.h	/^    WARN,   \/\/3$/;"	e	enum:LOG_LEVEL
WEBSOCKET_APPEND_DATA	./websocket/websocket_handler.h	/^     WEBSOCKET_APPEND_DATA      =0X0, \/\/表示附加数据$/;"	e	enum:WEBSOCKET_OPCODE_TYPE
WEBSOCKET_BINARY_DATA	./websocket/websocket_handler.h	/^     WEBSOCKET_BINARY_DATA      =0X2, \/\/表示二进制数据$/;"	e	enum:WEBSOCKET_OPCODE_TYPE
WEBSOCKET_CONNECT_CLOSE	./websocket/websocket_handler.h	/^     WEBSOCKET_CONNECT_CLOSE    =0X8, \/\/表示连接关闭$/;"	e	enum:WEBSOCKET_OPCODE_TYPE
WEBSOCKET_FIN_MSG_END	./websocket/websocket_handler.h	/^     WEBSOCKET_FIN_MSG_END      =1,  \/\/该消息为消息尾部$/;"	e	enum:WEBSOCKET_FIN_STATUS
WEBSOCKET_FIN_MSG_NOT_END	./websocket/websocket_handler.h	/^     WEBSOCKET_FIN_MSG_NOT_END  =0,  \/\/还有后续数据包$/;"	e	enum:WEBSOCKET_FIN_STATUS
WEBSOCKET_FIN_STATUS	./websocket/websocket_handler.h	/^enum WEBSOCKET_FIN_STATUS {$/;"	g
WEBSOCKET_HANDSHARKED	./websocket/websocket_handler.h	/^	WEBSOCKET_HANDSHARKED       = 1,$/;"	e	enum:WEBSOCKET_STATUS
WEBSOCKET_MASK_STATUS	./websocket/websocket_handler.h	/^enum WEBSOCKET_MASK_STATUS {$/;"	g
WEBSOCKET_NEED_MASK	./websocket/websocket_handler.h	/^     WEBSOCKET_NEED_MASK        =1,  \/\/需要掩码处理$/;"	e	enum:WEBSOCKET_MASK_STATUS
WEBSOCKET_NEED_NOT_MASK	./websocket/websocket_handler.h	/^     WEBSOCKET_NEED_NOT_MASK    =0,  \/\/不需要掩码处理$/;"	e	enum:WEBSOCKET_MASK_STATUS
WEBSOCKET_OPCODE_TYPE	./websocket/websocket_handler.h	/^enum WEBSOCKET_OPCODE_TYPE {$/;"	g
WEBSOCKET_PANG_PACK	./websocket/websocket_handler.h	/^     WEBSOCKET_PANG_PACK        =0XA, \/\/表示表示pong$/;"	e	enum:WEBSOCKET_OPCODE_TYPE
WEBSOCKET_PING_PACK	./websocket/websocket_handler.h	/^     WEBSOCKET_PING_PACK        =0X9, \/\/表示ping$/;"	e	enum:WEBSOCKET_OPCODE_TYPE
WEBSOCKET_STATUS	./websocket/websocket_handler.h	/^enum WEBSOCKET_STATUS {$/;"	g
WEBSOCKET_TEXT_DATA	./websocket/websocket_handler.h	/^     WEBSOCKET_TEXT_DATA        =0X1, \/\/表示文本数据$/;"	e	enum:WEBSOCKET_OPCODE_TYPE
WEBSOCKET_UNCONNECT	./websocket/websocket_handler.h	/^	WEBSOCKET_UNCONNECT         = 0,$/;"	e	enum:WEBSOCKET_STATUS
WORD	./Common/Type.h	/^	typedef USHORT WORD;$/;"	t
WORLDKERNEL_ONTIMER_MS	./Common/BaseType.h	/^const int	WORLDKERNEL_ONTIMER_MS	= 1000;			\/\/ 世界线程的ONTIMER频率$/;"	v
WORLD_LOGFILE	./Base/Log.h	46;"	d
Wait	./Common/Event.cpp	/^bool CEvent::Wait(int cms)$/;"	f	class:CEvent
WaitForSingleObject	./Common/Event.cpp	/^bool WaitForSingleObject(CEvent* pEvent, int cms)$/;"	f
Websocket_Handler	./websocket/websocket_handler.cpp	/^Websocket_Handler::Websocket_Handler(int fd, char* buff):$/;"	f	class:Websocket_Handler
Websocket_Handler	./websocket/websocket_handler.h	/^class Websocket_Handler{$/;"	c
Websocket_Request	./websocket/websocket_request.cpp	/^Websocket_Request::Websocket_Request():$/;"	f	class:Websocket_Request
Websocket_Request	./websocket/websocket_request.h	/^class Websocket_Request {$/;"	c
Websocket_Respond	./websocket/websocket_respond.cpp	/^Websocket_Respond::Websocket_Respond(): fin_(),opcode_(), mask_(){}$/;"	f	class:Websocket_Respond
Websocket_Respond	./websocket/websocket_respond.h	/^class Websocket_Respond {$/;"	c
World	./Main/World.cpp	/^World::World()$/;"	f	class:World
World	./Main/World.h	/^class World$/;"	c
Write	./MsgHandler/MsgAction.cpp	/^BOOL CMsgAction::Write(SocketOutputStream& oStream) const$/;"	f	class:CMsgAction
Write	./MsgHandler/MsgBattle.cpp	/^BOOL CMsgBattle::Write(SocketOutputStream& oStream) const$/;"	f	class:CMsgBattle
Write	./MsgHandler/MsgExchang.cpp	/^BOOL CMsgExchang::Write(SocketOutputStream& oStream) const$/;"	f	class:CMsgExchang
Write	./MsgHandler/MsgItem.cpp	/^BOOL CMsgItem::Write(SocketOutputStream& oStream) const$/;"	f	class:CMsgItem
Write	./MsgHandler/MsgLogin.cpp	/^BOOL CMsgLogin::Write(SocketOutputStream& oStream) const$/;"	f	class:CMsgLogin
Write	./MsgHandler/MsgSynRoomInfo.cpp	/^BOOL CMsgSynRoomInfo::Write(SocketOutputStream& oStream) const$/;"	f	class:CMsgSynRoomInfo
Write	./MsgHandler/MsgUserInfo.cpp	/^BOOL CMsgUserInfo::Write(SocketOutputStream& oStream) const$/;"	f	class:CMsgUserInfo
Write	./MsgHandler/MsgVas.cpp	/^BOOL CMsgVas::Write(SocketOutputStream& oStream) const$/;"	f	class:CMsgVas
Write	./MsgHandler/MsgWalk.cpp	/^BOOL CMsgWalk::Write(SocketOutputStream& oStream) const$/;"	f	class:CMsgWalk
Write	./MsgHandler/NetMsg.cpp	/^BOOL CNetMsg::Write(SocketOutputStream& oStream) const $/;"	f	class:CNetMsg
Write	./NetBase/SocketOutputStream.cpp	/^UINT SocketOutputStream::Write(const CHAR* buf, UINT len)$/;"	f	class:SocketOutputStream
ZERO_SETSIZE	./Common/BaseType.h	228;"	d
ZONE_SIZE	./Common/GameDefine.h	58;"	d
_ACTION_SYN_RELIVE	./MsgHandler/MsgAction.h	/^	_ACTION_SYN_RELIVE				= 2,		\/\/复活包	C->S$/;"	e	enum:_ACTION_TYPE
_ACTION_TYPE	./MsgHandler/MsgAction.h	/^enum _ACTION_TYPE$/;"	g
_BATTLE_ACTION_BATTLE_COLLIDE	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_COLLIDE 		= 6,		\/\/战斗中碰撞$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_COLLIDE_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_COLLIDE_FAIL 		= 6,		\/\/战斗中碰撞$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_COLLIDE_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_COLLIDE_SUC 		= 6,		\/\/战斗中碰撞$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_END	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_END			= 10,		\/\/战斗结束$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_END_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_END_FAIL			= 10,		\/\/战斗结束$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_END_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_END_SUC			= 10,		\/\/战斗结束$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_KILL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_KILL 			= 7,		\/\/战斗中击杀$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_KILL_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_KILL_FAIL 			= 7,		\/\/战斗中击杀$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_KILL_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_KILL_SUC 			= 7,		\/\/战斗中击杀$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_RELIVE	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_RELIVE		= 9, 		\/\/战斗中复活$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_RELIVE_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_RELIVE_FAIL		= 9, 		\/\/战斗中复活$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_RELIVE_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_RELIVE_SUC		= 9, 		\/\/战斗中复活$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_START	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_START			= 5,		\/\/战斗开始$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_START_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_START_FAIL			= 5,		\/\/战斗开始$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_START_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_START_SUC			= 5,		\/\/战斗开始$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_SYN_SCORE	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_SYN_SCORE		= 8,		\/\/战斗中同步积分$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_SYN_SCORE_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_SYN_SCORE_FAIL		= 8,		\/\/战斗中同步积分$/;"	e	enum:__anon4
_BATTLE_ACTION_BATTLE_SYN_SCORE_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_BATTLE_SYN_SCORE_SUC		= 8,		\/\/战斗中同步积分$/;"	e	enum:__anon4
_BATTLE_ACTION_CREATE_ROOM	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_CREATE_ROOM 			= 1,		\/\/创建房间$/;"	e	enum:__anon4
_BATTLE_ACTION_CREATE_ROOM_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_CREATE_ROOM_FAIL 			= 1,		\/\/创建房间$/;"	e	enum:__anon4
_BATTLE_ACTION_CREATE_ROOM_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_CREATE_ROOM_SUC 			= 1,		\/\/创建房间$/;"	e	enum:__anon4
_BATTLE_ACTION_INVITE_JOIN	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_INVITE_JOIN	 		= 4,		\/\/邀请好友加入$/;"	e	enum:__anon4
_BATTLE_ACTION_INVITE_JOIN_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_INVITE_JOIN_FAIL	 		= 4,		\/\/邀请好友加入$/;"	e	enum:__anon4
_BATTLE_ACTION_INVITE_JOIN_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_INVITE_JOIN_SUC	 		= 4,		\/\/邀请好友加入$/;"	e	enum:__anon4
_BATTLE_ACTION_QUICK_JOIN	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_QUICK_JOIN	 		= 3,		\/\/快速加入$/;"	e	enum:__anon4
_BATTLE_ACTION_QUICK_JOIN_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_QUICK_JOIN_FAIL	 		= 3,		\/\/快速加入$/;"	e	enum:__anon4
_BATTLE_ACTION_QUICK_JOIN_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_QUICK_JOIN_SUC	 		= 3,		\/\/快速加入$/;"	e	enum:__anon4
_BATTLE_ACTION_QUICK_MATCH	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_QUICK_MATCH 			= 2,		\/\/快速匹配$/;"	e	enum:__anon4
_BATTLE_ACTION_QUICK_MATCH_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_QUICK_MATCH_FAIL 			= 2,		\/\/快速匹配$/;"	e	enum:__anon4
_BATTLE_ACTION_QUICK_MATCH_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_QUICK_MATCH_SUC 			= 2,		\/\/快速匹配$/;"	e	enum:__anon4
_BATTLE_ACTION_TEAM_END	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_TEAM_END			= 10,		\/\/红蓝对战中战斗结束$/;"	e	enum:__anon4
_BATTLE_ACTION_TEAM_END_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_TEAM_END_FAIL			= 10,		\/\/红蓝对战中战斗结束$/;"	e	enum:__anon4
_BATTLE_ACTION_TEAM_END_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_TEAM_END_SUC			= 10,		\/\/红蓝对战中战斗结束$/;"	e	enum:__anon4
_BATTLE_ACTION_TEAM_START	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_TEAM_START			= 5,		\/\/红蓝对战中战斗开始$/;"	e	enum:__anon4
_BATTLE_ACTION_TEAM_START_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_TEAM_START_FAIL			= 5,		\/\/红蓝对战中战斗开始$/;"	e	enum:__anon4
_BATTLE_ACTION_TEAM_START_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_TEAM_START_SUC			= 5,		\/\/红蓝对战中战斗开始$/;"	e	enum:__anon4
_BATTLE_ACTION_TEAM_SYN_SCORE	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_TEAM_SYN_SCORE		= 8,		\/\/红蓝对战中同步队伍积分、击杀方车辆等级$/;"	e	enum:__anon4
_BATTLE_ACTION_TEAM_SYN_SCORE_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_TEAM_SYN_SCORE_FAIL		= 8,		\/\/红蓝对战中同步队伍积分、击杀方车辆等级$/;"	e	enum:__anon4
_BATTLE_ACTION_TEAM_SYN_SCORE_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_TEAM_SYN_SCORE_SUC		= 8,		\/\/红蓝对战中同步队伍积分、击杀方车辆等级$/;"	e	enum:__anon4
_BATTLE_ACTION_VIEW_AWARD	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_VIEW_AWARD			= 10,		\/\/战斗结束界面 看视频三倍奖励$/;"	e	enum:__anon4
_BATTLE_ACTION_VIEW_AWARD_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_VIEW_AWARD_FAIL			= 10,		\/\/战斗结束界面 看视频三倍奖励$/;"	e	enum:__anon4
_BATTLE_ACTION_VIEW_AWARD_SUC	./MsgHandler/MsgBattle.h	/^	_BATTLE_ACTION_VIEW_AWARD_SUC			= 10,		\/\/战斗结束界面 看视频三倍奖励$/;"	e	enum:__anon4
_BATTLE_MODEL_CONFUSION	./MsgHandler/MsgBattle.h	/^	_BATTLE_MODEL_CONFUSION				= 1,		\/\/大乱斗模式$/;"	e	enum:__anon3
_BATTLE_MODEL_NONE	./MsgHandler/MsgBattle.h	/^	_BATTLE_MODEL_NONE				= 0,		\/\/xxx模式$/;"	e	enum:__anon3
_BATTLE_MODEL_RB_FIGHT_TEAM	./MsgHandler/MsgBattle.h	/^	_BATTLE_MODEL_RB_FIGHT_TEAM				= 2,		\/\/红蓝队对战模式$/;"	e	enum:__anon3
_BATTLE_RESULT	./MsgHandler/MsgAction.h	/^enum _BATTLE_RESULT$/;"	g
_BATTLE_RESULT_FAIL	./MsgHandler/MsgBattle.h	/^	_BATTLE_RESULT_FAIL = 0,						\/\/失败$/;"	e	enum:__anon5
_BATTLE_RESULT_SUCCESS	./MsgHandler/MsgBattle.h	/^	_BATTLE_RESULT_SUCCESS = 1,						\/\/成功$/;"	e	enum:__anon5
_CLIENT_DATA	./Common/Config.h	/^	_CLIENT_DATA()$/;"	f	struct:_CLIENT_DATA
_CLIENT_DATA	./Common/Config.h	/^struct _CLIENT_DATA$/;"	s
_COMMAND_H_	./Protocol/Command.h	2;"	d
_EPOLL_	./Common/BaseType.h	183;"	d
_FIGHT_CONTINUE_TIME_	./Main/BattleTeam.h	/^const int _FIGHT_CONTINUE_TIME_ = 300;			\/\/战斗时间300秒$/;"	v
_FIGHT_CREATE_RANDOM_ITEM_ID	./Main/BattleTeam.h	/^static int _FIGHT_CREATE_RANDOM_ITEM_ID = 1;	\/\/生成道具的唯一id$/;"	v
_FIGHT_MODEL_TYPE	./Main/Battle.h	/^enum _FIGHT_MODEL_TYPE$/;"	g
_FIGHT_MODEL_TYPE_CONFUSION	./Main/Battle.h	/^	_FIGHT_MODEL_TYPE_CONFUSION 			= 0,		\/\/大乱斗模式	$/;"	e	enum:_FIGHT_MODEL_TYPE
_FIGHT_MODEL_TYPE_RB_FIGHT_TEAM	./Main/Battle.h	/^	_FIGHT_MODEL_TYPE_RB_FIGHT_TEAM 		= 1,		\/\/红蓝战队模式$/;"	e	enum:_FIGHT_MODEL_TYPE
_FIGHT_OWNER_COLOUR	./Main/BattleTeam.h	/^enum _FIGHT_OWNER_COLOUR$/;"	g
_FIGHT_OWNER_COLOUR_BLUE	./Main/BattleTeam.h	/^	_FIGHT_OWNER_COLOUR_BLUE 	= 1,		\/\/蓝方战队$/;"	e	enum:_FIGHT_OWNER_COLOUR
_FIGHT_OWNER_COLOUR_RED	./Main/BattleTeam.h	/^	_FIGHT_OWNER_COLOUR_RED 	= 0,		\/\/红方战队	$/;"	e	enum:_FIGHT_OWNER_COLOUR
_FIGHT_RESULT	./Main/BattleTeam.h	/^enum _FIGHT_RESULT$/;"	g
_FIGHT_RESULT_DEFEAT	./Main/BattleTeam.h	/^	_FIGHT_RESULT_DEFEAT 		= 3,		\/\/战败$/;"	e	enum:_FIGHT_RESULT
_FIGHT_RESULT_DRAW	./Main/BattleTeam.h	/^	_FIGHT_RESULT_DRAW	 		= 2,		\/\/平局$/;"	e	enum:_FIGHT_RESULT
_FIGHT_RESULT_NONE	./Main/BattleTeam.h	/^	_FIGHT_RESULT_NONE 			= 0,		\/\/无状态$/;"	e	enum:_FIGHT_RESULT
_FIGHT_RESULT_WIN	./Main/BattleTeam.h	/^	_FIGHT_RESULT_WIN 			= 1,		\/\/获胜	$/;"	e	enum:_FIGHT_RESULT
_ITEM_ACTION	./MsgHandler/MsgItem.h	/^enum _ITEM_ACTION$/;"	g
_ITEM_ACTION_CREATE_RANDOM_ITEM	./MsgHandler/MsgItem.h	/^	_ITEM_ACTION_CREATE_RANDOM_ITEM			= 2,		\/\/生成随机道具	C->S$/;"	e	enum:_ITEM_ACTION
_ITEM_ACTION_CREATE_RANDOM_ITEM_POS	./MsgHandler/MsgItem.h	/^	_ITEM_ACTION_CREATE_RANDOM_ITEM_POS 	= 1,		\/\/获取随机点$/;"	e	enum:_ITEM_ACTION
_ITEM_ACTION_PICKUP_RANDOM_ITEM	./MsgHandler/MsgItem.h	/^	_ITEM_ACTION_PICKUP_RANDOM_ITEM			= 3,		\/\/删除道具	C->S$/;"	e	enum:_ITEM_ACTION
_ITEM_SORCE	./Main/BattleTeam.h	/^const int _ITEM_SORCE[3] = {1000, 2000, 3000};$/;"	v
_ITEM_TYPE_1	./Main/BattleTeam.h	/^const int _ITEM_TYPE_1	= 110011;					\/\/现阶段只有矿石一种，大小不同积分不同$/;"	v
_Int64	./Common/Type.h	/^typedef struct _Int64$/;"	s
_MAX_ACCOUNTSIZE	./Common/BaseType.h	/^const int	_MAX_ACCOUNTSIZE	= 24;  	$/;"	v
_MAX_NAMESIZE	./Common/BaseType.h	/^const int 	_MAX_NAMESIZE 		= 32;$/;"	v
_MAX_PATH	./Common/BaseType.h	389;"	d
_MAX_TEAMAMOUNT	./Main/BattleTeam.h	/^const int _MAX_TEAMAMOUNT = 15;						\/\/队伍人数上限$/;"	v
_MAX_TITLESIZE	./Common/BaseType.h	/^const int	_MAX_TITLESIZE 		= 128;$/;"	v
_MSG_ACTION	./Protocol/Command.h	/^    _MSG_ACTION      		= 2006,		\/\/action包$/;"	e	enum:Command
_MSG_BATTLE	./Protocol/Command.h	/^    _MSG_BATTLE      		= 2004, 	\/\/战斗包$/;"	e	enum:Command
_MSG_BATTLE_TYPE	./websocket/protocol.h	/^enum _MSG_BATTLE_TYPE$/;"	g
_MSG_EXCHANGE	./Protocol/Command.h	/^    _MSG_EXCHANGE    		= 2008,		\/\/兑换道具包$/;"	e	enum:Command
_MSG_EXCHANGE	./Protocol/Command.h	/^enum _MSG_EXCHANGE$/;"	g
_MSG_EXCHANGE	./websocket/protocol.h	/^enum _MSG_EXCHANGE$/;"	g
_MSG_ITEM	./Protocol/Command.h	/^    _MSG_ITEM   			= 2007,		\/\/物品包$/;"	e	enum:Command
_MSG_ITEM_TYPE	./Protocol/Command.h	/^enum _MSG_ITEM_TYPE$/;"	g
_MSG_ITEM_TYPE	./websocket/protocol.h	/^enum _MSG_ITEM_TYPE$/;"	g
_MSG_LOGIN	./Protocol/Command.h	/^    _MSG_LOGIN	    		= 2001,		\/\/登录包$/;"	e	enum:Command
_MSG_SYN_ROOM	./Protocol/Command.h	/^    _MSG_SYN_ROOM    		= 2003,		\/\/同步房间信息包$/;"	e	enum:Command
_MSG_USERINFO	./Protocol/Command.h	/^    _MSG_USERINFO    		= 2002,		\/\/角色信息包$/;"	e	enum:Command
_MSG_VAS	./Protocol/Command.h	/^    _MSG_VAS         		= 2005,		\/\/商城包$/;"	e	enum:Command
_MSG_VAS	./Protocol/Command.h	/^enum _MSG_VAS$/;"	g
_MSG_VAS	./websocket/protocol.h	/^enum _MSG_VAS$/;"	g
_MSG_WALK	./Protocol/Command.h	/^    _MSG_WALK	    		= 2009,		\/\/走路包$/;"	e	enum:Command
_PET_H__	./Main/Pet.h	12;"	d
_PLAYER_INFO_STRUCT_BUFF	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_BUFF,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_CUR_STAR_SUM	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_CUR_STAR_SUM,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_CUR_USE_CAR	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_CUR_USE_CAR,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_GIFT_DAY	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_GIFT_DAY,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_GIFT_SUM	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_GIFT_SUM,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_GOLD_SUM	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_GOLD_SUM,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_GRANDING_ID	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_GRANDING_ID,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_HEAD_PICURL	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_HEAD_PICURL,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_KILL_SUM	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_KILL_SUM,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_KING_SUM	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_KING_SUM,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_NICK_NAME	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_NICK_NAME,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_STAR_DAY	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_STAR_DAY,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_STAR_SUM	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_STAR_SUM,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_UID	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_UID=0,$/;"	e	enum:PLAYER_INFO_STRUCT
_PLAYER_INFO_STRUCT_UNLOCK_SUM	./Main/UserData.h	/^    _PLAYER_INFO_STRUCT_UNLOCK_SUM,$/;"	e	enum:PLAYER_INFO_STRUCT
_PORTOCOL_H_	./websocket/protocol.h	3;"	d
_PROTOCOL_PACKET_TYPE	./websocket/protocol.h	/^enum _PROTOCOL_PACKET_TYPE{$/;"	g
_RANDOM_CREATE_ITEM_INTERVAL_SECS	./Main/BattleTeam.h	/^const int _RANDOM_CREATE_ITEM_INTERVAL_SECS = 15;	\/\/15秒随机生成道具$/;"	v
_RANDOM_CREATE_ITEM_SUM	./Main/BattleTeam.h	/^const int _RANDOM_CREATE_ITEM_SUM = 15;	\/\/15秒随机生成道具$/;"	v
_RESULT_FAIL	./MsgHandler/MsgAction.h	/^	_RESULT_FAIL = 0,							\/\/失败$/;"	e	enum:_BATTLE_RESULT
_RESULT_SUCCESS	./MsgHandler/MsgAction.h	/^	_RESULT_SUCCESS = 1,						\/\/成功$/;"	e	enum:_BATTLE_RESULT
_ROBOTCONF_H__	./Main/RobotConf.h	2;"	d
_ROBOT_H__	./Main/Robot.h	2;"	d
_SERVER_DATA	./Common/Config.h	/^	_SERVER_DATA()$/;"	f	struct:_SERVER_DATA
_SERVER_DATA	./Common/Config.h	/^struct _SERVER_DATA$/;"	s
_SERVER_INFO	./Common/Config.h	/^	_SERVER_INFO()$/;"	f	struct:_SERVER_INFO
_SERVER_INFO	./Common/Config.h	/^struct _SERVER_INFO$/;"	s
_SERVER_VERSION	./Common/BaseType.h	/^	const double _SERVER_VERSION		=333.20180823;\/\/服务器内部版本号$/;"	v
_SERVER_WORLD	./Common/Config.h	/^	_SERVER_WORLD()$/;"	f	struct:_SERVER_WORLD
_SERVER_WORLD	./Common/Config.h	/^struct _SERVER_WORLD$/;"	s
_SETSIZE_	./Common/BaseType.h	210;"	d
_SETSIZE_	./Common/BaseType.h	217;"	d
_SETSIZE_	./Common/BaseType.h	224;"	d
_SETSIZE_	./Common/BaseType.h	231;"	d
_SHA1_H_	./websocket/sha1.h	25;"	d
_SYNROOMINFO_ACTION	./MsgHandler/MsgSynRoomInfo.h	/^enum _SYNROOMINFO_ACTION$/;"	g
_SYNROOMINFO_ACTION_ADD_MEMBER	./MsgHandler/MsgSynRoomInfo.h	/^	_SYNROOMINFO_ACTION_ADD_MEMBER 		= 1,						\/\/添加成员$/;"	e	enum:_SYNROOMINFO_ACTION
_SYNROOMINFO_ACTION_DEL_MEMBER	./MsgHandler/MsgSynRoomInfo.h	/^	_SYNROOMINFO_ACTION_DEL_MEMBER 		= 2,						\/\/删除成员$/;"	e	enum:_SYNROOMINFO_ACTION
_SYNROOMINFO_RESULT	./MsgHandler/MsgSynRoomInfo.h	/^enum _SYNROOMINFO_RESULT$/;"	g
_SYNROOMINFO_RESULT_FAIL	./MsgHandler/MsgSynRoomInfo.h	/^	_SYNROOMINFO_RESULT_FAIL 		= 0,						\/\/失败$/;"	e	enum:_SYNROOMINFO_RESULT
_SYNROOMINFO_RESULT_SUCCESS	./MsgHandler/MsgSynRoomInfo.h	/^	_SYNROOMINFO_RESULT_SUCCESS 	= 1,						\/\/成功$/;"	e	enum:_SYNROOMINFO_RESULT
_TEAM_STATUS	./Main/BattleTeam.h	/^enum _TEAM_STATUS$/;"	g
_TEAM_STATUS_CREATE	./Main/BattleTeam.h	/^	_TEAM_STATUS_CREATE =	0,$/;"	e	enum:_TEAM_STATUS
_TEAM_STATUS_END	./Main/BattleTeam.h	/^	_TEAM_STATUS_END =	4,					\/\/战争已经结束$/;"	e	enum:_TEAM_STATUS
_TEAM_STATUS_PREPARE	./Main/BattleTeam.h	/^	_TEAM_STATUS_PREPARE =	2,				\/\/5V5的队伍人员已经满了，可以进行匹配战斗了。$/;"	e	enum:_TEAM_STATUS
_TEAM_STATUS_QIUCK_MATCH	./Main/BattleTeam.h	/^	_TEAM_STATUS_QIUCK_MATCH =	1,$/;"	e	enum:_TEAM_STATUS
_TEAM_STATUS_START	./Main/BattleTeam.h	/^	_TEAM_STATUS_START =	3,$/;"	e	enum:_TEAM_STATUS
_TIME_T_DEFINED	./Common/Type.h	28;"	d
_VAS_BUY	./MsgHandler/MsgVas.h	/^	_VAS_BUY		= 1,			\/\/买道具$/;"	e	enum:__anon6
_VAS_BUY_FAIL	./MsgHandler/MsgVas.h	/^	_VAS_BUY_FAIL	= 3,			\/\/买道具失败$/;"	e	enum:__anon6
_VAS_BUY_SUC	./MsgHandler/MsgVas.h	/^	_VAS_BUY_SUC	= 2,			\/\/买道具成功$/;"	e	enum:__anon6
_VAS_BUY_TYPE_GOLD	./MsgHandler/MsgVas.h	/^	_VAS_BUY_TYPE_GOLD	= 1,			\/\/金币买道具$/;"	e	enum:__anon7
_VAS_BUY_TYPE_VIWE	./MsgHandler/MsgVas.h	/^	_VAS_BUY_TYPE_VIWE	= 2,			\/\/视频买道具$/;"	e	enum:__anon7
_VERSION	./Common/BaseType.h	/^	const double _VERSION				=333;$/;"	v
_VERSION_2	./Common/BaseType.h	/^	const double _VERSION_2				=1;$/;"	v
__AUTOPTR_H__	./Common/AutoPtr.h	20;"	d
__BASE_TYPE_H__	./Common/BaseType.h	20;"	d
__BATTLECONFUSION_SINGLE_H__	./Main/BattleConfusionSingle.h	13;"	d
__BATTLECONFUSION_TEAM_H__	./Main/BattleTeam.h	13;"	d
__BATTLEMANAGER_H__	./Main/BattleManager.h	13;"	d
__BATTLE_H__	./Main/Battle.h	13;"	d
__CLIENTMANAGER_H__	./Main/ClientManager.h	13;"	d
__CLIENTPLAYER_H__	./Main/ClientPlayer.h	13;"	d
__CLIENTPOOL_H__	./Main/ClientPool.h	12;"	d
__CLIENT_SOCKET_H__	./NetBase/ClientSocket.h	13;"	d
__COMMON_H__	./Common/Common.h	12;"	d
__CONFIG_H__	./Common/Config.h	12;"	d
__DBMYSQL_H__	./DataBase/DBMySql.h	2;"	d
__ENTER_FUNCTION	./Common/BaseType.h	439;"	d
__ENTER_FUNCTION	./Common/BaseType.h	442;"	d
__ENTER_FUNCTION	./Common/BaseType.h	446;"	d
__ENTER_FUNCTION	./Common/Type.h	131;"	d
__ENTER_FUNCTION	./Common/Type.h	137;"	d
__ENTER_FUNCTION	./Common/Type.h	140;"	d
__ENTER_FUNCTION	./Common/Type.h	144;"	d
__ENTER_FUNCTION_FOXNET	./Common/BaseType.h	422;"	d
__ENTER_FUNCTION_FOXNET	./Common/BaseType.h	425;"	d
__FILE_API_H__	./NetBase/FileAPI.h	13;"	d
__GAMEDEFINE2_H__	./Common/GameDefine2.h	13;"	d
__GAMEDEFINE_H__	./Common/GameDefine.h	13;"	d
__GAMEUTIL_H__	./Base/GameUtil.h	13;"	d
__HALF_PI	./Base/GameUtil.h	35;"	d
__INIFILE_H__	./Common/IniFile.h	21;"	d
__LEAVE_FUNCTION	./Common/BaseType.h	440;"	d
__LEAVE_FUNCTION	./Common/BaseType.h	443;"	d
__LEAVE_FUNCTION	./Common/BaseType.h	447;"	d
__LEAVE_FUNCTION	./Common/Type.h	132;"	d
__LEAVE_FUNCTION	./Common/Type.h	138;"	d
__LEAVE_FUNCTION	./Common/Type.h	141;"	d
__LEAVE_FUNCTION	./Common/Type.h	145;"	d
__LEAVE_FUNCTION_FOXNET	./Common/BaseType.h	423;"	d
__LEAVE_FUNCTION_FOXNET	./Common/BaseType.h	426;"	d
__LINUX__	./Base/GameUtil.h	26;"	d
__LINUX__	./Common/BaseType.h	34;"	d
__LINUX__	./NetBase/SocketAPI.cpp	20;"	d	file:
__LOG_H__	./Base/Log.h	13;"	d
__MSG_ACTION_H__	./MsgHandler/MsgAction.h	12;"	d
__MSG_ACTION_H__	./MsgHandler/MsgItem.h	12;"	d
__MSG_BATTLE_H__	./MsgHandler/MsgBattle.h	12;"	d
__MSG_EXCHANG_H__	./MsgHandler/MsgExchang.h	12;"	d
__MSG_LOGIN_H__	./MsgHandler/MsgLogin.h	12;"	d
__MSG_LOGIN_H__	./MsgHandler/MsgSynRoomInfo.h	12;"	d
__MSG_USERINFO_H__	./MsgHandler/MsgUserInfo.h	12;"	d
__MSG_VAS_H__	./MsgHandler/MsgVas.h	12;"	d
__MSG_WALK_H__	./MsgHandler/MsgWalk.h	12;"	d
__NETMSG_H__	./MsgHandler/NetMsg.h	13;"	d
__PACKETFACTORY_H__	./Common/PacketFactory.h	13;"	d
__PACKETFACTORY_MANAGER_H__	./Common/PacketFactoryManager.h	13;"	d
__PACKET_DEFINE_H__	./NetBase/PacketDefine.h	12;"	d
__PACKET_H__	./NetBase/NetMsg.h	13;"	d
__PI	./Base/GameUtil.h	34;"	d
__PLAYERMANAGER_H__	./Main/PlayerManager.h	13;"	d
__PLAYERPOOL_H__	./Main/PlayerPool.h	12;"	d
__PLAYERSTATUS_H__	./Common/PlayerStatus.h	13;"	d
__QUARTER_PI	./Base/GameUtil.h	36;"	d
__ROBOTBASE_H__	./Main/Player.h	13;"	d
__SCENEMGR_H__	./WorldData/SceneMgr.h	11;"	d
__SCENE_H__	./WorldData/Scene.h	11;"	d
__SERVERMANAGER_H__	./Main/ServerManager.h	13;"	d
__SERVERPLAYER_H__	./Main/ServerPlayer.h	13;"	d
__SERVER_SOCKET_H__	./NetBase/ServerSocket.h	13;"	d
__SOCKET_API_H__	./NetBase/SocketAPI.h	18;"	d
__SOCKET_H__	./NetBase/Socket.h	13;"	d
__SOCKET_INPUT_STREAM_H__	./NetBase/SocketInputStream.h	13;"	d
__SOCKET_OUTPUT_STREAM_H__	./NetBase/SocketOutputStream.h	13;"	d
__THREAD_H__	./Common/Thread.h	13;"	d
__TIMEMANAGER_H__	./Base/TimeManager.h	16;"	d
__TYPE_H__	./Common/Type.h	12;"	d
__USERDATA_H__	./Main/UserData.h	12;"	d
__WEBSOCKET_HANDLER__	./websocket/websocket_handler.h	2;"	d
__WEBSOCKET_REQUEST__	./websocket/websocket_request.h	2;"	d
__WEBSOCKET_RESPOND__	./websocket/websocket_respond.h	2;"	d
__WORLD_H__	./Main/World.h	12;"	d
_accID	./Main/Robot.h	/^    UInt32      _accID;$/;"	m	class:Robot
_data	./Main/Robot.h	/^    RobotBaseProp _data;$/;"	m	class:Robot
_protoTypeID	./Main/Robot.h	/^    UInt32      _protoTypeID;$/;"	m	class:Robot
_ptr	./Common/AutoPtr.h	/^	T* _ptr;$/;"	m	class:AutoPtr
_robotID	./Main/Robot.h	/^    std::string _robotID;$/;"	m	class:Robot
_tend	./Base/TimeManager.h	/^	struct timeval _tstart, _tend;$/;"	m	class:TimeManager	typeref:struct:TimeManager::
_tstart	./Base/TimeManager.h	/^	struct timeval _tstart, _tend;$/;"	m	class:TimeManager	typeref:struct:TimeManager::timeval
a	./Common/Type.h	/^	LONG				a;$/;"	m	struct:_Int64
accept	./NetBase/Socket.cpp	/^SOCKET Socket::accept(struct sockaddr* addr, UINT* len)$/;"	f	class:Socket
accept_ex	./NetBase/SocketAPI.cpp	/^SOCKET SocketAPI::accept_ex(SOCKET s, struct sockaddr *cliaddr, UINT* addrlen)$/;"	f	class:SocketAPI
account	./Common/Config.h	/^	UInt32 		account;$/;"	m	struct:RobotConf
affected_rows	./DataBase/DBMySql.cpp	/^int DBMySql::affected_rows()$/;"	f	class:DBMySql
age	./Common/Config.h	/^	UInt16 		age;$/;"	m	struct:RobotConf
age	./Main/RobotConf.h	/^    UInt32 age;$/;"	m	struct:RobotBaseProp
atoi_safe	./Main/UserData.cpp	/^int atoi_safe(const char* str){$/;"	f
available	./NetBase/Socket.cpp	/^INT Socket::available() const$/;"	f	class:Socket
availablefile_ex	./NetBase/FileAPI.cpp	/^UINT FileAPI::availablefile_ex (INT fd)$/;"	f	class:FileAPI
availablesocket_ex	./NetBase/SocketAPI.cpp	/^UINT SocketAPI::availablesocket_ex(SOCKET s)$/;"	f	class:SocketAPI
awaken	./Main/Robot.cpp	/^bool Robot::awaken()$/;"	f	class:Robot
b	./Common/Type.h	/^	ULONG				b;$/;"	m	struct:_Int64
base64_chars	./websocket/base64.cpp	/^static const std::string base64_chars = $/;"	v	file:
base64_decode	./websocket/base64.cpp	/^std::string base64_decode(std::string const& encoded_string) {$/;"	f
base64_encode	./websocket/base64.cpp	/^std::string base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len) {$/;"	f
beautiful	./Common/Config.h	/^	UInt16 		beautiful;$/;"	m	struct:RobotConf
beautiful	./Main/RobotConf.h	/^    UInt32 beautiful;$/;"	m	struct:RobotBaseProp
bind	./NetBase/Socket.cpp	/^BOOL Socket::bind(UINT port, UINT nAddr\/* = 0*\/)$/;"	f	class:Socket
bind_ex	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::bind_ex(SOCKET s, const struct sockaddr* myaddr, UINT addrlen)$/;"	f	class:SocketAPI
birthday	./Main/RobotConf.h	/^    UInt64 birthday;$/;"	m	struct:RobotBaseProp
bornArea	./Common/Config.h	/^    UInt16      bornArea;$/;"	m	struct:RobotConf
broadcast_list_	./websocket/websocket_handler.cpp	/^std::list<int> Websocket_Handler::broadcast_list_ ; $/;"	m	class:Websocket_Handler	file:
broadcast_list_	./websocket/websocket_handler.h	/^    static std::list<int>   broadcast_list_;\/\/广播列表$/;"	m	class:Websocket_Handler
buff_	./websocket/websocket_handler.h	/^	char*                    buff_;    \/\/用来临时缓存客户端发来请求的详细数据$/;"	m	class:Websocket_Handler
buffer	./Protocol/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon9	file:
cJSON	./Protocol/cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	./Protocol/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddBoolToObject	./Protocol/cJSON.h	137;"	d
cJSON_AddFalseToObject	./Protocol/cJSON.h	136;"	d
cJSON_AddItemReferenceToArray	./Protocol/cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f
cJSON_AddItemReferenceToObject	./Protocol/cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f
cJSON_AddItemToArray	./Protocol/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f
cJSON_AddItemToObject	./Protocol/cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddItemToObjectCS	./Protocol/cJSON.c	/^void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddNullToObject	./Protocol/cJSON.h	134;"	d
cJSON_AddNumberToObject	./Protocol/cJSON.h	138;"	d
cJSON_AddStringToObject	./Protocol/cJSON.h	139;"	d
cJSON_AddTrueToObject	./Protocol/cJSON.h	135;"	d
cJSON_Array	./Protocol/cJSON.h	37;"	d
cJSON_CreateArray	./Protocol/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f
cJSON_CreateBool	./Protocol/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f
cJSON_CreateDoubleArray	./Protocol/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateFalse	./Protocol/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f
cJSON_CreateFloatArray	./Protocol/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateIntArray	./Protocol/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateNull	./Protocol/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f
cJSON_CreateNumber	./Protocol/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f
cJSON_CreateObject	./Protocol/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f
cJSON_CreateString	./Protocol/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f
cJSON_CreateStringArray	./Protocol/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateTrue	./Protocol/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f
cJSON_Delete	./Protocol/cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f
cJSON_DeleteItemFromArray	./Protocol/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f
cJSON_DeleteItemFromObject	./Protocol/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f
cJSON_DetachItemFromArray	./Protocol/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f
cJSON_DetachItemFromObject	./Protocol/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f
cJSON_Duplicate	./Protocol/cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f
cJSON_False	./Protocol/cJSON.h	32;"	d
cJSON_GetArrayItem	./Protocol/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f
cJSON_GetArraySize	./Protocol/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f
cJSON_GetErrorPtr	./Protocol/cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f
cJSON_GetObjectItem	./Protocol/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f
cJSON_Hooks	./Protocol/cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	./Protocol/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	./Protocol/cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_InsertItemInArray	./Protocol/cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	f
cJSON_IsReference	./Protocol/cJSON.h	40;"	d
cJSON_Minify	./Protocol/cJSON.c	/^void cJSON_Minify(char *json)$/;"	f
cJSON_NULL	./Protocol/cJSON.h	34;"	d
cJSON_New_Item	./Protocol/cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:
cJSON_Number	./Protocol/cJSON.h	35;"	d
cJSON_Object	./Protocol/cJSON.h	38;"	d
cJSON_Parse	./Protocol/cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f
cJSON_ParseWithOpts	./Protocol/cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f
cJSON_Print	./Protocol/cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}$/;"	f
cJSON_PrintBuffered	./Protocol/cJSON.c	/^char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)$/;"	f
cJSON_PrintUnformatted	./Protocol/cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}$/;"	f
cJSON_ReplaceItemInArray	./Protocol/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f
cJSON_ReplaceItemInObject	./Protocol/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f
cJSON_SetIntValue	./Protocol/cJSON.h	142;"	d
cJSON_SetNumberValue	./Protocol/cJSON.h	143;"	d
cJSON_String	./Protocol/cJSON.h	36;"	d
cJSON_StringIsConst	./Protocol/cJSON.h	41;"	d
cJSON_True	./Protocol/cJSON.h	33;"	d
cJSON__h	./Protocol/cJSON.h	24;"	d
cJSON_free	./Protocol/cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_malloc	./Protocol/cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_strcasecmp	./Protocol/cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:
cJSON_strdup	./Protocol/cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:
checkSum	./MsgHandler/NetMsg.h	/^	UInt32  checkSum;          \/\/ adler32 check, adler32 of command, retCode and protobufData$/;"	m	struct:ProtocolCmd
checkSum	./MsgHandler/NetMsg.h	/^	UInt32  checkSum;          \/\/ adler32 check, adler32 of command, retCode and protobufData$/;"	m	struct:ProtocolHead
checkSum	./NetBase/NetMsg.h	/^	UInt32  checkSum;          \/\/ adler32 check, adler32 of command, retCode and protobufData$/;"	m	struct:ProtocolCmd
checkSum	./NetBase/NetMsg.h	/^	UInt32  checkSum;          \/\/ adler32 check, adler32 of command, retCode and protobufData$/;"	m	struct:ProtocolHead
child	./Protocol/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
classId	./Main/RobotConf.h	/^    UInt8 classId;$/;"	m	struct:RobotBaseProp
clean	./Common/Config.h	/^	UInt16 		clean;$/;"	m	struct:RobotConf
clean	./Main/RobotConf.h	/^    UInt32 clean;$/;"	m	struct:RobotBaseProp
clear	./Common/T_MyQueue.h	/^	void    clear   ()			{	m_set.clear();			}$/;"	f	class:CMyQueue
close	./NetBase/Socket.cpp	/^VOID Socket::close() $/;"	f	class:Socket
close_ex	./NetBase/FileAPI.cpp	/^VOID FileAPI::close_ex(INT fd)$/;"	f	class:FileAPI
closesocket_ex	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::closesocket_ex(SOCKET s)$/;"	f	class:SocketAPI
cmd	./MsgHandler/NetMsg.h	/^	UInt16  cmd;           \/\/ Message type     --- Client Send Msg - NULL$/;"	m	struct:ProtocolCmd
cmd	./MsgHandler/NetMsg.h	/^	UInt16  cmd;           \/\/ Message type     --- Client Send Msg - NULL$/;"	m	struct:ProtocolHead
cmd	./NetBase/NetMsg.h	/^	UInt16  cmd;           \/\/ Message type     --- Client Send Msg - NULL$/;"	m	struct:ProtocolCmd
cmd	./NetBase/NetMsg.h	/^	UInt16  cmd;           \/\/ Message type     --- Client Send Msg - NULL$/;"	m	struct:ProtocolHead
connect	./DataBase/DBMySql.cpp	/^int DBMySql::connect()$/;"	f	class:DBMySql
connect	./NetBase/Socket.cpp	/^BOOL Socket::connect()$/;"	f	class:Socket
connect	./NetBase/Socket.cpp	/^BOOL Socket::connect(const CHAR* host, UINT port)$/;"	f	class:Socket
connect_ex	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::connect_ex(SOCKET s, const struct sockaddr* servaddr, UINT addrlen)$/;"	f	class:SocketAPI
create	./NetBase/Socket.cpp	/^BOOL Socket::create(int nIPModule \/*=0*\/)$/;"	f	class:Socket
create_reference	./Protocol/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:
dataLen	./MsgHandler/NetMsg.h	/^	UInt32 dataLen()$/;"	f	struct:ProtocolCmd
dataLen	./MsgHandler/NetMsg.h	/^    UInt32 dataLen()$/;"	f	struct:ProtocolHead
dataLen	./NetBase/NetMsg.h	/^	UInt32 dataLen()$/;"	f	struct:ProtocolCmd
dataLen	./NetBase/NetMsg.h	/^    UInt32 dataLen()$/;"	f	struct:ProtocolHead
dbMysql	./Main/UserData.cpp	/^DBMySql* CUserData::dbMysql=new DBMySql("127.0.0.1", "root","", "youxi",3306);$/;"	m	class:CUserData	file:
dbMysql	./Main/UserData.h	/^    static DBMySql* dbMysql;$/;"	m	class:CUserData
del_broadcast_list	./websocket/websocket_handler.cpp	/^int Websocket_Handler::del_broadcast_list(){$/;"	f	class:Websocket_Handler
destroy	./DataBase/DBMySql.cpp	/^void DBMySql::destroy()$/;"	f	class:DBMySql
dup_ex	./NetBase/FileAPI.cpp	/^INT FileAPI::dup_ex(INT fd)$/;"	f	class:FileAPI
end_time	./Common/MyAutoMutex.h	/^	time_t end_time;$/;"	m	class:CMyAutoMutex
energy	./Common/Config.h	/^	UInt16 		energy;$/;"	m	struct:RobotConf
energy	./Main/RobotConf.h	/^    UInt32 energy;$/;"	m	struct:RobotBaseProp
ensure	./Protocol/cJSON.c	/^static char* ensure(printbuffer *p,int needed)$/;"	f	file:
ep	./Protocol/cJSON.c	/^static const char *ep;$/;"	v	file:
epollCreate	./NetBase/Socket.cpp	/^int Socket::epollCreate(int size)$/;"	f	class:Socket
epollCtl	./NetBase/Socket.cpp	/^int Socket::epollCtl(int epfd, int op, int fd, struct epoll_event *event)$/;"	f	class:Socket
epoll_wait_ex	./NetBase/SocketAPI.cpp	/^INT SocketAPI::epoll_wait_ex(int epfd, struct epoll_event * events, int maxevents, int timeout)$/;"	f	class:SocketAPI
error_msg	./DataBase/DBMySql.cpp	/^std::string DBMySql::error_msg(const std::string& func)$/;"	f	class:DBMySql
execute	./DataBase/DBMySql.cpp	/^int DBMySql::execute(const std::string& str)$/;"	f	class:DBMySql
fcntl_ex	./NetBase/FileAPI.cpp	/^INT FileAPI::fcntl_ex(INT fd , INT cmd) $/;"	f	class:FileAPI
fcntl_ex	./NetBase/FileAPI.cpp	/^INT FileAPI::fcntl_ex(INT fd, INT cmd, LONG arg) $/;"	f	class:FileAPI
fd_	./websocket/websocket_handler.h	/^	int                     fd_;            \/\/客户端连接的fd$/;"	m	class:Websocket_Handler
features	./build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	./build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
fetch_fin	./websocket/websocket_request.cpp	/^int Websocket_Request::fetch_fin(char *msg, int &pos){$/;"	f	class:Websocket_Request
fetch_http_info	./websocket/websocket_handler.cpp	/^int Websocket_Handler::fetch_http_info(){$/;"	f	class:Websocket_Handler
fetch_mask	./websocket/websocket_request.cpp	/^int Websocket_Request::fetch_mask(char *msg, int &pos){$/;"	f	class:Websocket_Request
fetch_masking_key	./websocket/websocket_request.cpp	/^int Websocket_Request::fetch_masking_key(char *msg, int &pos){$/;"	f	class:Websocket_Request
fetch_opcode	./websocket/websocket_request.cpp	/^int Websocket_Request::fetch_opcode(char *msg, int &pos){$/;"	f	class:Websocket_Request
fetch_payload	./websocket/websocket_request.cpp	/^int Websocket_Request::fetch_payload(char *msg, int &pos){$/;"	f	class:Websocket_Request
fetch_payload_length	./websocket/websocket_request.cpp	/^int Websocket_Request::fetch_payload_length(char *msg, int &pos){$/;"	f	class:Websocket_Request
fetch_websocket_info	./websocket/websocket_request.cpp	/^int Websocket_Request::fetch_websocket_info(char *msg){$/;"	f	class:Websocket_Request
fin_	./websocket/websocket_request.h	/^	uint8_t fin_;$/;"	m	class:Websocket_Request
fin_	./websocket/websocket_respond.h	/^	uint8_t fin_;$/;"	m	class:Websocket_Respond
firstByteMark	./Protocol/cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
first_	./websocket/websocket_handler.cpp	/^bool  Websocket_Handler::first_ = true; $/;"	m	class:Websocket_Handler	file:
first_	./websocket/websocket_handler.h	/^    static bool             first_ ;        \/\/表示构造函数是否是第一次初始化$/;"	m	class:Websocket_Handler
fork_ex	./NetBase/SocketAPI.cpp	/^pid_t SocketAPI::fork_ex(void)$/;"	f	class:SocketAPI
format_head	./Base/logger.h	/^        std::string format_head(LOG_LEVEL level, std::string filename, int lineno){$/;"	f	class:Logger
free_fn	./Protocol/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
g_IoModelEPoll	./Common/Common.cpp	/^int g_IoModelEPoll = IOModelOpen("EPOLL");$/;"	v
g_IoModelPoll	./Common/Common.cpp	/^int g_IoModelPoll = IOModelOpen("POLL");$/;"	v
g_IoModelSelect	./Common/Common.cpp	/^int g_IoModelSelect = IOModelOpen("SELECT");$/;"	v
g_World	./Main/World.cpp	/^World g_World;$/;"	v
g_bLogSave	./Common/Common.cpp	/^BOOL g_bLogSave = true;$/;"	v
g_config	./Common/Common.cpp	/^ST_CONFIG	g_config;$/;"	v
g_log_lock	./Base/Log.cpp	/^MyLock g_log_lock ;$/;"	v
g_pBattleManager	./Main/BattleManager.cpp	/^CBattleManager* g_pBattleManager = NULL;$/;"	v
g_pClientPool	./Main/ClientPool.cpp	/^ClientPool* g_pClientPool = NULL;$/;"	v
g_pLog	./Base/Log.cpp	/^Log* g_pLog=NULL ;$/;"	v
g_pLogFileName	./Base/Log.cpp	/^const CHAR* g_pLogFileName[] =$/;"	v
g_pServerManager	./Main/ServerManager.cpp	/^ServerManager* g_pServerManager = NULL;$/;"	v
g_pTimeManager	./Base/TimeManager.cpp	/^TimeManager*	g_pTimeManager=NULL;$/;"	v
g_robotConf_NICO	./Common/Common.cpp	/^RobotConf 	g_robotConf_NICO;$/;"	v
gender	./Common/Config.h	/^	UInt16 		gender;$/;"	m	struct:RobotConf
gender	./Main/RobotConf.h	/^    UInt8 gender;$/;"	m	struct:RobotBaseProp
getAllLen	./MsgHandler/NetMsg.h	/^	UInt32 getAllLen()$/;"	f	struct:ProtocolCmd
getAllLen	./MsgHandler/NetMsg.h	/^    UInt32 getAllLen()$/;"	f	struct:ProtocolHead
getAllLen	./NetBase/NetMsg.h	/^	UInt32 getAllLen()$/;"	f	struct:ProtocolCmd
getAllLen	./NetBase/NetMsg.h	/^    UInt32 getAllLen()$/;"	f	struct:ProtocolHead
getFileName	./Base/logger.h	/^        std::string getFileName(){$/;"	f	class:Logger
getHostIP	./NetBase/Socket.cpp	/^IP_t Socket::getHostIP() const$/;"	f	class:Socket
getLinger	./NetBase/Socket.cpp	/^UINT Socket::getLinger() const$/;"	f	class:Socket
getMaxSeg	./NetBase/Socket.cpp	/^INT Socket::getMaxSeg() const$/;"	f	class:Socket
getPort	./NetBase/Socket.cpp	/^UINT Socket::getPort() const$/;"	f	class:Socket
getProtoTypeId	./Main/Robot.h	/^    inline UInt32 getProtoTypeId()$/;"	f	class:Robot
getRcvLowAt	./NetBase/Socket.cpp	/^INT Socket::getRcvLowAt() const$/;"	f	class:Socket
getRcvTimeO	./NetBase/Socket.cpp	/^BOOL Socket::getRcvTimeO(struct timeval& timeout)$/;"	f	class:Socket
getReceiveBufferSize	./NetBase/Socket.cpp	/^UINT Socket::getReceiveBufferSize() const$/;"	f	class:Socket
getRobotData	./Main/Robot.h	/^    inline RobotBaseProp& getRobotData()$/;"	f	class:Robot
getRobotId	./Main/Robot.h	/^    inline const char* getRobotId()$/;"	f	class:Robot
getRobotIdStr	./Main/Robot.h	/^    inline std::string& getRobotIdStr()$/;"	f	class:Robot
getSendBufferSize	./NetBase/Socket.cpp	/^UINT Socket::getSendBufferSize() const$/;"	f	class:Socket
getSendLowAt	./NetBase/Socket.cpp	/^INT Socket::getSendLowAt() const$/;"	f	class:Socket
getSendTimeO	./NetBase/Socket.cpp	/^BOOL Socket::getSendTimeO(struct timeval& timeout)$/;"	f	class:Socket
getSocketAddIn	./NetBase/Socket.cpp	/^SOCKADDR_IN& Socket::getSocketAddIn()$/;"	f	class:Socket
getSocketAddIn6	./NetBase/Socket.cpp	/^SOCKADDR_IN6& Socket::getSocketAddIn6()$/;"	f	class:Socket
getSocketError	./NetBase/Socket.cpp	/^UINT Socket::getSocketError()$/;"	f	class:Socket
getSocketID	./NetBase/Socket.cpp	/^SOCKET Socket::getSocketID()$/;"	f	class:Socket
getStatus	./Common/Thread.h	/^	ThreadStatus getStatus() { return m_Status; }$/;"	f	class:Thread
getTID	./Common/Thread.h	/^	TID getTID() { return m_TID; }$/;"	f	class:Thread
getTime	./Base/logger.h	/^        std::string getTime()$/;"	f	class:Logger
get_errno	./DataBase/DBMySql.cpp	/^int DBMySql::get_errno()$/;"	f	class:DBMySql
get_error	./DataBase/DBMySql.cpp	/^std::string DBMySql::get_error()$/;"	f	class:DBMySql
get_msg	./websocket/websocket_request.cpp	/^std::string Websocket_Request::get_msg(){$/;"	f	class:Websocket_Request
get_msg_length	./websocket/websocket_request.cpp	/^uint64_t Websocket_Request::get_msg_length(){$/;"	f	class:Websocket_Request
get_msg_opcode_	./websocket/websocket_request.cpp	/^uint8_t Websocket_Request::get_msg_opcode_(){$/;"	f	class:Websocket_Request
getaccId	./Main/Robot.h	/^    inline UInt32 getaccId()$/;"	f	class:Robot
getbuff	./websocket/websocket_handler.h	/^inline char *Websocket_Handler::getbuff(){$/;"	f	class:Websocket_Handler
getfilenonblocking_ex	./NetBase/FileAPI.cpp	/^BOOL FileAPI::getfilenonblocking_ex(INT fd)$/;"	f	class:FileAPI
getsocketnonblocking_ex	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::getsocketnonblocking_ex(SOCKET s)$/;"	f	class:SocketAPI
getsocketopt_ex	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::getsocketopt_ex(SOCKET s, INT level, INT optname, VOID* optval, INT* optlen)$/;"	f	class:SocketAPI
hand_error	./Common/BaseType.h	87;"	d
handshark	./websocket/websocket_handler.cpp	/^int Websocket_Handler::handshark(){$/;"	f	class:Websocket_Handler
header_map_	./websocket/websocket_handler.h	/^	HEADER_MAP              header_map_;    \/\/用来处理SHA1处理后的key-value$/;"	m	class:Websocket_Handler
hunger	./Common/Config.h	/^	UInt16 		hunger;$/;"	m	struct:RobotConf
hunger	./Main/RobotConf.h	/^    UInt32 hunger;$/;"	m	struct:RobotBaseProp
id	./Common/Config.h	/^	UInt16		id;$/;"	m	struct:RobotConf
info_arch	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
init	./Main/Robot.cpp	/^bool Robot::init(const char* robotID, UInt32 accID, UInt32 protoTypeID)$/;"	f	class:Robot
initialize	./DataBase/DBMySql.cpp	/^int DBMySql::initialize()$/;"	f	class:DBMySql
initialize	./DataBase/DBMySql.cpp	/^int DBMySql::initialize(const std::string& host, const std::string& user, const std::string& passwd, const std::string& db, short port)$/;"	f	class:DBMySql
intellectual	./Common/Config.h	/^	UInt16 		intellectual;$/;"	m	struct:RobotConf
intellectual	./Main/RobotConf.h	/^    UInt32 intellectual;$/;"	m	struct:RobotBaseProp
ioctl_ex	./NetBase/FileAPI.cpp	/^VOID FileAPI::ioctl_ex(INT fd, INT request, VOID* argp)$/;"	f	class:FileAPI
ioctlsocket_ex	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::ioctlsocket_ex(SOCKET s, LONG cmd, ULONG* argp)$/;"	f	class:SocketAPI
isKeepAlive	./NetBase/Socket.cpp	/^BOOL Socket::isKeepAlive() const$/;"	f	class:Socket
isNoDelay	./NetBase/Socket.cpp	/^BOOL Socket::isNoDelay() const$/;"	f	class:Socket
isNonBlocking	./NetBase/Socket.cpp	/^BOOL Socket::isNonBlocking()const $/;"	f	class:Socket
isReuseAddr	./NetBase/Socket.cpp	/^BOOL Socket::isReuseAddr() const$/;"	f	class:Socket
isReusePort	./NetBase/Socket.cpp	/^BOOL Socket::isReusePort() const$/;"	f	class:Socket
isSockError	./NetBase/Socket.cpp	/^INT Socket::isSockError() const$/;"	f	class:Socket
isValid	./NetBase/Socket.cpp	/^BOOL Socket::isValid() const$/;"	f	class:Socket
is_base64	./websocket/base64.cpp	/^static inline bool is_base64(unsigned char c) {$/;"	f	file:
lauchServer	./Run.sh	/^function lauchServer()$/;"	f
lauchServer	./build/Run.sh	/^function lauchServer()$/;"	f
length	./Protocol/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon9	file:
less_	./Main/BattleTeam.cpp	/^bool less_(const BattleConfusionTeamTopInfo & obj1, const BattleConfusionTeamTopInfo & obj2) $/;"	f
listen	./NetBase/Socket.cpp	/^BOOL Socket::listen(INT backlog)$/;"	f	class:Socket
listen_ex	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::listen_ex(SOCKET s, INT backlog\/*= MAX_BACKLOG*\/)$/;"	f	class:SocketAPI
listen_ex2	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::listen_ex2(SOCKET s, INT backlog)$/;"	f	class:SocketAPI
listen_fd_	./websocket/websocket_handler.cpp	/^int  Websocket_Handler::listen_fd_; $/;"	m	class:Websocket_Handler	file:
listen_fd_	./websocket/websocket_handler.h	/^	static int              listen_fd_;     \/\/epoll监听的listen_fd$/;"	m	class:Websocket_Handler
locality	./Main/RobotConf.h	/^    UInt16 locality;     \/\/ ref HouseArea.xlsx$/;"	m	struct:RobotBaseProp
lock_var	./Common/MyAutoMutex.h	/^	int lock_var;$/;"	m	class:CMyAutoMutex
log_InlineLog	./Common/Common.h	59;"	d
log_InlineLogCLIENT	./Common/Common.h	/^inline void	log_InlineLogCLIENT(const char* pFilename, const char * sFormat, ...)$/;"	f
log_Save	./Common/Common.cpp	/^void log_Save(const char * pFilename, const char * pBuf, int nFlag\/*=0*\/)$/;"	f
log_assert	./Common/Common.h	/^inline void   log_assert(const char* type, const char* str, const char* file, int line) { LOGERROR("★%s(%s)★ in %s, %d", type, str, file, line); }$/;"	f
log_szFilename	./Common/Common.cpp	/^char		log_szFilename[BUFSIZE]	= "Logfile";$/;"	v
log_szTitle	./Common/Common.cpp	/^char		log_szTitle[BUFSIZE]	= "未命名程序 V1.0";			\/\/? 可能空间不足$/;"	v
log_tStartServerTime	./Common/Common.cpp	/^time_t		log_tStartServerTime	= 0;$/;"	v
longPhy	./Main/RobotConf.h	/^    UInt32 longPhy;$/;"	m	struct:RobotBaseProp
long_physical	./Common/Config.h	/^	UInt16 		long_physical;$/;"	m	struct:RobotConf
lovely	./Common/Config.h	/^	UInt16 		lovely;$/;"	m	struct:RobotConf
lovely	./Main/RobotConf.h	/^    UInt32 lovely;$/;"	m	struct:RobotBaseProp
lseek_ex	./NetBase/FileAPI.cpp	/^LONG FileAPI::lseek_ex (INT fd, LONG offset, INT whence)$/;"	f	class:FileAPI
m_AccountID	./Main/Player.h	/^	UInt32 						m_AccountID;$/;"	m	class:Player
m_Buffer	./NetBase/SocketInputStream.h	/^	CHAR* 		m_Buffer;$/;"	m	class:SocketInputStream
m_Buffer	./NetBase/SocketOutputStream.h	/^	CHAR* 		m_Buffer;$/;"	m	class:SocketOutputStream
m_BufferLen	./NetBase/SocketInputStream.h	/^	UINT 		m_BufferLen;$/;"	m	class:SocketInputStream
m_BufferLen	./NetBase/SocketOutputStream.h	/^	UINT 		m_BufferLen;$/;"	m	class:SocketOutputStream
m_CacheSize	./Base/Log.h	/^	INT				m_CacheSize ;$/;"	m	class:Log
m_ClientCount	./Main/ClientPool.h	/^	UINT				m_ClientCount;$/;"	m	class:ClientPool
m_ClientPoolMaxCount	./Main/ClientPool.h	/^	UINT				m_ClientPoolMaxCount;	$/;"	m	class:ClientPool
m_ClientSet	./Main/ServerManager.h	/^    struct pollfd                   m_ClientSet[CLIENT_MAX_SIZE + 1];   \/\/1:服务器监听套接字增加一位   $/;"	m	class:ServerManager	typeref:struct:ServerManager::pollfd
m_CurPlayerCount	./Main/PlayerPool.h	/^	UINT				m_CurPlayerCount;			\/\/当前在线人数$/;"	m	class:PlayerPool
m_CurrentTime	./Base/TimeManager.h	/^	UINT			m_CurrentTime;$/;"	m	class:TimeManager
m_DayTime	./Base/Log.h	/^	UINT			m_DayTime ;$/;"	m	class:Log
m_EffectiveEpollEvents	./Main/ServerManager.h	/^    struct epoll_event              m_EffectiveEpollEvents[CLIENT_MAX_SIZE + 1];   \/\/1:服务器监听套接字增加一位(有消息的)$/;"	m	class:ServerManager	typeref:struct:ServerManager::epoll_event
m_EnableShareMem	./Common/Config.h	/^	BOOL			m_EnableShareMem;$/;"	m	struct:_CLIENT_DATA
m_EnableShareMem	./Common/Config.h	/^	BOOL			m_EnableShareMem;$/;"	m	struct:_SERVER_DATA
m_EpollEvents	./Main/ServerManager.h	/^    struct epoll_event              m_EpollEvents[CLIENT_MAX_SIZE + 1];   \/\/1:服务器监听套接字增加一位，\/\/留作后期使用$/;"	m	class:ServerManager	typeref:struct:ServerManager::epoll_event
m_EpollFd	./NetBase/Socket.h	/^    int 					m_EpollFd;$/;"	m	class:Socket
m_ExceptFDs	./Main/ServerManager.h	/^	fd_set				m_ExceptFDs[SELECT_MAX];$/;"	m	class:ServerManager
m_FactoryMap	./Common/PacketFactoryManager.h	/^	FactoryMap 			m_FactoryMap;$/;"	m	class:PacketFactoryManager
m_Flag	./Main/Player.h	/^	UINT		m_Flag;$/;"	m	struct:ASYNC_PACKET
m_GiftDay	./Main/UserData.h	/^    std::string m_GiftDay;              \/\/string 当天获取礼包的次数$/;"	m	struct:PlayerInfoStruct
m_HashServer	./Common/Config.h	/^	INT				m_HashServer[OVER_MAX_SERVER];$/;"	m	struct:_SERVER_INFO
m_Head	./NetBase/SocketInputStream.h	/^	UINT 		m_Head;$/;"	m	class:SocketInputStream
m_Head	./NetBase/SocketOutputStream.h	/^	UINT 		m_Head;$/;"	m	class:SocketOutputStream
m_HeadPicurl	./Main/UserData.h	/^    std::string m_HeadPicurl;           \/\/string 头像$/;"	m	struct:PlayerInfoStruct
m_Host	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	CHAR m_Host[IP_SIZE];	$/;"	m	class:CMTServerSocket
m_Host	./NetBase/Socket.h	/^	CHAR m_Host[IP_SIZE];$/;"	m	class:Socket
m_IP	./Common/Config.h	/^	CHAR			m_IP[IP_SIZE];$/;"	m	struct:_SERVER_WORLD
m_IP0	./Common/Config.h	/^	CHAR			m_IP0[IP_SIZE];$/;"	m	struct:_CLIENT_DATA
m_IP0	./Common/Config.h	/^	CHAR			m_IP0[IP_SIZE];$/;"	m	struct:_SERVER_DATA
m_IP1	./Common/Config.h	/^	CHAR			m_IP1[IP_SIZE];$/;"	m	struct:_CLIENT_DATA
m_IP1	./Common/Config.h	/^	CHAR			m_IP1[IP_SIZE];$/;"	m	struct:_SERVER_DATA
m_Index	./MsgHandler/NetMsg.h	/^	BYTE			m_Index;						\/\/消息索引号$/;"	m	class:CNetMsg
m_Index	./NetBase/NetMsg.h	/^	BYTE			m_Index;						\/\/消息索引号$/;"	m	class:CNetMsg
m_Info	./Main/UserData.h	/^    PlayerInfoStruct        m_Info;         \/\/结构size:344 Now;$/;"	m	class:CUserData
m_IsDisconnect	./Main/Player.h	/^	BOOL 						m_IsDisconnect;$/;"	m	class:Player
m_IsEmpty	./Main/Player.h	/^	BOOL 						m_IsEmpty;$/;"	m	class:Player
m_Lock	./Base/GameUtil.h	/^		CRITICAL_SECTION m_Lock ;$/;"	m	class:MyLock
m_Lock	./Common/PacketFactoryManager.h	/^	MyLock				m_Lock;$/;"	m	class:PacketFactoryManager
m_Lock	./Main/ClientPool.h	/^	MyLock				m_Lock;$/;"	m	class:ClientPool
m_Lock	./Main/PlayerPool.h	/^	MyLock				m_Lock;$/;"	m	class:PlayerPool
m_LogCache	./Base/Log.h	/^	CHAR*			m_LogCache[LOG_FILE_NUMBER] ;	\/\/日志内存区$/;"	m	class:Log
m_LogLock	./Base/Log.h	/^	MyLock			m_LogLock[LOG_FILE_NUMBER] ;	\/\/日志读写锁$/;"	m	class:Log
m_LogPos	./Base/Log.h	/^	INT				m_LogPos[LOG_FILE_NUMBER] ;		\/\/日志当前有效数据位置$/;"	m	class:Log
m_MachineID	./Common/Config.h	/^	ID_t			m_MachineID;$/;"	m	struct:_CLIENT_DATA
m_MachineID	./Common/Config.h	/^	ID_t			m_MachineID;$/;"	m	struct:_SERVER_DATA
m_MaxBufferLen	./NetBase/SocketInputStream.h	/^	UINT 		m_MaxBufferLen;$/;"	m	class:SocketInputStream
m_MaxBufferLen	./NetBase/SocketOutputStream.h	/^	UINT 		m_MaxBufferLen;$/;"	m	class:SocketOutputStream
m_MaxEpollIndex	./Main/ServerManager.h	/^    INT                             m_MaxEpollIndex;  \/\/m_EpollEvents[i]最大不空闲位置的下标$/;"	m	class:ServerManager
m_MaxFD	./Main/ServerManager.h	/^	SOCKET 				m_MaxFD;$/;"	m	class:ServerManager
m_MaxIndex	./Main/ServerManager.h	/^    INT                             m_MaxIndex;  \/\/m_ClientSet[i]最大不空闲位置的下标 $/;"	m	class:ServerManager
m_MinFD	./Main/ServerManager.h	/^	SOCKET 				m_MinFD;$/;"	m	class:ServerManager
m_Mutex	./Base/GameUtil.h	/^		pthread_mutex_t 	m_Mutex; $/;"	m	class:MyLock
m_NickName	./Main/UserData.h	/^    std::string m_NickName;             \/\/string 昵称$/;"	m	struct:PlayerInfoStruct
m_PID	./Main/Player.h	/^	PlayerID_t					m_PID;$/;"	m	class:Player
m_PacketIndex	./Main/Player.h	/^	BYTE						m_PacketIndex;$/;"	m	class:Player
m_PlayerID	./Main/Player.h	/^	PlayerID_t		m_PlayerID;$/;"	m	struct:ASYNC_PACKET
m_PlayerManagerID	./Main/Player.h	/^	ID_t						m_PlayerManagerID;$/;"	m	class:Player
m_PlayerPoolMaxCount	./Main/PlayerPool.h	/^	UINT				m_PlayerPoolMaxCount;	$/;"	m	class:PlayerPool
m_Port	./Common/Config.h	/^	UINT			m_Port;$/;"	m	struct:_SERVER_WORLD
m_Port	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	UINT m_Port;$/;"	m	class:CMTServerSocket
m_Port	./NetBase/Socket.h	/^	UINT m_Port;$/;"	m	class:Socket
m_Port0	./Common/Config.h	/^	UINT			m_Port0;$/;"	m	struct:_CLIENT_DATA
m_Port0	./Common/Config.h	/^	UINT			m_Port0;$/;"	m	struct:_SERVER_DATA
m_Port1	./Common/Config.h	/^	UINT			m_Port1;$/;"	m	struct:_CLIENT_DATA
m_Port1	./Common/Config.h	/^	UINT			m_Port1;$/;"	m	struct:_SERVER_DATA
m_Position	./Main/ClientPool.h	/^	UINT				m_Position;$/;"	m	class:ClientPool
m_ReadFDs	./Main/ServerManager.h	/^	fd_set				m_ReadFDs[SELECT_MAX];$/;"	m	class:ServerManager
m_RecvBuffMsg	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	char		m_RecvBuffMsg[RECV_BUFFER_SIZE];$/;"	m	class:CMTClientSocket
m_RecvBuffMsg	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	CHAR 						m_RecvBuffMsg[RECV_BUFF_SIZE];				\/\/接收缓冲区$/;"	m	class:CMTServerSocket
m_ReportIntervalTime	./Main/PlayerPool.h	/^	DWORD 				m_ReportIntervalTime;		\/\/人数爆满日志报警时间间隔$/;"	m	class:PlayerPool
m_SendBuffMsg	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	char		m_SendBuffMsg[SEND_BUFFER_SIZE];$/;"	m	class:CMTClientSocket
m_SendBuffMsg	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	CHAR                        m_SendBuffMsg[SEND_BUFF_SIZE];				\/\/发送缓冲区$/;"	m	class:CMTServerSocket
m_ServerCount	./Common/Config.h	/^	UINT			m_ServerCount;$/;"	m	struct:_SERVER_INFO
m_ServerID	./Common/Config.h	/^	ID_t			m_ServerID;$/;"	m	struct:_CLIENT_DATA
m_ServerID	./Common/Config.h	/^	ID_t			m_ServerID;$/;"	m	struct:_SERVER_DATA
m_SetTime	./Base/TimeManager.h	/^	time_t			m_SetTime;$/;"	m	class:TimeManager
m_Size	./Common/PacketFactoryManager.h	/^	UINT				m_Size;$/;"	m	class:PacketFactoryManager
m_SockAddr	./NetBase/Socket.h	/^	SOCKADDR_IN  m_SockAddr;$/;"	m	class:Socket
m_SockAddr6	./NetBase/Socket.h	/^	SOCKADDR_IN6 m_SockAddr6;$/;"	m	class:Socket
m_SocketID	./NetBase/Socket.h	/^	SOCKET m_SocketID;$/;"	m	class:Socket
m_StampTime	./Main/BattleConfusionSingle.h	/^	time_t m_StampTime;						\/\/报名时间$/;"	m	class:CBattleConfusionSingle
m_StarDay	./Main/UserData.h	/^    std::string m_StarDay;              \/\/string 当天保留星星的次数$/;"	m	struct:PlayerInfoStruct
m_StartTime	./Base/TimeManager.h	/^	UINT			m_StartTime;$/;"	m	class:TimeManager
m_Status	./Common/Thread.h	/^	ThreadStatus m_Status;$/;"	m	class:Thread
m_Status	./Main/ClientPlayer.h	/^	UINT			m_Status;$/;"	m	class:ClientPlayer
m_Status	./Main/ServerPlayer.h	/^	UINT			m_Status;$/;"	m	class:ServerPlayer
m_Status	./MsgHandler/NetMsg.h	/^	BYTE			m_Status;						\/\/消息状态$/;"	m	class:CNetMsg
m_Status	./NetBase/NetMsg.h	/^	BYTE			m_Status;						\/\/消息状态$/;"	m	class:CNetMsg
m_StrAccount	./Main/Player.h	/^	std::string                 m_StrAccount;$/;"	m	class:Player
m_TID	./Common/Thread.h	/^	TID m_TID;$/;"	m	class:Thread
m_TM	./Base/TimeManager.h	/^	tm				m_TM;$/;"	m	class:TimeManager
m_Tail	./NetBase/SocketInputStream.h	/^	UINT 		m_Tail;$/;"	m	class:SocketInputStream
m_Tail	./NetBase/SocketOutputStream.h	/^	UINT 		m_Tail;$/;"	m	class:SocketOutputStream
m_ThreadID	./Main/ClientManager.h	/^	TID					m_ThreadID;$/;"	m	class:ClientManager
m_ThreadID	./Main/ServerManager.h	/^	TID                             m_ThreadID;$/;"	m	class:ServerManager
m_Timeout	./Main/ServerManager.h	/^	struct timeval		m_Timeout[SELECT_MAX];$/;"	m	class:ServerManager	typeref:struct:ServerManager::timeval
m_Type	./Common/Config.h	/^	INT				m_Type;$/;"	m	struct:_CLIENT_DATA
m_Type	./Common/Config.h	/^	INT				m_Type;$/;"	m	struct:_SERVER_DATA
m_UID	./Main/Player.h	/^	ID_t						m_UID;$/;"	m	class:Player
m_UnlockSum	./Main/UserData.h	/^    std::string m_UnlockSum;            \/\/string 已解锁车辆$/;"	m	struct:PlayerInfoStruct
m_UserData	./Main/Player.h	/^	CUserData 	     			m_UserData;$/;"	m	class:Player
m_World	./Common/Config.h	/^	_SERVER_WORLD	m_World;$/;"	m	struct:_SERVER_INFO
m_WriteFDs	./Main/ServerManager.h	/^	fd_set				m_WriteFDs[SELECT_MAX];$/;"	m	class:ServerManager
m_aServerHash	./Main/ServerManager.h	/^	PlayerID_t                      m_aServerHash[OVER_MAX_SERVER];$/;"	m	class:ServerManager
m_bACCActive	./Main/ClientManager.h	/^	BOOL 				m_bACCActive;$/;"	m	class:ClientManager
m_bActive	./Main/ClientManager.h	/^	BOOL 				m_bActive;$/;"	m	class:ClientManager
m_bActive	./Main/ServerManager.h	/^	BOOL 				m_bActive;$/;"	m	class:ServerManager
m_bActive	./Main/World.h	/^	BOOL 				m_bActive;$/;"	m	class:World
m_bCondInitialized	./Common/Event.h	/^	bool m_bCondInitialized;$/;"	m	class:CEvent
m_bEventStatus	./Common/Event.h	/^	bool m_bEventStatus;$/;"	m	class:CEvent
m_bIsManualReset	./Common/Event.h	/^	bool m_bIsManualReset;$/;"	m	class:CEvent
m_bMTSActive	./Main/ClientManager.h	/^	BOOL 				m_bMTSActive;$/;"	m	class:ClientManager
m_bMutexInitialized	./Common/Event.h	/^	bool m_bMutexInitialized;$/;"	m	class:CEvent
m_bOper	./Base/GameUtil.h	/^	BOOL m_bOper;$/;"	m	class:CMyTimer
m_bOwner	./Common/SingleMap.h	/^	bool		m_bOwner;$/;"	m	class:CSingleMap
m_bPWActive	./Main/ClientManager.h	/^	BOOL 				m_bPWActive;$/;"	m	class:ClientManager
m_bufFilename	./Common/IniFile.h	/^	char m_bufFilename[INIWORDSIZE];$/;"	m	class:CIniFile
m_bufSection	./Common/IniFile.h	/^	char m_bufSection[INIWORDSIZE];$/;"	m	class:CIniFile
m_cond	./Common/Event.h	/^	pthread_cond_t m_cond;$/;"	m	class:CEvent
m_db	./DataBase/DBMySql.h	/^    std::string m_db;    $/;"	m	class:DBMySql
m_file	./Base/logger.h	/^        std::ofstream m_file;$/;"	m	class:Logger
m_fileName	./Base/logger.h	/^        std::string m_fileName;$/;"	m	class:Logger
m_flushTimer	./Base/logger.h	/^        bool m_flushTimer;$/;"	m	class:Logger
m_hThread	./Common/Thread.h	/^	HANDLE m_hThread;$/;"	m	class:Thread
m_handler	./NetBase/Socket.h	/^        Websocket_Handler*                              m_handler;$/;"	m	class:Socket
m_host	./DataBase/DBMySql.h	/^    std::string m_host;$/;"	m	class:DBMySql
m_iFDSize	./Main/ServerManager.h	/^	INT 				m_iFDSize;$/;"	m	class:ServerManager
m_id	./Main/BattleTeam.h	/^	static UINT 	m_id;										\/\/队伍id		$/;"	m	class:CBattleTeam
m_iter	./Common/SingleMap.h	/^		MAP_ITER	m_iter;$/;"	m	class:CSingleMap::Iterator
m_level	./Base/logger.h	/^        LOG_LEVEL m_level;$/;"	m	class:Logger
m_logName	./Base/logger.h	/^        std::string m_logName;$/;"	m	class:Logger
m_map	./Common/SingleMap.h	/^	MAPINDEX	m_map;$/;"	m	class:CSingleMap
m_mtx	./Base/logger.h	/^        std::mutex m_mtx;$/;"	m	class:Logger
m_mutex	./Common/Event.h	/^	pthread_mutex_t m_mutex;$/;"	m	class:CEvent
m_mysql	./DataBase/DBMySql.h	/^	MYSQL* m_mysql;$/;"	m	class:DBMySql
m_nAddGold	./Main/UserData.h	/^    UINT32      m_nAddGold;             \/\/int  战斗结束后金币加成百分比 100%$/;"	m	struct:PlayerInfoStruct
m_nAddScore	./Main/UserData.h	/^    UINT32      m_nAddScore;            \/\/int  初始积分加成 3000$/;"	m	struct:PlayerInfoStruct
m_nBuff	./Main/UserData.h	/^    UInt32      m_nBuff;$/;"	m	struct:PlayerInfoStruct
m_nCarLevel	./Main/UserData.h	/^    UINT32      m_nCarLevel;            \/\/daluandou chelaing dangqiandengji $/;"	m	struct:PlayerInfoStruct
m_nCurStarSum	./Main/UserData.h	/^    UInt32      m_nCurStarSum;          \/\/int 当前星星数量$/;"	m	struct:PlayerInfoStruct
m_nCurUseCar	./Main/UserData.h	/^    UInt32      m_nCurUseCar;           \/\/int 当前使用中的车辆$/;"	m	struct:PlayerInfoStruct
m_nDataLen	./MsgHandler/NetMsg.h	/^	UINT 	m_nDataLen;$/;"	m	class:CNetMsg
m_nDataLen	./NetBase/NetMsg.h	/^	UINT 	m_nDataLen;$/;"	m	class:CNetMsg
m_nEffectiveEpollFds	./Main/ServerManager.h	/^    INT 							m_nEffectiveEpollFds;         \/\/ 有消息通知的fd数量$/;"	m	class:ServerManager
m_nEffectivePollFds	./Main/ServerManager.h	/^    INT 							m_nEffectivePollFds;         \/\/ 有消息通知的fd数量$/;"	m	class:ServerManager
m_nEpollFd	./Main/ServerManager.h	/^    INT                             m_nEpollFd;             \/\/ 创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大。这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看\/proc\/进程id\/fd\/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。$/;"	m	class:ServerManager
m_nFightKillSum	./Main/UserData.h	/^    UInt32      m_nFightKillSum;       \/\/int  本局击杀数 初始0$/;"	m	struct:PlayerInfoStruct
m_nFightLevel	./Main/UserData.h	/^    UInt32      m_nFightLevel;         \/\/int  本局等级 初始1$/;"	m	struct:PlayerInfoStruct
m_nFightResult	./Main/BattleTeam.h	/^	INT 			m_nFightResult;								\/\/战斗结果$/;"	m	class:CBattleTeam
m_nFightScore	./Main/UserData.h	/^    UInt32      m_nFightScore;         \/\/int  本局积分 初始1000$/;"	m	struct:PlayerInfoStruct
m_nFightTeamColour	./Main/BattleTeam.h	/^	INT 	        m_nFightTeamColour;							\/\/战队所属（红队、蓝队）$/;"	m	class:CBattleTeam
m_nFightTeamKillSum	./Main/BattleTeam.h	/^	INT 			m_nFightTeamKillSum;						\/\/战队的击杀数量$/;"	m	class:CBattleTeam
m_nFightTotalScore	./Main/BattleTeam.h	/^	INT 			m_nFightTotalScore;							\/\/战斗积分$/;"	m	class:CBattleTeam
m_nFirstHand	./NetBase/Socket.h	/^       int m_nFirstHand; $/;"	m	class:Socket
m_nGiftSum	./Main/UserData.h	/^    UInt32      m_nGiftSum;             \/\/int 当天获取礼包的次数$/;"	m	struct:PlayerInfoStruct
m_nGoldSum	./Main/UserData.h	/^    UInt32      m_nGoldSum;             \/\/int 金币数量  $/;"	m	struct:PlayerInfoStruct
m_nGrandingId	./Main/UserData.h	/^    UInt32      m_nGrandingId;          \/\/int 段位id$/;"	m	struct:PlayerInfoStruct
m_nHeadPos	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	INT                         m_nHeadPos;									\/\/头$/;"	m	class:CMTServerSocket
m_nInterval	./Common/TimeOut.h	/^	int		m_nInterval;$/;"	m	class:CTimeOutMS_
m_nInterval	./Common/TimeOut.h	/^	int		m_nInterval;$/;"	m	class:CTimeOut_
m_nKillSum	./Main/UserData.h	/^    UInt32      m_nKillSum;             \/\/int 击杀数量$/;"	m	struct:PlayerInfoStruct
m_nKingSorce	./Main/BattleTeam.h	/^	INT 			m_nKingSorce;								\/\/霸主积分$/;"	m	class:CBattleTeam
m_nKingSum	./Main/UserData.h	/^    UInt32      m_nKingSum;             \/\/int 霸主令牌数量$/;"	m	struct:PlayerInfoStruct
m_nPacketSize	./MsgHandler/MsgAction.h	/^	UINT m_nPacketSize;	$/;"	m	class:CMsgActionFactory
m_nPacketSize	./MsgHandler/MsgBattle.h	/^	UINT m_nPacketSize;	$/;"	m	class:CMsgBattleFactory
m_nPacketSize	./MsgHandler/MsgExchang.h	/^	UINT m_nPacketSize;	$/;"	m	class:CMsgExchangFactory
m_nPacketSize	./MsgHandler/MsgItem.h	/^	UINT m_nPacketSize;	$/;"	m	class:CMsgItemFactory
m_nPacketSize	./MsgHandler/MsgLogin.h	/^	UINT m_nPacketSize;	$/;"	m	class:CMsgLoginFactory
m_nPacketSize	./MsgHandler/MsgSynRoomInfo.h	/^	UINT m_nPacketSize;	$/;"	m	class:CMsgSynRoomInfoFactory
m_nPacketSize	./MsgHandler/MsgUserInfo.h	/^	UINT m_nPacketSize;	$/;"	m	class:CMsgUserInfoFactory
m_nPacketSize	./MsgHandler/MsgVas.h	/^	UINT m_nPacketSize;	$/;"	m	class:CMsgVasFactory
m_nPacketSize	./MsgHandler/MsgWalk.h	/^	UINT m_nPacketSize;	$/;"	m	class:CMsgWalkFactory
m_nPlayerAmount	./Main/PlayerManager.h	/^	UINT	   		m_nPlayerAmount;$/;"	m	class:PlayerManager
m_nPlayerIDS	./Main/PlayerManager.h	/^	PlayerID_t 		m_nPlayerIDS[MAX_PLAYER];$/;"	m	class:PlayerManager
m_nPort	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	int			m_nPort;$/;"	m	class:CMTClientSocket
m_nQuickMatchTimeStamp	./Main/BattleTeam.h	/^	time_t 			m_nQuickMatchTimeStamp;						\/\/准备开始时间戳$/;"	m	class:CBattleTeam
m_nRatio	./Main/UserData.h	/^    UINT32      m_nRatio;               \/\/int  大乱斗结束时候奖励的倍率，默认1倍，看视频后3倍率  $/;"	m	struct:PlayerInfoStruct
m_nRcvSize	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	int			m_nRcvSize;	$/;"	m	class:CMTClientSocket
m_nReconnectIntervalTimeToACC	./Main/ClientManager.h	/^	DWORD 				m_nReconnectIntervalTimeToACC;	\/\/add by huyf 2017.12.17:add reconnect interval time to ACC Server$/;"	m	class:ClientManager
m_nReconnectIntervalTimeToMTS	./Main/ClientManager.h	/^	DWORD 				m_nReconnectIntervalTimeToMTS;			\/\/add by huyf 2017.12.17:add reconnect interval time to MTS Server$/;"	m	class:ClientManager
m_nReconnectIntervalTimeToPW	./Main/ClientManager.h	/^	DWORD 				m_nReconnectIntervalTimeToPW;			\/\/add by huyf 2017.12.17:add reconnect interval time to MTS Server$/;"	m	class:ClientManager
m_nRecvBuffLen	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	INT                         m_nRecvBuffLen;								\/\/长度$/;"	m	class:CMTServerSocket
m_nRecvLeaveLen	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	int			m_nRecvLeaveLen;$/;"	m	class:CMTClientSocket
m_nSendLeaveLen	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	int			m_nSendLeaveLen;$/;"	m	class:CMTClientSocket
m_nSndSize	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	int			m_nSndSize;$/;"	m	class:CMTClientSocket
m_nStarSum	./Main/UserData.h	/^    UInt32      m_nStarSum;             \/\/int 当天保留星星的次数$/;"	m	struct:PlayerInfoStruct
m_nState	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	int			m_nState;$/;"	m	class:CMTClientSocket
m_nStatus	./Main/UserData.h	/^    UInt32      m_nStatus;             \/\/int  死亡状体$/;"	m	struct:PlayerInfoStruct
m_nTeamStatus	./Main/BattleTeam.h	/^	UINT   			m_nTeamStatus;								\/\/队伍的状态$/;"	m	class:CBattleTeam
m_nTimeStamp	./Main/BattleTeam.h	/^	time_t 			m_nTimeStamp;								\/\/战斗开始时间戳$/;"	m	class:CBattleTeam
m_nTimeToACC	./Main/ClientManager.h	/^	DWORD 				m_nTimeToACC;$/;"	m	class:ClientManager
m_nTimeToMTS	./Main/ClientManager.h	/^	DWORD 				m_nTimeToMTS;$/;"	m	class:ClientManager
m_nTimeToPW	./Main/ClientManager.h	/^	DWORD 				m_nTimeToPW;$/;"	m	class:ClientManager
m_nTrailPos	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	INT                         m_nTrailPos;								\/\/尾$/;"	m	class:CMTServerSocket
m_nUid	./Main/UserData.h	/^    UInt32      m_nUid;                 \/\/int 用户id$/;"	m	struct:PlayerInfoStruct
m_pBattle	./Main/BattleManager.h	/^	CBattle* m_pBattle;		\/\/大乱斗对象指针$/;"	m	class:CBattleManager
m_pBcs	./Main/Player.h	/^	CBattleConfusionSingle* m_pBcs;	\/\/单人指针$/;"	m	class:Player
m_pBct	./Main/Player.h	/^	CBattleTeam* m_pBct;	\/\/队伍指针$/;"	m	class:Player
m_pBrbt	./Main/Player.h	/^	CBattleTeam* m_pBrbt;	\/\/队伍指针$/;"	m	class:Player
m_pClientPlayerToACC	./Main/ClientManager.h	/^	ClientPlayer*		m_pClientPlayerToACC;$/;"	m	class:ClientManager
m_pClientPlayerToMTS	./Main/ClientManager.h	/^	ClientPlayer*		m_pClientPlayerToMTS;$/;"	m	class:ClientManager
m_pClientPlayerToPW	./Main/ClientManager.h	/^	ClientPlayer*		m_pClientPlayerToPW;$/;"	m	class:ClientManager
m_pClientPollFd	./NetBase/Socket.h	/^    struct pollfd*   		m_pClientPollFd;$/;"	m	class:Socket	typeref:struct:Socket::pollfd
m_pClientS	./Main/ClientPool.h	/^	ClientPlayer*		m_pClientS;$/;"	m	class:ClientPool
m_pData	./MsgHandler/NetMsg.h	/^	CHAR* 	m_pData;$/;"	m	class:CNetMsg
m_pData	./NetBase/NetMsg.h	/^	CHAR* 	m_pData;$/;"	m	class:CNetMsg
m_pEnemyTeam	./Main/BattleTeam.h	/^	CBattleTeam* 	m_pEnemyTeam;								\/\/地方队伍指针			$/;"	m	class:CBattleTeam
m_pEpollEvent	./NetBase/Socket.h	/^    struct epoll_event*		m_pEpollEvent;$/;"	m	class:Socket	typeref:struct:Socket::epoll_event
m_pKingPlayer	./Main/BattleTeam.h	/^	Player* 		m_pKingPlayer;								\/\/霸主玩家指针$/;"	m	class:CBattleTeam
m_pLock	./Base/GameUtil.h	/^	MyLock* m_pLock;$/;"	m	class:AutoLock_T
m_pMsg	./Main/Player.h	/^	CNetMsg*		m_pMsg;$/;"	m	struct:ASYNC_PACKET
m_pMsg	./MsgHandler/NetMsg.h	/^	cJSON*  m_pMsg;$/;"	m	class:CNetMsg
m_pMsg	./NetBase/NetMsg.h	/^	cJSON*  m_pMsg;$/;"	m	class:CNetMsg
m_pMutex	./Common/MyAutoMutex.h	/^	pthread_mutex_t* m_pMutex;    $/;"	m	class:CMyAutoMutex
m_pObj	./Common/SingleMap.h	/^		T*			m_pObj;$/;"	m	class:CSingleMap::Iterator
m_pPlayer	./MsgHandler/NetMsg.h	/^	Player* m_pPlayer;$/;"	m	class:CNetMsg
m_pPlayer	./NetBase/NetMsg.h	/^	Player* m_pPlayer;$/;"	m	class:CNetMsg
m_pPlayerS	./Main/PlayerPool.h	/^	ServerPlayer*		m_pPlayerS;$/;"	m	class:PlayerPool
m_pRes	./Main/UserData.h	/^    DBMySql*                m_pRes;$/;"	m	class:CUserData
m_pServer	./Common/Config.h	/^	_SERVER_DATA*	m_pServer;	$/;"	m	struct:_SERVER_INFO
m_pServerData	./Main/ClientPlayer.h	/^	_CLIENT_DATA*	m_pServerData;$/;"	m	class:ClientPlayer
m_pServerData	./Main/ServerPlayer.h	/^	_SERVER_DATA*	m_pServerData;$/;"	m	class:ServerPlayer
m_pServerSocket	./Main/ServerManager.h	/^	ServerSocket*                   m_pServerSocket;$/;"	m	class:ServerManager
m_pSet	./Common/SingleMap.h	/^		MAP_SET*	m_pSet;$/;"	m	class:CSingleMap::Iterator
m_pSignUpPlayer	./Main/BattleConfusionSingle.h	/^	Player* m_pSignUpPlayer;				\/\/报名玩家$/;"	m	class:CBattleConfusionSingle
m_pSocket	./Main/Player.h	/^	Socket*						m_pSocket;$/;"	m	class:Player
m_pSocket	./NetBase/ClientSocket.h	/^	Socket* m_pSocket;$/;"	m	class:ClientSocket
m_pSocket	./NetBase/ServerSocket.h	/^	Socket* m_pSocket;$/;"	m	class:ServerSocket
m_pSocket	./NetBase/SocketInputStream.h	/^	Socket* 	m_pSocket;$/;"	m	class:SocketInputStream
m_pSocket	./NetBase/SocketOutputStream.h	/^	Socket* 	m_pSocket;$/;"	m	class:SocketOutputStream
m_pSocketInputStream	./Main/Player.h	/^	SocketInputStream* 			m_pSocketInputStream;$/;"	m	class:Player
m_pSocketOutputStream	./Main/Player.h	/^	SocketOutputStream* 		m_pSocketOutputStream;$/;"	m	class:Player
m_passwd	./DataBase/DBMySql.h	/^    std::string m_passwd;$/;"	m	class:DBMySql
m_playerMap	./Main/PlayerPool.h	/^	PlayerMap 			m_playerMap;$/;"	m	class:PlayerPool
m_port	./DataBase/DBMySql.h	/^    short 		m_port;$/;"	m	class:DBMySql
m_robot	./Main/Player.h	/^	Robot* 					 	m_robot;	$/;"	m	class:Player
m_set	./Common/T_MyQueue.h	/^	QUEUE_SET m_set;$/;"	m	class:CMyQueue
m_setPlayer	./Main/PlayerManager.h	/^	PLAYERLIST_SET          m_setPlayer;$/;"	m	class:PlayerManager
m_sock	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	SOCKET		m_sock;$/;"	m	class:CMTClientSocket
m_sock	./NetBase/MulitThreadNetBase/MTListenSocket.h	/^	SOCKET			m_sock;$/;"	m	class:CMTListenSocket
m_sock	./NetBase/MulitThreadNetBase/MTServerSocket.h	/^	SOCKET 						m_sock;$/;"	m	class:CMTServerSocket
m_szIP	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	NAMESTR		m_szIP;$/;"	m	class:CMTClientSocket
m_tFightTimeInterval	./Main/BattleTeam.h	/^	CTimeOut 		m_tFightTimeInterval;						\/\/战斗时间间隔 没隔多久出发一次	$/;"	m	class:CBattleTeam
m_tUpdateTime	./Common/TimeOut.h	/^	clock_t	m_tUpdateTime;$/;"	m	class:CTimeOutMS_
m_tUpdateTime	./Common/TimeOut.h	/^	time_t	m_tUpdateTime;$/;"	m	class:CTimeOut_
m_time	./Main/Player.h	/^	DWORD 						m_time;$/;"	m	class:Player
m_toConsole	./Base/logger.h	/^        bool m_toConsole;$/;"	m	class:Logger
m_toFile	./Base/logger.h	/^        bool m_toFile;$/;"	m	class:Logger
m_uTickOld	./Base/GameUtil.h	/^	UINT m_uTickOld;$/;"	m	class:CMyTimer
m_uTickTerm	./Base/GameUtil.h	/^	UINT m_uTickTerm;$/;"	m	class:CMyTimer
m_user	./DataBase/DBMySql.h	/^    std::string m_user;$/;"	m	class:DBMySql
m_vItemList	./Main/BattleTeam.h	/^	VT_ITEM_LIST 	m_vItemList;								\/\/一局战斗中item列表$/;"	m	class:CBattleTeam
m_vtBcTeam	./Main/Battle.h	/^	VT_BC_TEAM m_vtBcTeam;		\/\/组队列表$/;"	m	class:CBattle
m_vtBcs	./Main/Battle.h	/^	VT_BCS m_vtBcs;		\/\/单人列表$/;"	m	class:CBattle
m_vtRbTeam	./Main/Battle.h	/^	VT_RB_TEAM m_vtRbTeam;		\/\/组队列表$/;"	m	class:CBattle
m_vtTeamPlayerS	./Main/BattleTeam.h	/^	TEAMPLAYERSET 	m_vtTeamPlayerS;							\/\/队伍列表$/;"	m	class:CBattleTeam
main	./Main/World.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	./build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	./build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
malloc_fn	./Protocol/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
mask_	./websocket/websocket_request.h	/^	uint8_t mask_;$/;"	m	class:Websocket_Request
mask_	./websocket/websocket_respond.h	/^	uint8_t mask_;$/;"	m	class:Websocket_Respond
masking_key_	./websocket/websocket_request.h	/^	uint8_t masking_key_[4];$/;"	m	class:Websocket_Request
money	./Main/RobotConf.h	/^    UInt32 money;$/;"	m	struct:RobotBaseProp
nId	./Main/BattleTeam.h	/^	INT nId;				\/\/道具id$/;"	m	struct:ItemInfo
nItemType	./Main/BattleTeam.h	/^	INT nItemType;			\/\/道具type$/;"	m	struct:ItemInfo
nKillSum	./Main/BattleTeam.h	/^	INT nKillSum;	\/\/击杀$/;"	m	struct:BattleConfusionTeamTopInfo
nSorce	./Main/BattleTeam.h	/^	INT nSorce;				\/\/道具积分$/;"	m	struct:ItemInfo
nSorce	./Main/BattleTeam.h	/^	INT nSorce;		\/\/积分$/;"	m	struct:BattleConfusionTeamTopInfo
nUid	./Main/BattleTeam.h	/^	INT nUid;		\/\/用户id$/;"	m	struct:BattleConfusionTeamTopInfo
name	./Common/Config.h	/^	char		name[NAME_SIZE];$/;"	m	struct:RobotConf
nameId	./Main/RobotConf.h	/^    UInt16 nameId;$/;"	m	struct:RobotBaseProp
name_id	./Common/Config.h	/^	UInt16 		name_id;$/;"	m	struct:RobotConf
next	./Protocol/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
num_fields	./DataBase/DBMySql.cpp	/^int DBMySql::num_fields(MYSQL_RES* res)$/;"	f	class:DBMySql
offline	./Main/Robot.cpp	/^bool Robot::offline()$/;"	f	class:Robot
offlinePwTs	./Main/RobotConf.h	/^    UInt64 offlinePwTs;$/;"	m	struct:RobotBaseProp
offset	./Protocol/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon9	file:
opcode_	./websocket/websocket_request.h	/^	uint8_t opcode_;$/;"	m	class:Websocket_Request
opcode_	./websocket/websocket_respond.h	/^	uint8_t opcode_;$/;"	m	class:Websocket_Respond
open_ex	./NetBase/FileAPI.cpp	/^INT FileAPI::open_ex(const CHAR* filename, INT flags)$/;"	f	class:FileAPI
open_ex	./NetBase/FileAPI.cpp	/^INT FileAPI::open_ex(const CHAR* filename, INT flags, INT mode)$/;"	f	class:FileAPI
operator ()	./Common/Common.h	/^        inline void operator() (const std::pair<Ty1, Ty2> &ptr) const$/;"	f	struct:DeletePair
operator ()	./Common/Common.h	/^        inline void operator()(const T *ptr) const$/;"	f	struct:DeletePtrs
operator *	./Common/AutoPtr.h	/^	T& operator * ()	{	return *_ptr;	}$/;"	f	class:AutoPtr
operator ->	./Common/AutoPtr.h	/^	T* operator -> ()	{	return _ptr;	} \/\/访问谁的成员，就返回谁的地址$/;"	f	class:AutoPtr
operator ->	./Common/SingleMap.h	/^		T * operator->()						{ return m_pObj; }$/;"	f	class:CSingleMap::Iterator
operator <<	./websocket/sha1.cpp	/^SHA1& SHA1::operator<<(const char *message_array)$/;"	f	class:SHA1
operator <<	./websocket/sha1.cpp	/^SHA1& SHA1::operator<<(const char message_element)$/;"	f	class:SHA1
operator <<	./websocket/sha1.cpp	/^SHA1& SHA1::operator<<(const unsigned char *message_array)$/;"	f	class:SHA1
operator <<	./websocket/sha1.cpp	/^SHA1& SHA1::operator<<(const unsigned char message_element)$/;"	f	class:SHA1
operator T*	./Common/SingleMap.h	/^		operator T*()							{ return m_pObj; }$/;"	f	class:CSingleMap::Iterator
pack_data	./websocket/websocket_respond.cpp	/^int  Websocket_Respond::pack_data(const unsigned char* message,size_t msg_len, uint8_t fin , $/;"	f	class:Websocket_Respond
packageID	./MsgHandler/NetMsg.h	/^	UInt32  packageID;            \/\/ pkg length$/;"	m	struct:ProtocolHead14Byte
packageID	./MsgHandler/NetMsg.h	/^	UInt32  packageID;            \/\/ pkg length$/;"	m	struct:ProtocolHead16Byte
packageLen	./MsgHandler/NetMsg.h	/^	UInt32  packageLen;          \/\/ adler32 check, adler32 of command, retCode and protobufData ProtocolHead$/;"	m	struct:ProtocolHead14Byte
packageLen	./MsgHandler/NetMsg.h	/^	UInt32  packageLen;          \/\/ adler32 check, adler32 of command, retCode and protobufData ProtocolHead$/;"	m	struct:ProtocolHead16Byte
parse_array	./Protocol/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:
parse_hex4	./Protocol/cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:
parse_number	./Protocol/cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:
parse_object	./Protocol/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:
parse_str	./websocket/websocket_handler.cpp	/^void Websocket_Handler::parse_str(char *request){  $/;"	f	class:Websocket_Handler
parse_string	./Protocol/cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:
parse_value	./Protocol/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:
payload_	./websocket/websocket_request.h	/^	char payload_[2048];$/;"	m	class:Websocket_Request
payload_length_	./websocket/websocket_request.h	/^	uint64_t payload_length_;$/;"	m	class:Websocket_Request
ping	./DataBase/DBMySql.h	/^	void ping() { mysql_ping(m_mysql); }$/;"	f	class:DBMySql
pkgLen	./MsgHandler/NetMsg.h	/^	UInt32  pkgLen;            \/\/ pkg length$/;"	m	struct:ProtocolCmd
pkgLen	./MsgHandler/NetMsg.h	/^	UInt32  pkgLen;            \/\/ pkg length$/;"	m	struct:ProtocolHead
pkgLen	./NetBase/NetMsg.h	/^	UInt32  pkgLen;            \/\/ pkg length$/;"	m	struct:ProtocolCmd
pkgLen	./NetBase/NetMsg.h	/^	UInt32  pkgLen;            \/\/ pkg length$/;"	m	struct:ProtocolHead
pkg_len	./websocket/protocol.h	/^        UInt32 pkg_len;$/;"	m	struct:ProtocolPacket
pkg_type	./websocket/protocol.h	/^        UInt32 pkg_type;$/;"	m	struct:ProtocolPacket
poll_ex	./NetBase/SocketAPI.cpp	/^INT SocketAPI::poll_ex(struct pollfd *fds, nfds_t nfds, int timeout)$/;"	f	class:SocketAPI
pop	./Common/T_MyQueue.h	/^	T 	 	pop		()			{	if(size()) {	T obj = *m_set.begin();	m_set.pop_front();	return obj;		}	return 0;}$/;"	f	class:CMyQueue
pos	./websocket/websocket_request.h	/^        int pos;$/;"	m	class:Websocket_Request
pow2gt	./Protocol/cJSON.c	/^static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}$/;"	f	file:
prev	./Protocol/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::
print	./websocket/websocket_request.cpp	/^void Websocket_Request::print(){$/;"	f	class:Websocket_Request
print_array	./Protocol/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:
print_number	./Protocol/cJSON.c	/^static char *print_number(cJSON *item,printbuffer *p)$/;"	f	file:
print_object	./Protocol/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:
print_string	./Protocol/cJSON.c	/^static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}$/;"	f	file:
print_string_ptr	./Protocol/cJSON.c	/^static char *print_string_ptr(const char *str,printbuffer *p)$/;"	f	file:
print_value	./Protocol/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:
printbuffer	./Protocol/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	t	typeref:struct:__anon9	file:
process	./websocket/websocket_handler.cpp	/^int Websocket_Handler::process(){$/;"	f	class:Websocket_Handler
protobufData	./MsgHandler/NetMsg.h	/^	char    protobufData[0];   \/\/ Message Data     --- Protobuf Data$/;"	m	struct:ProtocolCmd
protobufData	./MsgHandler/NetMsg.h	/^	char    protobufData[0];$/;"	m	struct:ProtocolHead14Byte
protobufData	./MsgHandler/NetMsg.h	/^	char    protobufData[0];$/;"	m	struct:ProtocolHead16Byte
protobufData	./NetBase/NetMsg.h	/^	char    protobufData[0];   \/\/ Message Data     --- Protobuf Data$/;"	m	struct:ProtocolCmd
protobufData	./websocket/protocol.h	/^        char protobufData[0];$/;"	m	struct:ProtocolPacket
push	./Common/T_MyQueue.h	/^	void 	push	(T obj)		{	m_set.push_back(obj);	}$/;"	f	class:CMyQueue
qnxnto	./build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	./build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
read_ex	./NetBase/FileAPI.cpp	/^UINT FileAPI::read_ex(INT fd, VOID* buf, UINT len)$/;"	f	class:FileAPI
receive	./NetBase/Socket.cpp	/^INT Socket::receive(VOID* buf, UINT len, UINT flags\/*=0*\/)$/;"	f	class:Socket
reconnect	./NetBase/Socket.cpp	/^BOOL Socket::reconnect(const CHAR* host, UINT port)$/;"	f	class:Socket
reconnect_ex	./NetBase/SocketAPI.cpp	/^int SocketAPI::reconnect_ex(SOCKET s, const struct sockaddr* servaddr, UINT addrlen)$/;"	f	class:SocketAPI
recv_ex	./NetBase/SocketAPI.cpp	/^INT SocketAPI::recv_ex(SOCKET s, VOID* buff, UINT nbytes, INT flags)$/;"	f	class:SocketAPI
recvfrom_ex	./NetBase/SocketAPI.cpp	/^INT SocketAPI::recvfrom_ex(SOCKET s, VOID* buff, UINT nbytes, INT flags, struct sockaddr* from, INT* addrlen)$/;"	f	class:SocketAPI
registerTime	./Main/RobotConf.h	/^    UInt32 registerTime; \/\/ game server ts$/;"	m	struct:RobotBaseProp
request_	./websocket/websocket_handler.h	/^	Websocket_Request *     request_;       \/\/请求处理类$/;"	m	class:Websocket_Handler
reset	./websocket/websocket_request.cpp	/^void Websocket_Request::reset(){$/;"	f	class:Websocket_Request
respond_	./websocket/websocket_handler.h	/^    Websocket_Respond *     respond_;       \/\/应答处理类$/;"	m	class:Websocket_Handler
ret	./MsgHandler/NetMsg.h	/^	UInt16  ret;           \/\/ return           --- 0 - success, != 0 - error. ERROR_CODE$/;"	m	struct:ProtocolCmd
ret	./MsgHandler/NetMsg.h	/^	UInt16  ret;           \/\/ return           --- 0 - success, != 0 - error. ERROR_CODE$/;"	m	struct:ProtocolHead
ret	./NetBase/NetMsg.h	/^	UInt16  ret;           \/\/ return           --- 0 - success, != 0 - error. ERROR_CODE$/;"	m	struct:ProtocolCmd
ret	./NetBase/NetMsg.h	/^	UInt16  ret;           \/\/ return           --- 0 - success, != 0 - error. ERROR_CODE$/;"	m	struct:ProtocolHead
return_if_fail	./Common/MyAutoMutex.h	18;"	d
robotId	./Main/RobotConf.h	/^    UInt8 robotId[32];$/;"	m	struct:RobotBaseProp
scnSOCKADDR_IN	./Common/BaseType.h	/^static const UINT scnSOCKADDR_IN = sizeof(SOCKADDR_IN);$/;"	v
scnSOCKADDR_IN6	./Common/BaseType.h	/^static const UINT scnSOCKADDR_IN6 = sizeof(SOCKADDR_IN6);$/;"	v
select_ex	./NetBase/SocketAPI.cpp	/^INT SocketAPI::select_ex(INT maxfdp1, fd_set* readset, fd_set* writeset, fd_set* exceptset, struct timeval* timeout)$/;"	f	class:SocketAPI
send	./NetBase/Socket.cpp	/^INT Socket::send(const VOID* buf, UINT len, UINT flags\/*=0*\/)$/;"	f	class:Socket
send_broadcast_data	./websocket/websocket_handler.cpp	/^int Websocket_Handler::send_broadcast_data(char *buff){$/;"	f	class:Websocket_Handler
send_data	./websocket/websocket_handler.cpp	/^int Websocket_Handler::send_data(char *buff){$/;"	f	class:Websocket_Handler
send_ex	./NetBase/SocketAPI.cpp	/^INT SocketAPI::send_ex(SOCKET s, const VOID* buff, UINT nbytes, INT flags)$/;"	f	class:SocketAPI
sendto_ex	./NetBase/SocketAPI.cpp	/^INT SocketAPI::sendto_ex(SOCKET s, const VOID* buff, UINT nbytes, INT flags, const struct sockaddr* to, INT addrlen )$/;"	f	class:SocketAPI
setDontLinger	./NetBase/Socket.cpp	/^BOOL Socket::setDontLinger(BOOL on\/*=TRUE*\/)$/;"	f	class:Socket
setKeepAlive	./NetBase/Socket.cpp	/^BOOL Socket::setKeepAlive(BOOL on\/*=TRUE*\/)$/;"	f	class:Socket
setLinger	./NetBase/Socket.cpp	/^BOOL Socket::setLinger(UINT lingertime)$/;"	f	class:Socket
setMaxSeg	./NetBase/Socket.cpp	/^BOOL Socket::setMaxSeg(INT size)$/;"	f	class:Socket
setNoDelay	./NetBase/Socket.cpp	/^BOOL Socket::setNoDelay(BOOL on)$/;"	f	class:Socket
setNonBlocking	./NetBase/Socket.cpp	/^BOOL Socket::setNonBlocking(BOOL on) $/;"	f	class:Socket
setRcvLowAt	./NetBase/Socket.cpp	/^BOOL Socket::setRcvLowAt(BOOL on\/*=TRUE*\/)$/;"	f	class:Socket
setRcvTimeO	./NetBase/Socket.cpp	/^BOOL Socket::setRcvTimeO(struct timeval& timeout)$/;"	f	class:Socket
setReceiveBufferSize	./NetBase/Socket.cpp	/^BOOL Socket::setReceiveBufferSize(UINT size)$/;"	f	class:Socket
setReuseAddr	./NetBase/Socket.cpp	/^BOOL Socket::setReuseAddr(BOOL on\/*=TRUE*\/)$/;"	f	class:Socket
setReusePort	./NetBase/Socket.cpp	/^BOOL Socket::setReusePort(BOOL on\/*=TRUE*\/)$/;"	f	class:Socket
setSendBufferSize	./NetBase/Socket.cpp	/^BOOL Socket::setSendBufferSize(UINT size)$/;"	f	class:Socket
setSendLowAt	./NetBase/Socket.cpp	/^BOOL Socket::setSendLowAt(BOOL on\/*=TRUE*\/)$/;"	f	class:Socket
setSendTimeO	./NetBase/Socket.cpp	/^BOOL Socket::setSendTimeO(struct timeval& timeout)$/;"	f	class:Socket
setSocketID	./NetBase/Socket.h	/^    void    setSocketID(SOCKET sock){  m_SocketID = sock;  }$/;"	f	class:Socket
setSocketOpt	./NetBase/Socket.cpp	/^BOOL Socket::setSocketOpt(UINT bLinger\/*=TRUE*\/, BOOL bReuseAddr\/*=TRUE*\/, BOOL bReusePort\/*=TRUE*\/, BOOL bNoDelay\/*=TRUE*\/, BOOL bKeepAlive\/*=TRUE*\/, BOOL bNonBlocking\/*=TRUE*\/, BOOL bDontLinger\/*=TRUE*\/,UINT unSendBuffSize\/*=0*\/, UINT unRecvBuffSize\/*=0*\/)$/;"	f	class:Socket
setStatus	./Common/Thread.h	/^	VOID setStatus(ThreadStatus status) { m_Status = status; }$/;"	f	class:Thread
setaccId	./Main/Robot.h	/^    inline void setaccId(UInt32 accid)$/;"	f	class:Robot
setfilenonblocking_ex	./NetBase/FileAPI.cpp	/^VOID FileAPI::setfilenonblocking_ex(INT fd, BOOL no)$/;"	f	class:FileAPI
setfilenonblocking_ex2	./NetBase/FileAPI.cpp	/^VOID FileAPI::setfilenonblocking_ex2(INT fd, BOOL no)$/;"	f	class:FileAPI
setsocketnonblocking_ex	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::setsocketnonblocking_ex(SOCKET s, BOOL on)$/;"	f	class:SocketAPI
setsocketopt_ex	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::setsocketopt_ex(SOCKET s, INT level, INT optname, const VOID* optval, UINT optlen)$/;"	f	class:SocketAPI
shortLevel	./Base/logger.cpp	/^std::string Logger::shortLevel(LOG_LEVEL level){$/;"	f	class:Logger
shortPhy	./Main/RobotConf.h	/^    UInt32 shortPhy;$/;"	m	struct:RobotBaseProp
short_physical	./Common/Config.h	/^	UInt16 		short_physical;$/;"	m	struct:RobotConf
shutdown_ex	./NetBase/SocketAPI.cpp	/^BOOL SocketAPI::shutdown_ex(SOCKET s, INT howto)$/;"	f	class:SocketAPI
size	./Common/T_MyQueue.h	/^	int 	size 	()			{	return m_set.size();	}$/;"	f	class:CMyQueue
skinState	./Main/RobotConf.h	/^    UInt32 skinState;$/;"	m	struct:RobotBaseProp
skin_state	./Common/Config.h	/^	UInt16 		skin_state;$/;"	m	struct:RobotConf
skip	./Protocol/cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:
sleep	./Main/RobotConf.h	/^    UInt32 sleep;$/;"	m	struct:RobotBaseProp
socket_ex	./NetBase/SocketAPI.cpp	/^SOCKET SocketAPI::socket_ex(INT family, INT type, INT protocol)$/;"	f	class:SocketAPI
status_	./websocket/websocket_handler.h	/^	WEBSOCKET_STATUS        status_;        \/\/表示是否经过了SHA1处理$/;"	m	class:Websocket_Handler
strHeadPicurl	./Main/BattleTeam.h	/^	std::string strHeadPicurl;	\/\/玩家头像$/;"	m	struct:BattleConfusionTeamTopInfo
strNickName	./Main/BattleTeam.h	/^	std::string strNickName;	\/\/玩家昵称$/;"	m	struct:BattleConfusionTeamTopInfo
string	./Protocol/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON
sufaceTemperature	./Main/RobotConf.h	/^    UInt16 sufaceTemperature;$/;"	m	struct:RobotBaseProp
suffix_object	./Protocol/cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:
surface_temperature	./Common/Config.h	/^	UInt16 		surface_temperature;$/;"	m	struct:RobotConf
target	./MsgHandler/NetMsg.h	/^	UInt16  target;            \/\/ Target Module    --- MessageTransferTarget$/;"	m	struct:ProtocolCmd
target	./MsgHandler/NetMsg.h	/^	UInt16  target;            \/\/ Target Module    --- MessageTransferTarget$/;"	m	struct:ProtocolHead
target	./NetBase/NetMsg.h	/^	UInt16  target;            \/\/ Target Module    --- MessageTransferTarget$/;"	m	struct:ProtocolCmd
target	./NetBase/NetMsg.h	/^	UInt16  target;            \/\/ Target Module    --- MessageTransferTarget$/;"	m	struct:ProtocolHead
tell_ex	./NetBase/FileAPI.cpp	/^LONG FileAPI::tell_ex(INT fd)$/;"	f	class:FileAPI
thirsty	./Common/Config.h	/^	UInt16 		thirsty;$/;"	m	struct:RobotConf
thirsty	./Main/RobotConf.h	/^    UInt32 thirsty;$/;"	m	struct:RobotBaseProp
time_t	./Common/Type.h	/^typedef long time_t;         \/* 时间值 *\/$/;"	t
time_t	./Main/BattleTeam.h	/^typedef      long    time_t;    \/* 时间值time_t为长整型的别名*\/$/;"	t
type	./Common/Config.h	/^	UInt16 		type;$/;"	m	struct:RobotConf
type	./Protocol/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON
tz	./Base/TimeManager.h	/^	struct timezone tz;$/;"	m	class:TimeManager	typeref:struct:TimeManager::timezone
uchar	./Common/BaseType.h	/^typedef UCHAR uchar;$/;"	t
uint	./Common/BaseType.h	/^typedef UINT uint;$/;"	t
ulong	./Common/BaseType.h	/^typedef ULONG ulong;$/;"	t
update	./Protocol/cJSON.c	/^static int update(printbuffer *p)$/;"	f	file:
ushort	./Common/BaseType.h	/^typedef USHORT ushort;$/;"	t
valuedouble	./Protocol/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valueint	./Protocol/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valuestring	./Protocol/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON
webSocketHead1	./MsgHandler/NetMsg.h	/^	UInt32  webSocketHead1;$/;"	m	struct:ProtocolHead14Byte
webSocketHead1	./MsgHandler/NetMsg.h	/^	UInt32  webSocketHead1;$/;"	m	struct:ProtocolHead16Byte
webSocketHead2	./MsgHandler/NetMsg.h	/^	SHORT   webSocketHead2;$/;"	m	struct:ProtocolHead14Byte
webSocketHead2	./MsgHandler/NetMsg.h	/^	UInt32  webSocketHead2;$/;"	m	struct:ProtocolHead16Byte
write	./Base/logger.cpp	/^void Logger::write(std::string& strlog){$/;"	f	class:Logger
write_ex	./NetBase/FileAPI.cpp	/^UINT FileAPI::write_ex(INT fd, const VOID* buf, UINT len)$/;"	f	class:FileAPI
~ASYNC_PACKET	./Main/Player.h	/^	~ASYNC_PACKET( )$/;"	f	struct:ASYNC_PACKET
~AutoLock_T	./Base/GameUtil.h	/^	~AutoLock_T()$/;"	f	class:AutoLock_T
~CBattle	./Main/Battle.cpp	/^CBattle::~CBattle()$/;"	f	class:CBattle
~CBattleConfusionSingle	./Main/BattleConfusionSingle.cpp	/^CBattleConfusionSingle::~CBattleConfusionSingle()$/;"	f	class:CBattleConfusionSingle
~CBattleManager	./Main/BattleManager.cpp	/^CBattleManager::~CBattleManager()$/;"	f	class:CBattleManager
~CBattleTeam	./Main/BattleTeam.cpp	/^CBattleTeam::~CBattleTeam()$/;"	f	class:CBattleTeam
~CClientSocket	./NetBase/MulitThreadNetBase/MTClientSocket.h	/^	~CClientSocket() {}$/;"	f	class:CMTClientSocket
~CEvent	./Common/Event.cpp	/^CEvent::~CEvent()$/;"	f	class:CEvent
~CIniFile	./Common/IniFile.cpp	/^CIniFile::~CIniFile()$/;"	f	class:CIniFile
~CMTListenSocket	./NetBase/MulitThreadNetBase/MTListenSocket.h	/^	~CMTListenSocket() { Close(); };$/;"	f	class:CMTListenSocket
~CMTServerSocket	./NetBase/MulitThreadNetBase/MTServerSocket.cpp	/^CMTServerSocket::~CMTServerSocket()$/;"	f	class:CMTServerSocket
~CMsgAction	./MsgHandler/MsgAction.cpp	/^CMsgAction::~CMsgAction() $/;"	f	class:CMsgAction
~CMsgBattle	./MsgHandler/MsgBattle.cpp	/^CMsgBattle::~CMsgBattle() $/;"	f	class:CMsgBattle
~CMsgExchang	./MsgHandler/MsgExchang.cpp	/^CMsgExchang::~CMsgExchang() $/;"	f	class:CMsgExchang
~CMsgItem	./MsgHandler/MsgItem.cpp	/^CMsgItem::~CMsgItem() $/;"	f	class:CMsgItem
~CMsgLogin	./MsgHandler/MsgLogin.cpp	/^CMsgLogin::~CMsgLogin() $/;"	f	class:CMsgLogin
~CMsgSynRoomInfo	./MsgHandler/MsgSynRoomInfo.cpp	/^CMsgSynRoomInfo::~CMsgSynRoomInfo() $/;"	f	class:CMsgSynRoomInfo
~CMsgUserInfo	./MsgHandler/MsgUserInfo.cpp	/^CMsgUserInfo::~CMsgUserInfo() $/;"	f	class:CMsgUserInfo
~CMsgVas	./MsgHandler/MsgVas.cpp	/^CMsgVas::~CMsgVas() $/;"	f	class:CMsgVas
~CMsgWalk	./MsgHandler/MsgWalk.cpp	/^CMsgWalk::~CMsgWalk() $/;"	f	class:CMsgWalk
~CMyAutoMutex	./Common/MyAutoMutex.cpp	/^CMyAutoMutex::~CMyAutoMutex()$/;"	f	class:CMyAutoMutex
~CNetMsg	./MsgHandler/NetMsg.cpp	/^CNetMsg::~CNetMsg()$/;"	f	class:CNetMsg
~CSingleMap	./Common/SingleMap.h	/^CSingleMap<T>::~CSingleMap()$/;"	f	class:CSingleMap
~CUserData	./Main/UserData.cpp	/^CUserData::~CUserData()$/;"	f	class:CUserData
~ClientManager	./Main/ClientManager.cpp	/^ClientManager::~ClientManager()$/;"	f	class:ClientManager
~ClientPlayer	./Main/ClientPlayer.cpp	/^ClientPlayer::~ClientPlayer()$/;"	f	class:ClientPlayer
~ClientPool	./Main/ClientPool.cpp	/^ClientPool::~ClientPool()$/;"	f	class:ClientPool
~ClientSocket	./NetBase/ClientSocket.cpp	/^ClientSocket::~ClientSocket()$/;"	f	class:ClientSocket
~DBMySql	./DataBase/DBMySql.cpp	/^DBMySql::~DBMySql()$/;"	f	class:DBMySql
~ISingleMap	./Common/I_SingleMap.h	/^	virtual ~ISingleMap() {}$/;"	f	class:ISingleMap
~Log	./Base/Log.cpp	/^Log::~Log( )$/;"	f	class:Log
~Logger	./Base/logger.h	/^        ~Logger(){$/;"	f	class:Logger
~MyLock	./Base/GameUtil.h	/^		~MyLock( ){ DeleteCriticalSection(&m_Lock); } ;$/;"	f	class:MyLock
~MyLock	./Base/GameUtil.h	/^		~MyLock( ){ pthread_mutex_destroy( &m_Mutex) ; } ;$/;"	f	class:MyLock
~PacketFactory	./Common/PacketFactory.h	/^	virtual ~PacketFactory()	{}$/;"	f	class:PacketFactory
~PacketFactoryManager	./Common/PacketFactoryManager.cpp	/^PacketFactoryManager::~PacketFactoryManager()$/;"	f	class:PacketFactoryManager
~Player	./Main/Player.cpp	/^Player::~Player()$/;"	f	class:Player
~PlayerManager	./Main/PlayerManager.cpp	/^PlayerManager::~PlayerManager()$/;"	f	class:PlayerManager
~PlayerPool	./Main/PlayerPool.cpp	/^PlayerPool::~PlayerPool()$/;"	f	class:PlayerPool
~Robot	./Main/Robot.h	/^    ~Robot() {};$/;"	f	class:Robot
~SHA1	./websocket/sha1.cpp	/^SHA1::~SHA1()$/;"	f	class:SHA1
~ServerManager	./Main/ServerManager.cpp	/^ServerManager::~ServerManager()$/;"	f	class:ServerManager
~ServerPlayer	./Main/ServerPlayer.cpp	/^ServerPlayer::~ServerPlayer()$/;"	f	class:ServerPlayer
~ServerSocket	./NetBase/ServerSocket.cpp	/^ServerSocket::~ServerSocket()$/;"	f	class:ServerSocket
~Socket	./NetBase/Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket
~SocketInputStream	./NetBase/SocketInputStream.cpp	/^SocketInputStream::~SocketInputStream()$/;"	f	class:SocketInputStream
~SocketOutputStream	./NetBase/SocketOutputStream.cpp	/^SocketOutputStream::~SocketOutputStream()$/;"	f	class:SocketOutputStream
~TimeManager	./Base/TimeManager.cpp	/^TimeManager::~TimeManager()$/;"	f	class:TimeManager
~Websocket_Handler	./websocket/websocket_handler.cpp	/^Websocket_Handler::~Websocket_Handler(){}$/;"	f	class:Websocket_Handler
~Websocket_Request	./websocket/websocket_request.cpp	/^Websocket_Request::~Websocket_Request(){}$/;"	f	class:Websocket_Request
~Websocket_Respond	./websocket/websocket_respond.cpp	/^Websocket_Respond::~Websocket_Respond() { }$/;"	f	class:Websocket_Respond
~World	./Main/World.cpp	/^World::~World()$/;"	f	class:World
~_SERVER_INFO	./Common/Config.h	/^	~_SERVER_INFO()$/;"	f	struct:_SERVER_INFO
