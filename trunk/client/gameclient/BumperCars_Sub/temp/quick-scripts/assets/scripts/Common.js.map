{"version":3,"sources":["Common.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["export default class Common\r\n{\r\n    constructor()\r\n    {\r\n\r\n    }\r\n\r\n    public static CreateImage(node: cc.Node, avatarUrl: string) \r\n    {\r\n        if(!node || !avatarUrl){\r\n            return;\r\n        }\r\n\r\n        if (CC_WECHATGAME) \r\n        {\r\n            try {\r\n                let image = wx.createImage();\r\n                image.onload = () => {\r\n                    try {\r\n                        let texture = new cc.Texture2D();\r\n                        texture.initWithElement(image);\r\n                        texture.handleLoadedTexture();\r\n                        node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);\r\n                    } catch (e) {\r\n                        cc.log(e);\r\n                        node.active = false;\r\n                    }\r\n                };\r\n                image.src = avatarUrl;\r\n            }catch (e) {\r\n                cc.log(e);\r\n                node.active = false;\r\n            }\r\n        } else {\r\n            cc.loader.load({\r\n                url: avatarUrl, type: 'jpg'\r\n            }, (err, texture) => {\r\n                node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);\r\n            });\r\n        }\r\n    }\r\n    \r\n    public static SetNodeText(node: cc.Node, text: string)\r\n    {\r\n        if(node)\r\n        {\r\n            var label = node.getComponent(cc.Label);\r\n            if(label)\r\n            {\r\n                label.string = text;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static SetNodeTexture(node: cc.Node, filename: string)\r\n    {\r\n        if(node && filename)\r\n        {\r\n            let atlas: cc.SpriteAtlas = cc.loader.getRes('subdomain', cc.SpriteAtlas);\r\n\r\n            if(atlas)\r\n            {\r\n                let spriteFrame = atlas.getSpriteFrame(filename);\r\n                if(spriteFrame)\r\n                {\r\n                    let sprite = node.getComponent(cc.Sprite);\r\n                    if(sprite)\r\n                    {\r\n                        sprite.spriteFrame = spriteFrame;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // public static SetNodeTexture(node: cc.Node, filename: string)\r\n    // {\r\n    //     if(node && filename)\r\n    //     {\r\n                // filename = cc.url.raw(\"resources/\" + filename + \".png\");\r\n    //         cc.loader.load({\r\n    //             url: filename, type: 'png'\r\n    //         }, (err, texture) => {\r\n    //             if(node.getComponent(cc.Sprite)){\r\n    //                 node.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);\r\n    //             }\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n    //根据传入的最大字符个数截取字符串\r\n    public static GetByteVal(val, max) \r\n    {\r\n        var returnValue = '';\r\n        var byteValLen = 0;\r\n        for (var i = 0; i < val.length; i++) {\r\n            if (val[i].match(/[^\\x00-\\xff]/ig) != null)\r\n                byteValLen += 2;\r\n            else\r\n                byteValLen += 1;\r\n            if (byteValLen > max)\r\n                break;\r\n            returnValue += val[i];\r\n        }\r\n        return returnValue;\r\n    }\r\n}"]}